
Assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08005788  08005788  00015788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bd0  08005bd0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005bd0  08005bd0  00015bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bd8  08005bd8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bd8  08005bd8  00015bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bdc  08005bdc  00015bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  200001dc  08005dbc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  08005dbc  00020488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000073d6  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001367  00000000  00000000  00027625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d0  00000000  00000000  00028990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000512  00000000  00000000  00029060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000267e4  00000000  00000000  00029572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000794f  00000000  00000000  0004fd56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee756  00000000  00000000  000576a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f78  00000000  00000000  00145dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00148d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005770 	.word	0x08005770

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08005770 	.word	0x08005770

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <HAL_GPIO_EXTI_Callback>:

volatile uint32_t currentTime = 0, lastButtonPressTime = 0;
int buttonPressCount = 0, switcher = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BUTTON_EXTI13_Pin)
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eb4:	d13e      	bne.n	8000f34 <HAL_GPIO_EXTI_Callback+0x90>
  {
   currentTime = HAL_GetTick(); //sample current time for comparison, if button is pressed
 8000eb6:	f000 fb0f 	bl	80014d8 <HAL_GetTick>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4a1f      	ldr	r2, [pc, #124]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x98>)
 8000ebe:	6013      	str	r3, [r2, #0]
   buttonPressCount++;
 8000ec0:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	4a1e      	ldr	r2, [pc, #120]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000ec8:	6013      	str	r3, [r2, #0]
    // Check if the time elapsed since the last button press is less than your threshold (e.g., 500 ms)
    if (buttonPressCount == 2)
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d129      	bne.n	8000f26 <HAL_GPIO_EXTI_Callback+0x82>
    { //500ms threshold

      if ((currentTime - lastButtonPressTime) < 2)
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x98>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d817      	bhi.n	8000f10 <HAL_GPIO_EXTI_Callback+0x6c>
      {
     printf("%d, %d, %d", currentTime, lastButtonPressTime, buttonPressCount);//seems to be in seconds
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x98>)
 8000ee2:	6819      	ldr	r1, [r3, #0]
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4816      	ldr	r0, [pc, #88]	; (8000f48 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000eee:	f002 fc35 	bl	800375c <iprintf>
        printf("\t Double press detected. \n");
 8000ef2:	4816      	ldr	r0, [pc, #88]	; (8000f4c <HAL_GPIO_EXTI_Callback+0xa8>)
 8000ef4:	f002 fc98 	bl	8003828 <puts>
        // Execute your action for the double press here
        // Reset the count for the next detection
        // set a variable called 'switcher' to TRUE
        buttonPressCount = 0;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
        switcher=1;
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <HAL_GPIO_EXTI_Callback+0xac>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	601a      	str	r2, [r3, #0]
        //lastButtonPressTime = 0;
        lastButtonPressTime = HAL_GetTick();
 8000f04:	f000 fae8 	bl	80014d8 <HAL_GetTick>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000f0c:	6013      	str	r3, [r2, #0]
      //but will happen if the previous was a double press
    }


  }//GPIO_Pin == thing
}
 8000f0e:	e011      	b.n	8000f34 <HAL_GPIO_EXTI_Callback+0x90>
       buttonPressCount = 1;
 8000f10:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	601a      	str	r2, [r3, #0]
       lastButtonPressTime = currentTime; //increment here
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x98>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000f1c:	6013      	str	r3, [r2, #0]
       printf("Single press");
 8000f1e:	480d      	ldr	r0, [pc, #52]	; (8000f54 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000f20:	f002 fc1c 	bl	800375c <iprintf>
}
 8000f24:	e006      	b.n	8000f34 <HAL_GPIO_EXTI_Callback+0x90>
      lastButtonPressTime = currentTime; //increment here
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x98>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000f2c:	6013      	str	r3, [r2, #0]
      printf("Single and ready to mingle");
 8000f2e:	480a      	ldr	r0, [pc, #40]	; (8000f58 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000f30:	f002 fc14 	bl	800375c <iprintf>
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000278 	.word	0x20000278
 8000f40:	20000280 	.word	0x20000280
 8000f44:	2000027c 	.word	0x2000027c
 8000f48:	08005788 	.word	0x08005788
 8000f4c:	08005794 	.word	0x08005794
 8000f50:	20000284 	.word	0x20000284
 8000f54:	080057b0 	.word	0x080057b0
 8000f58:	080057c0 	.word	0x080057c0

08000f5c <main>:

int main(void)
{
 8000f5c:	b5b0      	push	{r4, r5, r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 initialise_monitor_handles();
 8000f62:	f001 fe69 	bl	8002c38 <initialise_monitor_handles>
 HAL_Init();
 8000f66:	f000 fa52 	bl	800140e <HAL_Init>
 UART1_Init();
 8000f6a:	f000 f87b 	bl	8001064 <UART1_Init>
 MX_GPIO_Init();
 8000f6e:	f000 f849 	bl	8001004 <MX_GPIO_Init>

 while (1)
 {
  currentTime = HAL_GetTick(); //it is in seconds!! wth!!
 8000f72:	f000 fab1 	bl	80014d8 <HAL_GetTick>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4a18      	ldr	r2, [pc, #96]	; (8000fdc <main+0x80>)
 8000f7a:	6013      	str	r3, [r2, #0]
  printf("%d", currentTime);
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <main+0x80>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	4817      	ldr	r0, [pc, #92]	; (8000fe0 <main+0x84>)
 8000f84:	f002 fbea 	bl	800375c <iprintf>
  printf("P\n");
 8000f88:	4816      	ldr	r0, [pc, #88]	; (8000fe4 <main+0x88>)
 8000f8a:	f002 fc4d 	bl	8003828 <puts>
  printf("O\n");
 8000f8e:	4816      	ldr	r0, [pc, #88]	; (8000fe8 <main+0x8c>)
 8000f90:	f002 fc4a 	bl	8003828 <puts>
  printf("L\n");
 8000f94:	4815      	ldr	r0, [pc, #84]	; (8000fec <main+0x90>)
 8000f96:	f002 fc47 	bl	8003828 <puts>
  printf("L\n");
 8000f9a:	4814      	ldr	r0, [pc, #80]	; (8000fec <main+0x90>)
 8000f9c:	f002 fc44 	bl	8003828 <puts>
  printf("I\n");
 8000fa0:	4813      	ldr	r0, [pc, #76]	; (8000ff0 <main+0x94>)
 8000fa2:	f002 fc41 	bl	8003828 <puts>
  printf("N\n");
 8000fa6:	4813      	ldr	r0, [pc, #76]	; (8000ff4 <main+0x98>)
 8000fa8:	f002 fc3e 	bl	8003828 <puts>
  printf("G\n\n");
 8000fac:	4812      	ldr	r0, [pc, #72]	; (8000ff8 <main+0x9c>)
 8000fae:	f002 fc3b 	bl	8003828 <puts>
  char prompt[] = "Testing Terminal";
 8000fb2:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <main+0xa0>)
 8000fb4:	1d3c      	adds	r4, r7, #4
 8000fb6:	461d      	mov	r5, r3
 8000fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fbc:	682b      	ldr	r3, [r5, #0]
 8000fbe:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)prompt, strlen(prompt), 0xFFFF);
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff f954 	bl	8000270 <strlen>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	1d39      	adds	r1, r7, #4
 8000fce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fd2:	480b      	ldr	r0, [pc, #44]	; (8001000 <main+0xa4>)
 8000fd4:	f000 fe72 	bl	8001cbc <HAL_UART_Transmit>
 {
 8000fd8:	e7cb      	b.n	8000f72 <main+0x16>
 8000fda:	bf00      	nop
 8000fdc:	20000278 	.word	0x20000278
 8000fe0:	080057dc 	.word	0x080057dc
 8000fe4:	080057e0 	.word	0x080057e0
 8000fe8:	080057e4 	.word	0x080057e4
 8000fec:	080057e8 	.word	0x080057e8
 8000ff0:	080057ec 	.word	0x080057ec
 8000ff4:	080057f0 	.word	0x080057f0
 8000ff8:	080057f4 	.word	0x080057f4
 8000ffc:	080057f8 	.word	0x080057f8
 8001000:	200001f8 	.word	0x200001f8

08001004 <MX_GPIO_Init>:
 }

}

static void MX_GPIO_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 __HAL_RCC_GPIOC_CLK_ENABLE(); // Enable AHB2 Bus for GPIOC
 800100a:	4b13      	ldr	r3, [pc, #76]	; (8001058 <MX_GPIO_Init+0x54>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <MX_GPIO_Init+0x54>)
 8001010:	f043 0304 	orr.w	r3, r3, #4
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <MX_GPIO_Init+0x54>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]

 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]

 // Configuration of BUTTON_EXTI13_Pin (GPIO-C Pin-13) as AF,
 GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001034:	607b      	str	r3, [r7, #4]
 GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_GPIO_Init+0x58>)
 8001038:	60bb      	str	r3, [r7, #8]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	4619      	mov	r1, r3
 8001042:	4807      	ldr	r0, [pc, #28]	; (8001060 <MX_GPIO_Init+0x5c>)
 8001044:	f000 fb66 	bl	8001714 <HAL_GPIO_Init>

 // Enable NVIC EXTI line 13
 HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001048:	2028      	movs	r0, #40	; 0x28
 800104a:	f000 fb48 	bl	80016de <HAL_NVIC_EnableIRQ>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000
 800105c:	10210000 	.word	0x10210000
 8001060:	48000800 	.word	0x48000800

08001064 <UART1_Init>:

static void UART1_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
    /* Pin configuration for UART. BSP_COM_Init() can do this automatically */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	4b26      	ldr	r3, [pc, #152]	; (8001104 <UART1_Init+0xa0>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	4a25      	ldr	r2, [pc, #148]	; (8001104 <UART1_Init+0xa0>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001076:	4b23      	ldr	r3, [pc, #140]	; (8001104 <UART1_Init+0xa0>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001090:	2307      	movs	r3, #7
 8001092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001094:	23c0      	movs	r3, #192	; 0xc0
 8001096:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	4619      	mov	r1, r3
 80010a8:	4817      	ldr	r0, [pc, #92]	; (8001108 <UART1_Init+0xa4>)
 80010aa:	f000 fb33 	bl	8001714 <HAL_GPIO_Init>

    /* Configuring UART1 */
    huart1.Instance = USART1;
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <UART1_Init+0xa8>)
 80010b0:	4a17      	ldr	r2, [pc, #92]	; (8001110 <UART1_Init+0xac>)
 80010b2:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <UART1_Init+0xa8>)
 80010b6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010ba:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010bc:	4b13      	ldr	r3, [pc, #76]	; (800110c <UART1_Init+0xa8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80010c2:	4b12      	ldr	r3, [pc, #72]	; (800110c <UART1_Init+0xa8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80010c8:	4b10      	ldr	r3, [pc, #64]	; (800110c <UART1_Init+0xa8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <UART1_Init+0xa8>)
 80010d0:	220c      	movs	r2, #12
 80010d2:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <UART1_Init+0xa8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010da:	4b0c      	ldr	r3, [pc, #48]	; (800110c <UART1_Init+0xa8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <UART1_Init+0xa8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <UART1_Init+0xa8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ec:	4807      	ldr	r0, [pc, #28]	; (800110c <UART1_Init+0xa8>)
 80010ee:	f000 fd97 	bl	8001c20 <HAL_UART_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d000      	beq.n	80010fa <UART1_Init+0x96>
    {
      while(1);
 80010f8:	e7fe      	b.n	80010f8 <UART1_Init+0x94>
    }
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000
 8001108:	48000400 	.word	0x48000400
 800110c:	200001f8 	.word	0x200001f8
 8001110:	40013800 	.word	0x40013800

08001114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <HAL_MspInit+0x44>)
 800111c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111e:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <HAL_MspInit+0x44>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6613      	str	r3, [r2, #96]	; 0x60
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <HAL_MspInit+0x44>)
 8001128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <HAL_MspInit+0x44>)
 8001134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001136:	4a08      	ldr	r2, [pc, #32]	; (8001158 <HAL_MspInit+0x44>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113c:	6593      	str	r3, [r2, #88]	; 0x58
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_MspInit+0x44>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000

0800115c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08c      	sub	sp, #48	; 0x30
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a2e      	ldr	r2, [pc, #184]	; (8001234 <HAL_UART_MspInit+0xd8>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d128      	bne.n	80011d0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800117e:	4b2e      	ldr	r3, [pc, #184]	; (8001238 <HAL_UART_MspInit+0xdc>)
 8001180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001182:	4a2d      	ldr	r2, [pc, #180]	; (8001238 <HAL_UART_MspInit+0xdc>)
 8001184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001188:	6613      	str	r3, [r2, #96]	; 0x60
 800118a:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <HAL_UART_MspInit+0xdc>)
 800118c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001192:	61bb      	str	r3, [r7, #24]
 8001194:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b28      	ldr	r3, [pc, #160]	; (8001238 <HAL_UART_MspInit+0xdc>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	4a27      	ldr	r2, [pc, #156]	; (8001238 <HAL_UART_MspInit+0xdc>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a2:	4b25      	ldr	r3, [pc, #148]	; (8001238 <HAL_UART_MspInit+0xdc>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80011ae:	23c0      	movs	r3, #192	; 0xc0
 80011b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011be:	2307      	movs	r3, #7
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	4619      	mov	r1, r3
 80011c8:	481c      	ldr	r0, [pc, #112]	; (800123c <HAL_UART_MspInit+0xe0>)
 80011ca:	f000 faa3 	bl	8001714 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011ce:	e02d      	b.n	800122c <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a1a      	ldr	r2, [pc, #104]	; (8001240 <HAL_UART_MspInit+0xe4>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d128      	bne.n	800122c <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011da:	4b17      	ldr	r3, [pc, #92]	; (8001238 <HAL_UART_MspInit+0xdc>)
 80011dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011de:	4a16      	ldr	r2, [pc, #88]	; (8001238 <HAL_UART_MspInit+0xdc>)
 80011e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e4:	6593      	str	r3, [r2, #88]	; 0x58
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <HAL_UART_MspInit+0xdc>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <HAL_UART_MspInit+0xdc>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	4a10      	ldr	r2, [pc, #64]	; (8001238 <HAL_UART_MspInit+0xdc>)
 80011f8:	f043 0308 	orr.w	r3, r3, #8
 80011fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <HAL_UART_MspInit+0xdc>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800120a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800120e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800121c:	2307      	movs	r3, #7
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	4619      	mov	r1, r3
 8001226:	4807      	ldr	r0, [pc, #28]	; (8001244 <HAL_UART_MspInit+0xe8>)
 8001228:	f000 fa74 	bl	8001714 <HAL_GPIO_Init>
}
 800122c:	bf00      	nop
 800122e:	3730      	adds	r7, #48	; 0x30
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40013800 	.word	0x40013800
 8001238:	40021000 	.word	0x40021000
 800123c:	48000400 	.word	0x48000400
 8001240:	40004800 	.word	0x40004800
 8001244:	48000c00 	.word	0x48000c00

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <MemManage_Handler+0x4>

08001262 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <BusFault_Handler+0x4>

08001268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <UsageFault_Handler+0x4>

0800126e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129c:	f000 f90a 	bl	80014b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80012a8:	2020      	movs	r0, #32
 80012aa:	f000 fbdd 	bl	8001a68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80012ae:	2040      	movs	r0, #64	; 0x40
 80012b0:	f000 fbda 	bl	8001a68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80012b4:	2080      	movs	r0, #128	; 0x80
 80012b6:	f000 fbd7 	bl	8001a68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80012ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80012be:	f000 fbd3 	bl	8001a68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80012ca:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80012ce:	f000 fbcb 	bl	8001a68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80012d2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012d6:	f000 fbc7 	bl	8001a68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80012da:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012de:	f000 fbc3 	bl	8001a68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80012e2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012e6:	f000 fbbf 	bl	8001a68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80012ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012ee:	f000 fbbb 	bl	8001a68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void* _sbrk(int incr)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
    extern char end asm("end");
    static char *heap_end = 0;
    char *prev_heap_end;

    if (heap_end == 0)
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <_sbrk+0x50>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d102      	bne.n	800130e <_sbrk+0x16>
        heap_end = &end;
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <_sbrk+0x50>)
 800130a:	4a10      	ldr	r2, [pc, #64]	; (800134c <_sbrk+0x54>)
 800130c:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <_sbrk+0x50>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	60fb      	str	r3, [r7, #12]
    if (heap_end + incr > stack_ptr)
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <_sbrk+0x50>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4413      	add	r3, r2
 800131c:	466a      	mov	r2, sp
 800131e:	4293      	cmp	r3, r2
 8001320:	d907      	bls.n	8001332 <_sbrk+0x3a>
    {
        errno = ENOMEM;
 8001322:	f002 fbb3 	bl	8003a8c <__errno>
 8001326:	4603      	mov	r3, r0
 8001328:	220c      	movs	r2, #12
 800132a:	601a      	str	r2, [r3, #0]
        return (void*)-1;
 800132c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001330:	e006      	b.n	8001340 <_sbrk+0x48>
    }

    heap_end += incr;
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <_sbrk+0x50>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	4a03      	ldr	r2, [pc, #12]	; (8001348 <_sbrk+0x50>)
 800133c:	6013      	str	r3, [r2, #0]

    return (void*)prev_heap_end;
 800133e:	68fb      	ldr	r3, [r7, #12]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000288 	.word	0x20000288
 800134c:	20000488 	.word	0x20000488

08001350 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <SystemInit+0x64>)
 8001356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800135a:	4a16      	ldr	r2, [pc, #88]	; (80013b4 <SystemInit+0x64>)
 800135c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <SystemInit+0x68>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a13      	ldr	r2, [pc, #76]	; (80013b8 <SystemInit+0x68>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <SystemInit+0x68>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <SystemInit+0x68>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a0f      	ldr	r2, [pc, #60]	; (80013b8 <SystemInit+0x68>)
 800137c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001380:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001384:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <SystemInit+0x68>)
 8001388:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800138c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <SystemInit+0x68>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a09      	ldr	r2, [pc, #36]	; (80013b8 <SystemInit+0x68>)
 8001394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001398:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800139a:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <SystemInit+0x68>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <SystemInit+0x64>)
 80013a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013a6:	609a      	str	r2, [r3, #8]
#endif
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000ed00 	.word	0xe000ed00
 80013b8:	40021000 	.word	0x40021000

080013bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013c2:	e003      	b.n	80013cc <LoopCopyDataInit>

080013c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013ca:	3104      	adds	r1, #4

080013cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013cc:	480b      	ldr	r0, [pc, #44]	; (80013fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <LoopForever+0xe>)
	adds	r2, r0, r1
 80013d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013d4:	d3f6      	bcc.n	80013c4 <CopyDataInit>
	ldr	r2, =_sbss
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <LoopForever+0x12>)
	b	LoopFillZerobss
 80013d8:	e002      	b.n	80013e0 <LoopFillZerobss>

080013da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013dc:	f842 3b04 	str.w	r3, [r2], #4

080013e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <LoopForever+0x16>)
	cmp	r2, r3
 80013e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013e4:	d3f9      	bcc.n	80013da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013e6:	f7ff ffb3 	bl	8001350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ea:	f002 fb55 	bl	8003a98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ee:	f7ff fdb5 	bl	8000f5c <main>

080013f2 <LoopForever>:

LoopForever:
    b LoopForever
 80013f2:	e7fe      	b.n	80013f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013f4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80013f8:	08005be0 	.word	0x08005be0
	ldr	r0, =_sdata
 80013fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001400:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001404:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001408:	20000488 	.word	0x20000488

0800140c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC1_2_IRQHandler>

0800140e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001418:	2003      	movs	r0, #3
 800141a:	f000 f939 	bl	8001690 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800141e:	2000      	movs	r0, #0
 8001420:	f000 f80e 	bl	8001440 <HAL_InitTick>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d002      	beq.n	8001430 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	71fb      	strb	r3, [r7, #7]
 800142e:	e001      	b.n	8001434 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001430:	f7ff fe70 	bl	8001114 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001434:	79fb      	ldrb	r3, [r7, #7]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <HAL_InitTick+0x68>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d022      	beq.n	800149a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_InitTick+0x6c>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <HAL_InitTick+0x68>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001460:	fbb1 f3f3 	udiv	r3, r1, r3
 8001464:	fbb2 f3f3 	udiv	r3, r2, r3
 8001468:	4618      	mov	r0, r3
 800146a:	f000 f946 	bl	80016fa <HAL_SYSTICK_Config>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d10f      	bne.n	8001494 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b0f      	cmp	r3, #15
 8001478:	d809      	bhi.n	800148e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147a:	2200      	movs	r2, #0
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001482:	f000 f910 	bl	80016a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <HAL_InitTick+0x70>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	e007      	b.n	800149e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	73fb      	strb	r3, [r7, #15]
 8001492:	e004      	b.n	800149e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	e001      	b.n	800149e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800149e:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000008 	.word	0x20000008
 80014ac:	20000000 	.word	0x20000000
 80014b0:	20000004 	.word	0x20000004

080014b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <HAL_IncTick+0x1c>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_IncTick+0x20>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4413      	add	r3, r2
 80014c2:	4a03      	ldr	r2, [pc, #12]	; (80014d0 <HAL_IncTick+0x1c>)
 80014c4:	6013      	str	r3, [r2, #0]
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	2000028c 	.word	0x2000028c
 80014d4:	20000008 	.word	0x20000008

080014d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <HAL_GetTick+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	2000028c 	.word	0x2000028c

080014f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800151c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001522:	4a04      	ldr	r2, [pc, #16]	; (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	60d3      	str	r3, [r2, #12]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <__NVIC_GetPriorityGrouping+0x18>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	f003 0307 	and.w	r3, r3, #7
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	db0b      	blt.n	800157e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	f003 021f 	and.w	r2, r3, #31
 800156c:	4907      	ldr	r1, [pc, #28]	; (800158c <__NVIC_EnableIRQ+0x38>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	2001      	movs	r0, #1
 8001576:	fa00 f202 	lsl.w	r2, r0, r2
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000e100 	.word	0xe000e100

08001590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	db0a      	blt.n	80015ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	490c      	ldr	r1, [pc, #48]	; (80015dc <__NVIC_SetPriority+0x4c>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	0112      	lsls	r2, r2, #4
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b8:	e00a      	b.n	80015d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4908      	ldr	r1, [pc, #32]	; (80015e0 <__NVIC_SetPriority+0x50>)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	3b04      	subs	r3, #4
 80015c8:	0112      	lsls	r2, r2, #4
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	761a      	strb	r2, [r3, #24]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000e100 	.word	0xe000e100
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f1c3 0307 	rsb	r3, r3, #7
 80015fe:	2b04      	cmp	r3, #4
 8001600:	bf28      	it	cs
 8001602:	2304      	movcs	r3, #4
 8001604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3304      	adds	r3, #4
 800160a:	2b06      	cmp	r3, #6
 800160c:	d902      	bls.n	8001614 <NVIC_EncodePriority+0x30>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b03      	subs	r3, #3
 8001612:	e000      	b.n	8001616 <NVIC_EncodePriority+0x32>
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43d9      	mvns	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	4313      	orrs	r3, r2
         );
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	; 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800165c:	d301      	bcc.n	8001662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165e:	2301      	movs	r3, #1
 8001660:	e00f      	b.n	8001682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <SysTick_Config+0x40>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166a:	210f      	movs	r1, #15
 800166c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001670:	f7ff ff8e 	bl	8001590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <SysTick_Config+0x40>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <SysTick_Config+0x40>)
 800167c:	2207      	movs	r2, #7
 800167e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	e000e010 	.word	0xe000e010

08001690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff29 	bl	80014f0 <__NVIC_SetPriorityGrouping>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016b8:	f7ff ff3e 	bl	8001538 <__NVIC_GetPriorityGrouping>
 80016bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f7ff ff8e 	bl	80015e4 <NVIC_EncodePriority>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff5d 	bl	8001590 <__NVIC_SetPriority>
}
 80016d6:	bf00      	nop
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff31 	bl	8001554 <__NVIC_EnableIRQ>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff ffa2 	bl	800164c <SysTick_Config>
 8001708:	4603      	mov	r3, r0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001722:	e17f      	b.n	8001a24 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	2101      	movs	r1, #1
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	fa01 f303 	lsl.w	r3, r1, r3
 8001730:	4013      	ands	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 8171 	beq.w	8001a1e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d00b      	beq.n	800175c <HAL_GPIO_Init+0x48>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d007      	beq.n	800175c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001750:	2b11      	cmp	r3, #17
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b12      	cmp	r3, #18
 800175a:	d130      	bne.n	80017be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	68da      	ldr	r2, [r3, #12]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001792:	2201      	movs	r2, #1
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	091b      	lsrs	r3, r3, #4
 80017a8:	f003 0201 	and.w	r2, r3, #1
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d118      	bne.n	80017fc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017d0:	2201      	movs	r2, #1
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	08db      	lsrs	r3, r3, #3
 80017e6:	f003 0201 	and.w	r2, r3, #1
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	2203      	movs	r2, #3
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b02      	cmp	r3, #2
 8001832:	d003      	beq.n	800183c <HAL_GPIO_Init+0x128>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b12      	cmp	r3, #18
 800183a:	d123      	bne.n	8001884 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	08da      	lsrs	r2, r3, #3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3208      	adds	r2, #8
 8001844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	220f      	movs	r2, #15
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	08da      	lsrs	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3208      	adds	r2, #8
 800187e:	6939      	ldr	r1, [r7, #16]
 8001880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2203      	movs	r2, #3
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0203 	and.w	r2, r3, #3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 80ac 	beq.w	8001a1e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	4b5f      	ldr	r3, [pc, #380]	; (8001a44 <HAL_GPIO_Init+0x330>)
 80018c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ca:	4a5e      	ldr	r2, [pc, #376]	; (8001a44 <HAL_GPIO_Init+0x330>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6613      	str	r3, [r2, #96]	; 0x60
 80018d2:	4b5c      	ldr	r3, [pc, #368]	; (8001a44 <HAL_GPIO_Init+0x330>)
 80018d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018de:	4a5a      	ldr	r2, [pc, #360]	; (8001a48 <HAL_GPIO_Init+0x334>)
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	089b      	lsrs	r3, r3, #2
 80018e4:	3302      	adds	r3, #2
 80018e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	220f      	movs	r2, #15
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001908:	d025      	beq.n	8001956 <HAL_GPIO_Init+0x242>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4f      	ldr	r2, [pc, #316]	; (8001a4c <HAL_GPIO_Init+0x338>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d01f      	beq.n	8001952 <HAL_GPIO_Init+0x23e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4e      	ldr	r2, [pc, #312]	; (8001a50 <HAL_GPIO_Init+0x33c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d019      	beq.n	800194e <HAL_GPIO_Init+0x23a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a4d      	ldr	r2, [pc, #308]	; (8001a54 <HAL_GPIO_Init+0x340>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d013      	beq.n	800194a <HAL_GPIO_Init+0x236>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a4c      	ldr	r2, [pc, #304]	; (8001a58 <HAL_GPIO_Init+0x344>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d00d      	beq.n	8001946 <HAL_GPIO_Init+0x232>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4b      	ldr	r2, [pc, #300]	; (8001a5c <HAL_GPIO_Init+0x348>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d007      	beq.n	8001942 <HAL_GPIO_Init+0x22e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4a      	ldr	r2, [pc, #296]	; (8001a60 <HAL_GPIO_Init+0x34c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d101      	bne.n	800193e <HAL_GPIO_Init+0x22a>
 800193a:	2306      	movs	r3, #6
 800193c:	e00c      	b.n	8001958 <HAL_GPIO_Init+0x244>
 800193e:	2307      	movs	r3, #7
 8001940:	e00a      	b.n	8001958 <HAL_GPIO_Init+0x244>
 8001942:	2305      	movs	r3, #5
 8001944:	e008      	b.n	8001958 <HAL_GPIO_Init+0x244>
 8001946:	2304      	movs	r3, #4
 8001948:	e006      	b.n	8001958 <HAL_GPIO_Init+0x244>
 800194a:	2303      	movs	r3, #3
 800194c:	e004      	b.n	8001958 <HAL_GPIO_Init+0x244>
 800194e:	2302      	movs	r3, #2
 8001950:	e002      	b.n	8001958 <HAL_GPIO_Init+0x244>
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <HAL_GPIO_Init+0x244>
 8001956:	2300      	movs	r3, #0
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	f002 0203 	and.w	r2, r2, #3
 800195e:	0092      	lsls	r2, r2, #2
 8001960:	4093      	lsls	r3, r2
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001968:	4937      	ldr	r1, [pc, #220]	; (8001a48 <HAL_GPIO_Init+0x334>)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	089b      	lsrs	r3, r3, #2
 800196e:	3302      	adds	r3, #2
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001976:	4b3b      	ldr	r3, [pc, #236]	; (8001a64 <HAL_GPIO_Init+0x350>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	43db      	mvns	r3, r3
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4013      	ands	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800199a:	4a32      	ldr	r2, [pc, #200]	; (8001a64 <HAL_GPIO_Init+0x350>)
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80019a0:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <HAL_GPIO_Init+0x350>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019c4:	4a27      	ldr	r2, [pc, #156]	; (8001a64 <HAL_GPIO_Init+0x350>)
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019ca:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <HAL_GPIO_Init+0x350>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019ee:	4a1d      	ldr	r2, [pc, #116]	; (8001a64 <HAL_GPIO_Init+0x350>)
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019f4:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <HAL_GPIO_Init+0x350>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a18:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <HAL_GPIO_Init+0x350>)
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	3301      	adds	r3, #1
 8001a22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f47f ae78 	bne.w	8001724 <HAL_GPIO_Init+0x10>
  }
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	371c      	adds	r7, #28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40010000 	.word	0x40010000
 8001a4c:	48000400 	.word	0x48000400
 8001a50:	48000800 	.word	0x48000800
 8001a54:	48000c00 	.word	0x48000c00
 8001a58:	48001000 	.word	0x48001000
 8001a5c:	48001400 	.word	0x48001400
 8001a60:	48001800 	.word	0x48001800
 8001a64:	40010400 	.word	0x40010400

08001a68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a74:	695a      	ldr	r2, [r3, #20]
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d006      	beq.n	8001a8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a7e:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fa0c 	bl	8000ea4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40010400 	.word	0x40010400

08001a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aa6:	4b3e      	ldr	r3, [pc, #248]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ab0:	4b3b      	ldr	r3, [pc, #236]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x34>
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	2b0c      	cmp	r3, #12
 8001ac4:	d121      	bne.n	8001b0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d11e      	bne.n	8001b0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001acc:	4b34      	ldr	r3, [pc, #208]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d107      	bne.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ad8:	4b31      	ldr	r3, [pc, #196]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ade:	0a1b      	lsrs	r3, r3, #8
 8001ae0:	f003 030f 	and.w	r3, r3, #15
 8001ae4:	61fb      	str	r3, [r7, #28]
 8001ae6:	e005      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ae8:	4b2d      	ldr	r3, [pc, #180]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001af4:	4a2b      	ldr	r2, [pc, #172]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10d      	bne.n	8001b20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d102      	bne.n	8001b16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b10:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b12:	61bb      	str	r3, [r7, #24]
 8001b14:	e004      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b1c:	4b23      	ldr	r3, [pc, #140]	; (8001bac <HAL_RCC_GetSysClockFreq+0x114>)
 8001b1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	2b0c      	cmp	r3, #12
 8001b24:	d134      	bne.n	8001b90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b26:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d003      	beq.n	8001b3e <HAL_RCC_GetSysClockFreq+0xa6>
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d003      	beq.n	8001b44 <HAL_RCC_GetSysClockFreq+0xac>
 8001b3c:	e005      	b.n	8001b4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b40:	617b      	str	r3, [r7, #20]
      break;
 8001b42:	e005      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b44:	4b19      	ldr	r3, [pc, #100]	; (8001bac <HAL_RCC_GetSysClockFreq+0x114>)
 8001b46:	617b      	str	r3, [r7, #20]
      break;
 8001b48:	e002      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	617b      	str	r3, [r7, #20]
      break;
 8001b4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	091b      	lsrs	r3, r3, #4
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	0a1b      	lsrs	r3, r3, #8
 8001b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	fb03 f202 	mul.w	r2, r3, r2
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	0e5b      	lsrs	r3, r3, #25
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	3301      	adds	r3, #1
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b90:	69bb      	ldr	r3, [r7, #24]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3724      	adds	r7, #36	; 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	08005814 	.word	0x08005814
 8001ba8:	00f42400 	.word	0x00f42400
 8001bac:	007a1200 	.word	0x007a1200

08001bb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000000 	.word	0x20000000

08001bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001bcc:	f7ff fff0 	bl	8001bb0 <HAL_RCC_GetHCLKFreq>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	0a1b      	lsrs	r3, r3, #8
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	4904      	ldr	r1, [pc, #16]	; (8001bf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	f003 031f 	and.w	r3, r3, #31
 8001be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	0800580c 	.word	0x0800580c

08001bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001bf8:	f7ff ffda 	bl	8001bb0 <HAL_RCC_GetHCLKFreq>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	0adb      	lsrs	r3, r3, #11
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	4904      	ldr	r1, [pc, #16]	; (8001c1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c0a:	5ccb      	ldrb	r3, [r1, r3]
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	0800580c 	.word	0x0800580c

08001c20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e040      	b.n	8001cb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d106      	bne.n	8001c48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff fa8a 	bl	800115c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2224      	movs	r2, #36	; 0x24
 8001c4c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0201 	bic.w	r2, r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f8c0 	bl	8001de4 <UART_SetConfig>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e022      	b.n	8001cb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 fc54 	bl	8002524 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fcdb 	bl	8002668 <UART_CheckIdleState>
 8001cb2:	4603      	mov	r3, r0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af02      	add	r7, sp, #8
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cd0:	2b20      	cmp	r3, #32
 8001cd2:	f040 8081 	bne.w	8001dd8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <HAL_UART_Transmit+0x26>
 8001cdc:	88fb      	ldrh	r3, [r7, #6]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e079      	b.n	8001dda <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_UART_Transmit+0x38>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e072      	b.n	8001dda <HAL_UART_Transmit+0x11e>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2221      	movs	r2, #33	; 0x21
 8001d06:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001d08:	f7ff fbe6 	bl	80014d8 <HAL_GetTick>
 8001d0c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	88fa      	ldrh	r2, [r7, #6]
 8001d12:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	88fa      	ldrh	r2, [r7, #6]
 8001d1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d26:	d108      	bne.n	8001d3a <HAL_UART_Transmit+0x7e>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d104      	bne.n	8001d3a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	61bb      	str	r3, [r7, #24]
 8001d38:	e003      	b.n	8001d42 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8001d4a:	e02d      	b.n	8001da8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	2200      	movs	r2, #0
 8001d54:	2180      	movs	r1, #128	; 0x80
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 fccb 	bl	80026f2 <UART_WaitOnFlagUntilTimeout>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e039      	b.n	8001dda <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10b      	bne.n	8001d84 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	881a      	ldrh	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d78:	b292      	uxth	r2, r2
 8001d7a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	3302      	adds	r3, #2
 8001d80:	61bb      	str	r3, [r7, #24]
 8001d82:	e008      	b.n	8001d96 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	781a      	ldrb	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	b292      	uxth	r2, r2
 8001d8e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	3301      	adds	r3, #1
 8001d94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1cb      	bne.n	8001d4c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2140      	movs	r1, #64	; 0x40
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f000 fc97 	bl	80026f2 <UART_WaitOnFlagUntilTimeout>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e005      	b.n	8001dda <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	e000      	b.n	8001dda <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8001dd8:	2302      	movs	r3, #2
  }
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3720      	adds	r7, #32
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de8:	b0a0      	sub	sp, #128	; 0x80
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	431a      	orrs	r2, r3
 8001e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	67fb      	str	r3, [r7, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	49a4      	ldr	r1, [pc, #656]	; (80020ac <UART_SetConfig+0x2c8>)
 8001e1c:	4019      	ands	r1, r3
 8001e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e24:	430b      	orrs	r3, r1
 8001e26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e34:	68d9      	ldr	r1, [r3, #12]
 8001e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	ea40 0301 	orr.w	r3, r0, r1
 8001e3e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	4b99      	ldr	r3, [pc, #612]	; (80020b0 <UART_SetConfig+0x2cc>)
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d004      	beq.n	8001e5a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e52:	6a1a      	ldr	r2, [r3, #32]
 8001e54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e56:	4313      	orrs	r3, r2
 8001e58:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001e64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e6a:	430b      	orrs	r3, r1
 8001e6c:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	4b90      	ldr	r3, [pc, #576]	; (80020b4 <UART_SetConfig+0x2d0>)
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d125      	bne.n	8001ec4 <UART_SetConfig+0xe0>
 8001e78:	4b8f      	ldr	r3, [pc, #572]	; (80020b8 <UART_SetConfig+0x2d4>)
 8001e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	d81a      	bhi.n	8001ebc <UART_SetConfig+0xd8>
 8001e86:	a201      	add	r2, pc, #4	; (adr r2, 8001e8c <UART_SetConfig+0xa8>)
 8001e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8c:	08001e9d 	.word	0x08001e9d
 8001e90:	08001ead 	.word	0x08001ead
 8001e94:	08001ea5 	.word	0x08001ea5
 8001e98:	08001eb5 	.word	0x08001eb5
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001ea2:	e116      	b.n	80020d2 <UART_SetConfig+0x2ee>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001eaa:	e112      	b.n	80020d2 <UART_SetConfig+0x2ee>
 8001eac:	2304      	movs	r3, #4
 8001eae:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001eb2:	e10e      	b.n	80020d2 <UART_SetConfig+0x2ee>
 8001eb4:	2308      	movs	r3, #8
 8001eb6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001eba:	e10a      	b.n	80020d2 <UART_SetConfig+0x2ee>
 8001ebc:	2310      	movs	r3, #16
 8001ebe:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001ec2:	e106      	b.n	80020d2 <UART_SetConfig+0x2ee>
 8001ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b7c      	ldr	r3, [pc, #496]	; (80020bc <UART_SetConfig+0x2d8>)
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d138      	bne.n	8001f40 <UART_SetConfig+0x15c>
 8001ece:	4b7a      	ldr	r3, [pc, #488]	; (80020b8 <UART_SetConfig+0x2d4>)
 8001ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b0c      	cmp	r3, #12
 8001eda:	d82d      	bhi.n	8001f38 <UART_SetConfig+0x154>
 8001edc:	a201      	add	r2, pc, #4	; (adr r2, 8001ee4 <UART_SetConfig+0x100>)
 8001ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee2:	bf00      	nop
 8001ee4:	08001f19 	.word	0x08001f19
 8001ee8:	08001f39 	.word	0x08001f39
 8001eec:	08001f39 	.word	0x08001f39
 8001ef0:	08001f39 	.word	0x08001f39
 8001ef4:	08001f29 	.word	0x08001f29
 8001ef8:	08001f39 	.word	0x08001f39
 8001efc:	08001f39 	.word	0x08001f39
 8001f00:	08001f39 	.word	0x08001f39
 8001f04:	08001f21 	.word	0x08001f21
 8001f08:	08001f39 	.word	0x08001f39
 8001f0c:	08001f39 	.word	0x08001f39
 8001f10:	08001f39 	.word	0x08001f39
 8001f14:	08001f31 	.word	0x08001f31
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001f1e:	e0d8      	b.n	80020d2 <UART_SetConfig+0x2ee>
 8001f20:	2302      	movs	r3, #2
 8001f22:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001f26:	e0d4      	b.n	80020d2 <UART_SetConfig+0x2ee>
 8001f28:	2304      	movs	r3, #4
 8001f2a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001f2e:	e0d0      	b.n	80020d2 <UART_SetConfig+0x2ee>
 8001f30:	2308      	movs	r3, #8
 8001f32:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001f36:	e0cc      	b.n	80020d2 <UART_SetConfig+0x2ee>
 8001f38:	2310      	movs	r3, #16
 8001f3a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001f3e:	e0c8      	b.n	80020d2 <UART_SetConfig+0x2ee>
 8001f40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b5e      	ldr	r3, [pc, #376]	; (80020c0 <UART_SetConfig+0x2dc>)
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d125      	bne.n	8001f96 <UART_SetConfig+0x1b2>
 8001f4a:	4b5b      	ldr	r3, [pc, #364]	; (80020b8 <UART_SetConfig+0x2d4>)
 8001f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001f54:	2b30      	cmp	r3, #48	; 0x30
 8001f56:	d016      	beq.n	8001f86 <UART_SetConfig+0x1a2>
 8001f58:	2b30      	cmp	r3, #48	; 0x30
 8001f5a:	d818      	bhi.n	8001f8e <UART_SetConfig+0x1aa>
 8001f5c:	2b20      	cmp	r3, #32
 8001f5e:	d00a      	beq.n	8001f76 <UART_SetConfig+0x192>
 8001f60:	2b20      	cmp	r3, #32
 8001f62:	d814      	bhi.n	8001f8e <UART_SetConfig+0x1aa>
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <UART_SetConfig+0x18a>
 8001f68:	2b10      	cmp	r3, #16
 8001f6a:	d008      	beq.n	8001f7e <UART_SetConfig+0x19a>
 8001f6c:	e00f      	b.n	8001f8e <UART_SetConfig+0x1aa>
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001f74:	e0ad      	b.n	80020d2 <UART_SetConfig+0x2ee>
 8001f76:	2302      	movs	r3, #2
 8001f78:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001f7c:	e0a9      	b.n	80020d2 <UART_SetConfig+0x2ee>
 8001f7e:	2304      	movs	r3, #4
 8001f80:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001f84:	e0a5      	b.n	80020d2 <UART_SetConfig+0x2ee>
 8001f86:	2308      	movs	r3, #8
 8001f88:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001f8c:	e0a1      	b.n	80020d2 <UART_SetConfig+0x2ee>
 8001f8e:	2310      	movs	r3, #16
 8001f90:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001f94:	e09d      	b.n	80020d2 <UART_SetConfig+0x2ee>
 8001f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	4b4a      	ldr	r3, [pc, #296]	; (80020c4 <UART_SetConfig+0x2e0>)
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d125      	bne.n	8001fec <UART_SetConfig+0x208>
 8001fa0:	4b45      	ldr	r3, [pc, #276]	; (80020b8 <UART_SetConfig+0x2d4>)
 8001fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001faa:	2bc0      	cmp	r3, #192	; 0xc0
 8001fac:	d016      	beq.n	8001fdc <UART_SetConfig+0x1f8>
 8001fae:	2bc0      	cmp	r3, #192	; 0xc0
 8001fb0:	d818      	bhi.n	8001fe4 <UART_SetConfig+0x200>
 8001fb2:	2b80      	cmp	r3, #128	; 0x80
 8001fb4:	d00a      	beq.n	8001fcc <UART_SetConfig+0x1e8>
 8001fb6:	2b80      	cmp	r3, #128	; 0x80
 8001fb8:	d814      	bhi.n	8001fe4 <UART_SetConfig+0x200>
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d002      	beq.n	8001fc4 <UART_SetConfig+0x1e0>
 8001fbe:	2b40      	cmp	r3, #64	; 0x40
 8001fc0:	d008      	beq.n	8001fd4 <UART_SetConfig+0x1f0>
 8001fc2:	e00f      	b.n	8001fe4 <UART_SetConfig+0x200>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001fca:	e082      	b.n	80020d2 <UART_SetConfig+0x2ee>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001fd2:	e07e      	b.n	80020d2 <UART_SetConfig+0x2ee>
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001fda:	e07a      	b.n	80020d2 <UART_SetConfig+0x2ee>
 8001fdc:	2308      	movs	r3, #8
 8001fde:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001fe2:	e076      	b.n	80020d2 <UART_SetConfig+0x2ee>
 8001fe4:	2310      	movs	r3, #16
 8001fe6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001fea:	e072      	b.n	80020d2 <UART_SetConfig+0x2ee>
 8001fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b35      	ldr	r3, [pc, #212]	; (80020c8 <UART_SetConfig+0x2e4>)
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d12a      	bne.n	800204c <UART_SetConfig+0x268>
 8001ff6:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <UART_SetConfig+0x2d4>)
 8001ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002000:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002004:	d01a      	beq.n	800203c <UART_SetConfig+0x258>
 8002006:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800200a:	d81b      	bhi.n	8002044 <UART_SetConfig+0x260>
 800200c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002010:	d00c      	beq.n	800202c <UART_SetConfig+0x248>
 8002012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002016:	d815      	bhi.n	8002044 <UART_SetConfig+0x260>
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <UART_SetConfig+0x240>
 800201c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002020:	d008      	beq.n	8002034 <UART_SetConfig+0x250>
 8002022:	e00f      	b.n	8002044 <UART_SetConfig+0x260>
 8002024:	2300      	movs	r3, #0
 8002026:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800202a:	e052      	b.n	80020d2 <UART_SetConfig+0x2ee>
 800202c:	2302      	movs	r3, #2
 800202e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002032:	e04e      	b.n	80020d2 <UART_SetConfig+0x2ee>
 8002034:	2304      	movs	r3, #4
 8002036:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800203a:	e04a      	b.n	80020d2 <UART_SetConfig+0x2ee>
 800203c:	2308      	movs	r3, #8
 800203e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002042:	e046      	b.n	80020d2 <UART_SetConfig+0x2ee>
 8002044:	2310      	movs	r3, #16
 8002046:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800204a:	e042      	b.n	80020d2 <UART_SetConfig+0x2ee>
 800204c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <UART_SetConfig+0x2cc>)
 8002052:	429a      	cmp	r2, r3
 8002054:	d13a      	bne.n	80020cc <UART_SetConfig+0x2e8>
 8002056:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <UART_SetConfig+0x2d4>)
 8002058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002060:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002064:	d01a      	beq.n	800209c <UART_SetConfig+0x2b8>
 8002066:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800206a:	d81b      	bhi.n	80020a4 <UART_SetConfig+0x2c0>
 800206c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002070:	d00c      	beq.n	800208c <UART_SetConfig+0x2a8>
 8002072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002076:	d815      	bhi.n	80020a4 <UART_SetConfig+0x2c0>
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <UART_SetConfig+0x2a0>
 800207c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002080:	d008      	beq.n	8002094 <UART_SetConfig+0x2b0>
 8002082:	e00f      	b.n	80020a4 <UART_SetConfig+0x2c0>
 8002084:	2300      	movs	r3, #0
 8002086:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800208a:	e022      	b.n	80020d2 <UART_SetConfig+0x2ee>
 800208c:	2302      	movs	r3, #2
 800208e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002092:	e01e      	b.n	80020d2 <UART_SetConfig+0x2ee>
 8002094:	2304      	movs	r3, #4
 8002096:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800209a:	e01a      	b.n	80020d2 <UART_SetConfig+0x2ee>
 800209c:	2308      	movs	r3, #8
 800209e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80020a2:	e016      	b.n	80020d2 <UART_SetConfig+0x2ee>
 80020a4:	2310      	movs	r3, #16
 80020a6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80020aa:	e012      	b.n	80020d2 <UART_SetConfig+0x2ee>
 80020ac:	efff69f3 	.word	0xefff69f3
 80020b0:	40008000 	.word	0x40008000
 80020b4:	40013800 	.word	0x40013800
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40004400 	.word	0x40004400
 80020c0:	40004800 	.word	0x40004800
 80020c4:	40004c00 	.word	0x40004c00
 80020c8:	40005000 	.word	0x40005000
 80020cc:	2310      	movs	r3, #16
 80020ce:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80020d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	4bb6      	ldr	r3, [pc, #728]	; (80023b0 <UART_SetConfig+0x5cc>)
 80020d8:	429a      	cmp	r2, r3
 80020da:	f040 810c 	bne.w	80022f6 <UART_SetConfig+0x512>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80020de:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d823      	bhi.n	800212e <UART_SetConfig+0x34a>
 80020e6:	a201      	add	r2, pc, #4	; (adr r2, 80020ec <UART_SetConfig+0x308>)
 80020e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ec:	08002111 	.word	0x08002111
 80020f0:	0800212f 	.word	0x0800212f
 80020f4:	08002119 	.word	0x08002119
 80020f8:	0800212f 	.word	0x0800212f
 80020fc:	0800211f 	.word	0x0800211f
 8002100:	0800212f 	.word	0x0800212f
 8002104:	0800212f 	.word	0x0800212f
 8002108:	0800212f 	.word	0x0800212f
 800210c:	08002127 	.word	0x08002127
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002110:	f7ff fd5a 	bl	8001bc8 <HAL_RCC_GetPCLK1Freq>
 8002114:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8002116:	e00e      	b.n	8002136 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002118:	4ba6      	ldr	r3, [pc, #664]	; (80023b4 <UART_SetConfig+0x5d0>)
 800211a:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 800211c:	e00b      	b.n	8002136 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800211e:	f7ff fcbb 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8002122:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8002124:	e007      	b.n	8002136 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800212a:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 800212c:	e003      	b.n	8002136 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8002134:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 81e5 	beq.w	8002508 <UART_SetConfig+0x724>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800213e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	441a      	add	r2, r3
 8002148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800214a:	4293      	cmp	r3, r2
 800214c:	d305      	bcc.n	800215a <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800214e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002156:	4293      	cmp	r3, r2
 8002158:	d903      	bls.n	8002162 <UART_SetConfig+0x37e>
      {
        ret = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8002160:	e1d2      	b.n	8002508 <UART_SetConfig+0x724>
      }
      else
      {
        switch (clocksource)
 8002162:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002166:	2b08      	cmp	r3, #8
 8002168:	f200 80b0 	bhi.w	80022cc <UART_SetConfig+0x4e8>
 800216c:	a201      	add	r2, pc, #4	; (adr r2, 8002174 <UART_SetConfig+0x390>)
 800216e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002172:	bf00      	nop
 8002174:	08002199 	.word	0x08002199
 8002178:	080022cd 	.word	0x080022cd
 800217c:	080021f9 	.word	0x080021f9
 8002180:	080022cd 	.word	0x080022cd
 8002184:	08002239 	.word	0x08002239
 8002188:	080022cd 	.word	0x080022cd
 800218c:	080022cd 	.word	0x080022cd
 8002190:	080022cd 	.word	0x080022cd
 8002194:	08002295 	.word	0x08002295
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8002198:	f7ff fd16 	bl	8001bc8 <HAL_RCC_GetPCLK1Freq>
 800219c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800219e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021a0:	2200      	movs	r2, #0
 80021a2:	4698      	mov	r8, r3
 80021a4:	4691      	mov	r9, r2
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	ea4f 2309 	mov.w	r3, r9, lsl #8
 80021b2:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 80021b6:	ea4f 2208 	mov.w	r2, r8, lsl #8
 80021ba:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80021bc:	6849      	ldr	r1, [r1, #4]
 80021be:	0849      	lsrs	r1, r1, #1
 80021c0:	2000      	movs	r0, #0
 80021c2:	6539      	str	r1, [r7, #80]	; 0x50
 80021c4:	6578      	str	r0, [r7, #84]	; 0x54
 80021c6:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80021ca:	4621      	mov	r1, r4
 80021cc:	1851      	adds	r1, r2, r1
 80021ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80021d0:	4629      	mov	r1, r5
 80021d2:	eb43 0101 	adc.w	r1, r3, r1
 80021d6:	64f9      	str	r1, [r7, #76]	; 0x4c
 80021d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	643b      	str	r3, [r7, #64]	; 0x40
 80021e0:	647a      	str	r2, [r7, #68]	; 0x44
 80021e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80021ea:	f7fe fcdd 	bl	8000ba8 <__aeabi_uldivmod>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4613      	mov	r3, r2
 80021f4:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 80021f6:	e06d      	b.n	80022d4 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80021f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	085b      	lsrs	r3, r3, #1
 80021fe:	2200      	movs	r2, #0
 8002200:	63bb      	str	r3, [r7, #56]	; 0x38
 8002202:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002204:	4b6c      	ldr	r3, [pc, #432]	; (80023b8 <UART_SetConfig+0x5d4>)
 8002206:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800220a:	4602      	mov	r2, r0
 800220c:	18d3      	adds	r3, r2, r3
 800220e:	633b      	str	r3, [r7, #48]	; 0x30
 8002210:	460b      	mov	r3, r1
 8002212:	f143 0300 	adc.w	r3, r3, #0
 8002216:	637b      	str	r3, [r7, #52]	; 0x34
 8002218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002220:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002222:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002226:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800222a:	f7fe fcbd 	bl	8000ba8 <__aeabi_uldivmod>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4613      	mov	r3, r2
 8002234:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8002236:	e04d      	b.n	80022d4 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8002238:	f7ff fc2e 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 800223c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800223e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002240:	2200      	movs	r2, #0
 8002242:	461c      	mov	r4, r3
 8002244:	4615      	mov	r5, r2
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	022b      	lsls	r3, r5, #8
 8002250:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002254:	0222      	lsls	r2, r4, #8
 8002256:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002258:	6849      	ldr	r1, [r1, #4]
 800225a:	0849      	lsrs	r1, r1, #1
 800225c:	2000      	movs	r0, #0
 800225e:	6239      	str	r1, [r7, #32]
 8002260:	6278      	str	r0, [r7, #36]	; 0x24
 8002262:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002266:	4621      	mov	r1, r4
 8002268:	1851      	adds	r1, r2, r1
 800226a:	61b9      	str	r1, [r7, #24]
 800226c:	4629      	mov	r1, r5
 800226e:	eb43 0101 	adc.w	r1, r3, r1
 8002272:	61f9      	str	r1, [r7, #28]
 8002274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	617a      	str	r2, [r7, #20]
 800227e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002282:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002286:	f7fe fc8f 	bl	8000ba8 <__aeabi_uldivmod>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4613      	mov	r3, r2
 8002290:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8002292:	e01f      	b.n	80022d4 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	085b      	lsrs	r3, r3, #1
 800229a:	2200      	movs	r2, #0
 800229c:	469a      	mov	sl, r3
 800229e:	4693      	mov	fp, r2
 80022a0:	f51a 0300 	adds.w	r3, sl, #8388608	; 0x800000
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	f14b 0300 	adc.w	r3, fp, #0
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	607a      	str	r2, [r7, #4]
 80022b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022be:	f7fe fc73 	bl	8000ba8 <__aeabi_uldivmod>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4613      	mov	r3, r2
 80022c8:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 80022ca:	e003      	b.n	80022d4 <UART_SetConfig+0x4f0>
          default:
            ret = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            break;
 80022d2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80022d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022da:	d308      	bcc.n	80022ee <UART_SetConfig+0x50a>
 80022dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022e2:	d204      	bcs.n	80022ee <UART_SetConfig+0x50a>
        {
          huart->Instance->BRR = usartdiv;
 80022e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80022ea:	60da      	str	r2, [r3, #12]
 80022ec:	e10c      	b.n	8002508 <UART_SetConfig+0x724>
        }
        else
        {
          ret = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80022f4:	e108      	b.n	8002508 <UART_SetConfig+0x724>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022fe:	f040 808f 	bne.w	8002420 <UART_SetConfig+0x63c>
  {
    switch (clocksource)
 8002302:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002306:	2b08      	cmp	r3, #8
 8002308:	d864      	bhi.n	80023d4 <UART_SetConfig+0x5f0>
 800230a:	a201      	add	r2, pc, #4	; (adr r2, 8002310 <UART_SetConfig+0x52c>)
 800230c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002310:	08002335 	.word	0x08002335
 8002314:	08002355 	.word	0x08002355
 8002318:	08002375 	.word	0x08002375
 800231c:	080023d5 	.word	0x080023d5
 8002320:	08002391 	.word	0x08002391
 8002324:	080023d5 	.word	0x080023d5
 8002328:	080023d5 	.word	0x080023d5
 800232c:	080023d5 	.word	0x080023d5
 8002330:	080023bd 	.word	0x080023bd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002334:	f7ff fc48 	bl	8001bc8 <HAL_RCC_GetPCLK1Freq>
 8002338:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800233a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800233c:	005a      	lsls	r2, r3, #1
 800233e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	085b      	lsrs	r3, r3, #1
 8002344:	441a      	add	r2, r3
 8002346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	fbb2 f3f3 	udiv	r3, r2, r3
 800234e:	b29b      	uxth	r3, r3
 8002350:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8002352:	e043      	b.n	80023dc <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002354:	f7ff fc4e 	bl	8001bf4 <HAL_RCC_GetPCLK2Freq>
 8002358:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800235a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800235c:	005a      	lsls	r2, r3, #1
 800235e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	085b      	lsrs	r3, r3, #1
 8002364:	441a      	add	r2, r3
 8002366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	b29b      	uxth	r3, r3
 8002370:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8002372:	e033      	b.n	80023dc <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	085b      	lsrs	r3, r3, #1
 800237a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800237e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002382:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002384:	6852      	ldr	r2, [r2, #4]
 8002386:	fbb3 f3f2 	udiv	r3, r3, r2
 800238a:	b29b      	uxth	r3, r3
 800238c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800238e:	e025      	b.n	80023dc <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002390:	f7ff fb82 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8002394:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002396:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002398:	005a      	lsls	r2, r3, #1
 800239a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	085b      	lsrs	r3, r3, #1
 80023a0:	441a      	add	r2, r3
 80023a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80023ae:	e015      	b.n	80023dc <UART_SetConfig+0x5f8>
 80023b0:	40008000 	.word	0x40008000
 80023b4:	00f42400 	.word	0x00f42400
 80023b8:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80023bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	085b      	lsrs	r3, r3, #1
 80023c2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80023c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80023d2:	e003      	b.n	80023dc <UART_SetConfig+0x5f8>
      default:
        ret = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 80023da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023de:	2b0f      	cmp	r3, #15
 80023e0:	d91a      	bls.n	8002418 <UART_SetConfig+0x634>
 80023e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e8:	d216      	bcs.n	8002418 <UART_SetConfig+0x634>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	f023 030f 	bic.w	r3, r3, #15
 80023f2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023f8:	085b      	lsrs	r3, r3, #1
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	b29a      	uxth	r2, r3
 8002402:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002406:	4313      	orrs	r3, r2
 8002408:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      huart->Instance->BRR = brrtemp;
 800240c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	e077      	b.n	8002508 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800241e:	e073      	b.n	8002508 <UART_SetConfig+0x724>
    }
  }
  else
  {
    switch (clocksource)
 8002420:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002424:	2b08      	cmp	r3, #8
 8002426:	d85c      	bhi.n	80024e2 <UART_SetConfig+0x6fe>
 8002428:	a201      	add	r2, pc, #4	; (adr r2, 8002430 <UART_SetConfig+0x64c>)
 800242a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242e:	bf00      	nop
 8002430:	08002455 	.word	0x08002455
 8002434:	08002473 	.word	0x08002473
 8002438:	08002491 	.word	0x08002491
 800243c:	080024e3 	.word	0x080024e3
 8002440:	080024ad 	.word	0x080024ad
 8002444:	080024e3 	.word	0x080024e3
 8002448:	080024e3 	.word	0x080024e3
 800244c:	080024e3 	.word	0x080024e3
 8002450:	080024cb 	.word	0x080024cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002454:	f7ff fbb8 	bl	8001bc8 <HAL_RCC_GetPCLK1Freq>
 8002458:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800245a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	085a      	lsrs	r2, r3, #1
 8002460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002462:	441a      	add	r2, r3
 8002464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	fbb2 f3f3 	udiv	r3, r2, r3
 800246c:	b29b      	uxth	r3, r3
 800246e:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8002470:	e03b      	b.n	80024ea <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002472:	f7ff fbbf 	bl	8001bf4 <HAL_RCC_GetPCLK2Freq>
 8002476:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	085a      	lsrs	r2, r3, #1
 800247e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002480:	441a      	add	r2, r3
 8002482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	fbb2 f3f3 	udiv	r3, r2, r3
 800248a:	b29b      	uxth	r3, r3
 800248c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800248e:	e02c      	b.n	80024ea <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002490:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	085b      	lsrs	r3, r3, #1
 8002496:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800249a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800249e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80024a0:	6852      	ldr	r2, [r2, #4]
 80024a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80024aa:	e01e      	b.n	80024ea <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024ac:	f7ff faf4 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 80024b0:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80024b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	085a      	lsrs	r2, r3, #1
 80024b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024ba:	441a      	add	r2, r3
 80024bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80024c8:	e00f      	b.n	80024ea <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80024ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	085b      	lsrs	r3, r3, #1
 80024d0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80024d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024dc:	b29b      	uxth	r3, r3
 80024de:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80024e0:	e003      	b.n	80024ea <UART_SetConfig+0x706>
      default:
        ret = HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 80024e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ec:	2b0f      	cmp	r3, #15
 80024ee:	d908      	bls.n	8002502 <UART_SetConfig+0x71e>
 80024f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f6:	d204      	bcs.n	8002502 <UART_SetConfig+0x71e>
    {
      huart->Instance->BRR = usartdiv;
 80024f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024fe:	60da      	str	r2, [r3, #12]
 8002500:	e002      	b.n	8002508 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800250a:	2200      	movs	r2, #0
 800250c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800250e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002510:	2200      	movs	r2, #0
 8002512:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002514:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 8002518:	4618      	mov	r0, r3
 800251a:	3780      	adds	r7, #128	; 0x80
 800251c:	46bd      	mov	sp, r7
 800251e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002522:	bf00      	nop

08002524 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00a      	beq.n	8002592 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	f003 0310 	and.w	r3, r3, #16
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002600:	2b00      	cmp	r3, #0
 8002602:	d01a      	beq.n	800263a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002622:	d10a      	bne.n	800263a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	605a      	str	r2, [r3, #4]
  }
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af02      	add	r7, sp, #8
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002676:	f7fe ff2f 	bl	80014d8 <HAL_GetTick>
 800267a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b08      	cmp	r3, #8
 8002688:	d10e      	bne.n	80026a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800268a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f82a 	bl	80026f2 <UART_WaitOnFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e020      	b.n	80026ea <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d10e      	bne.n	80026d4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f814 	bl	80026f2 <UART_WaitOnFlagUntilTimeout>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e00a      	b.n	80026ea <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2220      	movs	r2, #32
 80026d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2220      	movs	r2, #32
 80026de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	603b      	str	r3, [r7, #0]
 80026fe:	4613      	mov	r3, r2
 8002700:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002702:	e05d      	b.n	80027c0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800270a:	d059      	beq.n	80027c0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800270c:	f7fe fee4 	bl	80014d8 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	429a      	cmp	r2, r3
 800271a:	d302      	bcc.n	8002722 <UART_WaitOnFlagUntilTimeout+0x30>
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d11b      	bne.n	800275a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002730:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0201 	bic.w	r2, r2, #1
 8002740:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2220      	movs	r2, #32
 8002746:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2220      	movs	r2, #32
 800274c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e042      	b.n	80027e0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d02b      	beq.n	80027c0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002776:	d123      	bne.n	80027c0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002780:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002790:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0201 	bic.w	r2, r2, #1
 80027a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2220      	movs	r2, #32
 80027a6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2220      	movs	r2, #32
 80027b2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e00f      	b.n	80027e0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	69da      	ldr	r2, [r3, #28]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	4013      	ands	r3, r2
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	bf0c      	ite	eq
 80027d0:	2301      	moveq	r3, #1
 80027d2:	2300      	movne	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	461a      	mov	r2, r3
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d092      	beq.n	8002704 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <findslot>:
 80027e8:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <findslot+0x2c>)
 80027ea:	b510      	push	{r4, lr}
 80027ec:	4604      	mov	r4, r0
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	b118      	cbz	r0, 80027fa <findslot+0x12>
 80027f2:	6a03      	ldr	r3, [r0, #32]
 80027f4:	b90b      	cbnz	r3, 80027fa <findslot+0x12>
 80027f6:	f000 ff7b 	bl	80036f0 <__sinit>
 80027fa:	2c13      	cmp	r4, #19
 80027fc:	d807      	bhi.n	800280e <findslot+0x26>
 80027fe:	4806      	ldr	r0, [pc, #24]	; (8002818 <findslot+0x30>)
 8002800:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002804:	3201      	adds	r2, #1
 8002806:	d002      	beq.n	800280e <findslot+0x26>
 8002808:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800280c:	bd10      	pop	{r4, pc}
 800280e:	2000      	movs	r0, #0
 8002810:	e7fc      	b.n	800280c <findslot+0x24>
 8002812:	bf00      	nop
 8002814:	2000006c 	.word	0x2000006c
 8002818:	2000029c 	.word	0x2000029c

0800281c <error>:
 800281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281e:	4604      	mov	r4, r0
 8002820:	f001 f934 	bl	8003a8c <__errno>
 8002824:	2613      	movs	r6, #19
 8002826:	4605      	mov	r5, r0
 8002828:	2700      	movs	r7, #0
 800282a:	4630      	mov	r0, r6
 800282c:	4639      	mov	r1, r7
 800282e:	beab      	bkpt	0x00ab
 8002830:	4606      	mov	r6, r0
 8002832:	602e      	str	r6, [r5, #0]
 8002834:	4620      	mov	r0, r4
 8002836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002838 <checkerror>:
 8002838:	1c43      	adds	r3, r0, #1
 800283a:	d101      	bne.n	8002840 <checkerror+0x8>
 800283c:	f7ff bfee 	b.w	800281c <error>
 8002840:	4770      	bx	lr

08002842 <_swiread>:
 8002842:	b530      	push	{r4, r5, lr}
 8002844:	b085      	sub	sp, #20
 8002846:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800284a:	9203      	str	r2, [sp, #12]
 800284c:	2406      	movs	r4, #6
 800284e:	ad01      	add	r5, sp, #4
 8002850:	4620      	mov	r0, r4
 8002852:	4629      	mov	r1, r5
 8002854:	beab      	bkpt	0x00ab
 8002856:	4604      	mov	r4, r0
 8002858:	4620      	mov	r0, r4
 800285a:	f7ff ffed 	bl	8002838 <checkerror>
 800285e:	b005      	add	sp, #20
 8002860:	bd30      	pop	{r4, r5, pc}

08002862 <_read>:
 8002862:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002864:	4615      	mov	r5, r2
 8002866:	9101      	str	r1, [sp, #4]
 8002868:	f7ff ffbe 	bl	80027e8 <findslot>
 800286c:	9901      	ldr	r1, [sp, #4]
 800286e:	4604      	mov	r4, r0
 8002870:	b938      	cbnz	r0, 8002882 <_read+0x20>
 8002872:	f001 f90b 	bl	8003a8c <__errno>
 8002876:	2309      	movs	r3, #9
 8002878:	6003      	str	r3, [r0, #0]
 800287a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800287e:	b003      	add	sp, #12
 8002880:	bd30      	pop	{r4, r5, pc}
 8002882:	6800      	ldr	r0, [r0, #0]
 8002884:	462a      	mov	r2, r5
 8002886:	f7ff ffdc 	bl	8002842 <_swiread>
 800288a:	1c43      	adds	r3, r0, #1
 800288c:	d0f7      	beq.n	800287e <_read+0x1c>
 800288e:	6863      	ldr	r3, [r4, #4]
 8002890:	1a2a      	subs	r2, r5, r0
 8002892:	4413      	add	r3, r2
 8002894:	6063      	str	r3, [r4, #4]
 8002896:	4610      	mov	r0, r2
 8002898:	e7f1      	b.n	800287e <_read+0x1c>

0800289a <_swilseek>:
 800289a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800289c:	460c      	mov	r4, r1
 800289e:	4616      	mov	r6, r2
 80028a0:	f7ff ffa2 	bl	80027e8 <findslot>
 80028a4:	4605      	mov	r5, r0
 80028a6:	b940      	cbnz	r0, 80028ba <_swilseek+0x20>
 80028a8:	f001 f8f0 	bl	8003a8c <__errno>
 80028ac:	2309      	movs	r3, #9
 80028ae:	6003      	str	r3, [r0, #0]
 80028b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80028b4:	4620      	mov	r0, r4
 80028b6:	b003      	add	sp, #12
 80028b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028ba:	2e02      	cmp	r6, #2
 80028bc:	d903      	bls.n	80028c6 <_swilseek+0x2c>
 80028be:	f001 f8e5 	bl	8003a8c <__errno>
 80028c2:	2316      	movs	r3, #22
 80028c4:	e7f3      	b.n	80028ae <_swilseek+0x14>
 80028c6:	2e01      	cmp	r6, #1
 80028c8:	d112      	bne.n	80028f0 <_swilseek+0x56>
 80028ca:	6843      	ldr	r3, [r0, #4]
 80028cc:	18e4      	adds	r4, r4, r3
 80028ce:	d4f6      	bmi.n	80028be <_swilseek+0x24>
 80028d0:	682b      	ldr	r3, [r5, #0]
 80028d2:	260a      	movs	r6, #10
 80028d4:	e9cd 3400 	strd	r3, r4, [sp]
 80028d8:	466f      	mov	r7, sp
 80028da:	4630      	mov	r0, r6
 80028dc:	4639      	mov	r1, r7
 80028de:	beab      	bkpt	0x00ab
 80028e0:	4606      	mov	r6, r0
 80028e2:	4630      	mov	r0, r6
 80028e4:	f7ff ffa8 	bl	8002838 <checkerror>
 80028e8:	2800      	cmp	r0, #0
 80028ea:	dbe1      	blt.n	80028b0 <_swilseek+0x16>
 80028ec:	606c      	str	r4, [r5, #4]
 80028ee:	e7e1      	b.n	80028b4 <_swilseek+0x1a>
 80028f0:	2e02      	cmp	r6, #2
 80028f2:	6803      	ldr	r3, [r0, #0]
 80028f4:	d1ec      	bne.n	80028d0 <_swilseek+0x36>
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	260c      	movs	r6, #12
 80028fa:	466f      	mov	r7, sp
 80028fc:	4630      	mov	r0, r6
 80028fe:	4639      	mov	r1, r7
 8002900:	beab      	bkpt	0x00ab
 8002902:	4606      	mov	r6, r0
 8002904:	4630      	mov	r0, r6
 8002906:	f7ff ff97 	bl	8002838 <checkerror>
 800290a:	1c43      	adds	r3, r0, #1
 800290c:	d0d0      	beq.n	80028b0 <_swilseek+0x16>
 800290e:	4404      	add	r4, r0
 8002910:	e7de      	b.n	80028d0 <_swilseek+0x36>

08002912 <_lseek>:
 8002912:	f7ff bfc2 	b.w	800289a <_swilseek>

08002916 <_swiwrite>:
 8002916:	b530      	push	{r4, r5, lr}
 8002918:	b085      	sub	sp, #20
 800291a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800291e:	9203      	str	r2, [sp, #12]
 8002920:	2405      	movs	r4, #5
 8002922:	ad01      	add	r5, sp, #4
 8002924:	4620      	mov	r0, r4
 8002926:	4629      	mov	r1, r5
 8002928:	beab      	bkpt	0x00ab
 800292a:	4604      	mov	r4, r0
 800292c:	4620      	mov	r0, r4
 800292e:	f7ff ff83 	bl	8002838 <checkerror>
 8002932:	b005      	add	sp, #20
 8002934:	bd30      	pop	{r4, r5, pc}

08002936 <_write>:
 8002936:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002938:	4615      	mov	r5, r2
 800293a:	9101      	str	r1, [sp, #4]
 800293c:	f7ff ff54 	bl	80027e8 <findslot>
 8002940:	9901      	ldr	r1, [sp, #4]
 8002942:	4604      	mov	r4, r0
 8002944:	b930      	cbnz	r0, 8002954 <_write+0x1e>
 8002946:	f001 f8a1 	bl	8003a8c <__errno>
 800294a:	2309      	movs	r3, #9
 800294c:	6003      	str	r3, [r0, #0]
 800294e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002952:	e012      	b.n	800297a <_write+0x44>
 8002954:	6800      	ldr	r0, [r0, #0]
 8002956:	462a      	mov	r2, r5
 8002958:	f7ff ffdd 	bl	8002916 <_swiwrite>
 800295c:	2800      	cmp	r0, #0
 800295e:	dbf6      	blt.n	800294e <_write+0x18>
 8002960:	6862      	ldr	r2, [r4, #4]
 8002962:	1a2b      	subs	r3, r5, r0
 8002964:	441a      	add	r2, r3
 8002966:	42a8      	cmp	r0, r5
 8002968:	6062      	str	r2, [r4, #4]
 800296a:	d105      	bne.n	8002978 <_write+0x42>
 800296c:	2000      	movs	r0, #0
 800296e:	b003      	add	sp, #12
 8002970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002974:	f7ff bf52 	b.w	800281c <error>
 8002978:	4618      	mov	r0, r3
 800297a:	b003      	add	sp, #12
 800297c:	bd30      	pop	{r4, r5, pc}

0800297e <_swiclose>:
 800297e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002980:	2402      	movs	r4, #2
 8002982:	9001      	str	r0, [sp, #4]
 8002984:	ad01      	add	r5, sp, #4
 8002986:	4620      	mov	r0, r4
 8002988:	4629      	mov	r1, r5
 800298a:	beab      	bkpt	0x00ab
 800298c:	4604      	mov	r4, r0
 800298e:	4620      	mov	r0, r4
 8002990:	f7ff ff52 	bl	8002838 <checkerror>
 8002994:	b003      	add	sp, #12
 8002996:	bd30      	pop	{r4, r5, pc}

08002998 <_close>:
 8002998:	b538      	push	{r3, r4, r5, lr}
 800299a:	4605      	mov	r5, r0
 800299c:	f7ff ff24 	bl	80027e8 <findslot>
 80029a0:	4604      	mov	r4, r0
 80029a2:	b930      	cbnz	r0, 80029b2 <_close+0x1a>
 80029a4:	f001 f872 	bl	8003a8c <__errno>
 80029a8:	2309      	movs	r3, #9
 80029aa:	6003      	str	r3, [r0, #0]
 80029ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029b0:	bd38      	pop	{r3, r4, r5, pc}
 80029b2:	3d01      	subs	r5, #1
 80029b4:	2d01      	cmp	r5, #1
 80029b6:	d809      	bhi.n	80029cc <_close+0x34>
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <_close+0x48>)
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d104      	bne.n	80029cc <_close+0x34>
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029c6:	6003      	str	r3, [r0, #0]
 80029c8:	2000      	movs	r0, #0
 80029ca:	e7f1      	b.n	80029b0 <_close+0x18>
 80029cc:	6820      	ldr	r0, [r4, #0]
 80029ce:	f7ff ffd6 	bl	800297e <_swiclose>
 80029d2:	2800      	cmp	r0, #0
 80029d4:	d1ec      	bne.n	80029b0 <_close+0x18>
 80029d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029da:	6023      	str	r3, [r4, #0]
 80029dc:	e7e8      	b.n	80029b0 <_close+0x18>
 80029de:	bf00      	nop
 80029e0:	2000029c 	.word	0x2000029c

080029e4 <_getpid>:
 80029e4:	2001      	movs	r0, #1
 80029e6:	4770      	bx	lr

080029e8 <_swistat>:
 80029e8:	b570      	push	{r4, r5, r6, lr}
 80029ea:	460c      	mov	r4, r1
 80029ec:	f7ff fefc 	bl	80027e8 <findslot>
 80029f0:	4605      	mov	r5, r0
 80029f2:	b930      	cbnz	r0, 8002a02 <_swistat+0x1a>
 80029f4:	f001 f84a 	bl	8003a8c <__errno>
 80029f8:	2309      	movs	r3, #9
 80029fa:	6003      	str	r3, [r0, #0]
 80029fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a00:	bd70      	pop	{r4, r5, r6, pc}
 8002a02:	6863      	ldr	r3, [r4, #4]
 8002a04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a08:	6063      	str	r3, [r4, #4]
 8002a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a0e:	64a3      	str	r3, [r4, #72]	; 0x48
 8002a10:	260c      	movs	r6, #12
 8002a12:	4630      	mov	r0, r6
 8002a14:	4629      	mov	r1, r5
 8002a16:	beab      	bkpt	0x00ab
 8002a18:	4605      	mov	r5, r0
 8002a1a:	4628      	mov	r0, r5
 8002a1c:	f7ff ff0c 	bl	8002838 <checkerror>
 8002a20:	1c43      	adds	r3, r0, #1
 8002a22:	bf1c      	itt	ne
 8002a24:	6120      	strne	r0, [r4, #16]
 8002a26:	2000      	movne	r0, #0
 8002a28:	e7ea      	b.n	8002a00 <_swistat+0x18>

08002a2a <_fstat>:
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	b510      	push	{r4, lr}
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4604      	mov	r4, r0
 8002a32:	2258      	movs	r2, #88	; 0x58
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 ffd7 	bl	80039e8 <memset>
 8002a3a:	4601      	mov	r1, r0
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a42:	f7ff bfd1 	b.w	80029e8 <_swistat>

08002a46 <_stat>:
 8002a46:	b538      	push	{r3, r4, r5, lr}
 8002a48:	460d      	mov	r5, r1
 8002a4a:	4604      	mov	r4, r0
 8002a4c:	2258      	movs	r2, #88	; 0x58
 8002a4e:	2100      	movs	r1, #0
 8002a50:	4628      	mov	r0, r5
 8002a52:	f000 ffc9 	bl	80039e8 <memset>
 8002a56:	4620      	mov	r0, r4
 8002a58:	2100      	movs	r1, #0
 8002a5a:	f000 f811 	bl	8002a80 <_swiopen>
 8002a5e:	1c43      	adds	r3, r0, #1
 8002a60:	4604      	mov	r4, r0
 8002a62:	d00b      	beq.n	8002a7c <_stat+0x36>
 8002a64:	686b      	ldr	r3, [r5, #4]
 8002a66:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002a6a:	606b      	str	r3, [r5, #4]
 8002a6c:	4629      	mov	r1, r5
 8002a6e:	f7ff ffbb 	bl	80029e8 <_swistat>
 8002a72:	4605      	mov	r5, r0
 8002a74:	4620      	mov	r0, r4
 8002a76:	f7ff ff8f 	bl	8002998 <_close>
 8002a7a:	462c      	mov	r4, r5
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	bd38      	pop	{r3, r4, r5, pc}

08002a80 <_swiopen>:
 8002a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a84:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002b30 <_swiopen+0xb0>
 8002a88:	b097      	sub	sp, #92	; 0x5c
 8002a8a:	4607      	mov	r7, r0
 8002a8c:	460e      	mov	r6, r1
 8002a8e:	2500      	movs	r5, #0
 8002a90:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8002a94:	1c61      	adds	r1, r4, #1
 8002a96:	d037      	beq.n	8002b08 <_swiopen+0x88>
 8002a98:	3501      	adds	r5, #1
 8002a9a:	2d14      	cmp	r5, #20
 8002a9c:	d1f8      	bne.n	8002a90 <_swiopen+0x10>
 8002a9e:	f000 fff5 	bl	8003a8c <__errno>
 8002aa2:	2318      	movs	r3, #24
 8002aa4:	6003      	str	r3, [r0, #0]
 8002aa6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002aaa:	e03d      	b.n	8002b28 <_swiopen+0xa8>
 8002aac:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8002ab0:	f240 6301 	movw	r3, #1537	; 0x601
 8002ab4:	07b2      	lsls	r2, r6, #30
 8002ab6:	bf48      	it	mi
 8002ab8:	f044 0402 	orrmi.w	r4, r4, #2
 8002abc:	421e      	tst	r6, r3
 8002abe:	bf18      	it	ne
 8002ac0:	f044 0404 	orrne.w	r4, r4, #4
 8002ac4:	0733      	lsls	r3, r6, #28
 8002ac6:	bf48      	it	mi
 8002ac8:	f024 0404 	bicmi.w	r4, r4, #4
 8002acc:	4638      	mov	r0, r7
 8002ace:	bf48      	it	mi
 8002ad0:	f044 0408 	orrmi.w	r4, r4, #8
 8002ad4:	9700      	str	r7, [sp, #0]
 8002ad6:	f7fd fbcb 	bl	8000270 <strlen>
 8002ada:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002ade:	2401      	movs	r4, #1
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	4649      	mov	r1, r9
 8002ae4:	beab      	bkpt	0x00ab
 8002ae6:	4604      	mov	r4, r0
 8002ae8:	2c00      	cmp	r4, #0
 8002aea:	db08      	blt.n	8002afe <_swiopen+0x7e>
 8002aec:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002af0:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8002af4:	2300      	movs	r3, #0
 8002af6:	f8c8 3004 	str.w	r3, [r8, #4]
 8002afa:	462c      	mov	r4, r5
 8002afc:	e014      	b.n	8002b28 <_swiopen+0xa8>
 8002afe:	4620      	mov	r0, r4
 8002b00:	f7ff fe8c 	bl	800281c <error>
 8002b04:	4604      	mov	r4, r0
 8002b06:	e00f      	b.n	8002b28 <_swiopen+0xa8>
 8002b08:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8002b0c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002b10:	46e9      	mov	r9, sp
 8002b12:	d1cb      	bne.n	8002aac <_swiopen+0x2c>
 8002b14:	4649      	mov	r1, r9
 8002b16:	4638      	mov	r0, r7
 8002b18:	f7ff ff95 	bl	8002a46 <_stat>
 8002b1c:	3001      	adds	r0, #1
 8002b1e:	d0c5      	beq.n	8002aac <_swiopen+0x2c>
 8002b20:	f000 ffb4 	bl	8003a8c <__errno>
 8002b24:	2311      	movs	r3, #17
 8002b26:	6003      	str	r3, [r0, #0]
 8002b28:	4620      	mov	r0, r4
 8002b2a:	b017      	add	sp, #92	; 0x5c
 8002b2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b30:	2000029c 	.word	0x2000029c

08002b34 <_get_semihosting_exts>:
 8002b34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002b38:	4606      	mov	r6, r0
 8002b3a:	460f      	mov	r7, r1
 8002b3c:	482a      	ldr	r0, [pc, #168]	; (8002be8 <_get_semihosting_exts+0xb4>)
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4615      	mov	r5, r2
 8002b42:	f7ff ff9d 	bl	8002a80 <_swiopen>
 8002b46:	462a      	mov	r2, r5
 8002b48:	4604      	mov	r4, r0
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4630      	mov	r0, r6
 8002b4e:	f000 ff4b 	bl	80039e8 <memset>
 8002b52:	1c63      	adds	r3, r4, #1
 8002b54:	d016      	beq.n	8002b84 <_get_semihosting_exts+0x50>
 8002b56:	4620      	mov	r0, r4
 8002b58:	f7ff fe46 	bl	80027e8 <findslot>
 8002b5c:	f04f 080c 	mov.w	r8, #12
 8002b60:	4681      	mov	r9, r0
 8002b62:	4640      	mov	r0, r8
 8002b64:	4649      	mov	r1, r9
 8002b66:	beab      	bkpt	0x00ab
 8002b68:	4680      	mov	r8, r0
 8002b6a:	4640      	mov	r0, r8
 8002b6c:	f7ff fe64 	bl	8002838 <checkerror>
 8002b70:	2803      	cmp	r0, #3
 8002b72:	dd02      	ble.n	8002b7a <_get_semihosting_exts+0x46>
 8002b74:	1ec3      	subs	r3, r0, #3
 8002b76:	42ab      	cmp	r3, r5
 8002b78:	dc08      	bgt.n	8002b8c <_get_semihosting_exts+0x58>
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f7ff ff0c 	bl	8002998 <_close>
 8002b80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002b84:	4620      	mov	r0, r4
 8002b86:	b003      	add	sp, #12
 8002b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b8c:	2204      	movs	r2, #4
 8002b8e:	eb0d 0102 	add.w	r1, sp, r2
 8002b92:	4620      	mov	r0, r4
 8002b94:	f7ff fe65 	bl	8002862 <_read>
 8002b98:	2803      	cmp	r0, #3
 8002b9a:	ddee      	ble.n	8002b7a <_get_semihosting_exts+0x46>
 8002b9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002ba0:	2b53      	cmp	r3, #83	; 0x53
 8002ba2:	d1ea      	bne.n	8002b7a <_get_semihosting_exts+0x46>
 8002ba4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002ba8:	2b48      	cmp	r3, #72	; 0x48
 8002baa:	d1e6      	bne.n	8002b7a <_get_semihosting_exts+0x46>
 8002bac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002bb0:	2b46      	cmp	r3, #70	; 0x46
 8002bb2:	d1e2      	bne.n	8002b7a <_get_semihosting_exts+0x46>
 8002bb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002bb8:	2b42      	cmp	r3, #66	; 0x42
 8002bba:	d1de      	bne.n	8002b7a <_get_semihosting_exts+0x46>
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	4639      	mov	r1, r7
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	f7ff fe6a 	bl	800289a <_swilseek>
 8002bc6:	2800      	cmp	r0, #0
 8002bc8:	dbd7      	blt.n	8002b7a <_get_semihosting_exts+0x46>
 8002bca:	462a      	mov	r2, r5
 8002bcc:	4631      	mov	r1, r6
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f7ff fe47 	bl	8002862 <_read>
 8002bd4:	4605      	mov	r5, r0
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	f7ff fede 	bl	8002998 <_close>
 8002bdc:	4628      	mov	r0, r5
 8002bde:	f7ff fe2b 	bl	8002838 <checkerror>
 8002be2:	4604      	mov	r4, r0
 8002be4:	e7ce      	b.n	8002b84 <_get_semihosting_exts+0x50>
 8002be6:	bf00      	nop
 8002be8:	08005844 	.word	0x08005844

08002bec <initialise_semihosting_exts>:
 8002bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002bee:	4d0a      	ldr	r5, [pc, #40]	; (8002c18 <initialise_semihosting_exts+0x2c>)
 8002bf0:	4c0a      	ldr	r4, [pc, #40]	; (8002c1c <initialise_semihosting_exts+0x30>)
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	a801      	add	r0, sp, #4
 8002bf8:	6029      	str	r1, [r5, #0]
 8002bfa:	6022      	str	r2, [r4, #0]
 8002bfc:	f7ff ff9a 	bl	8002b34 <_get_semihosting_exts>
 8002c00:	2800      	cmp	r0, #0
 8002c02:	dd07      	ble.n	8002c14 <initialise_semihosting_exts+0x28>
 8002c04:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c08:	f003 0201 	and.w	r2, r3, #1
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	602a      	str	r2, [r5, #0]
 8002c12:	6023      	str	r3, [r4, #0]
 8002c14:	b003      	add	sp, #12
 8002c16:	bd30      	pop	{r4, r5, pc}
 8002c18:	2000000c 	.word	0x2000000c
 8002c1c:	20000010 	.word	0x20000010

08002c20 <_has_ext_stdout_stderr>:
 8002c20:	b510      	push	{r4, lr}
 8002c22:	4c04      	ldr	r4, [pc, #16]	; (8002c34 <_has_ext_stdout_stderr+0x14>)
 8002c24:	6823      	ldr	r3, [r4, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	da01      	bge.n	8002c2e <_has_ext_stdout_stderr+0xe>
 8002c2a:	f7ff ffdf 	bl	8002bec <initialise_semihosting_exts>
 8002c2e:	6820      	ldr	r0, [r4, #0]
 8002c30:	bd10      	pop	{r4, pc}
 8002c32:	bf00      	nop
 8002c34:	20000010 	.word	0x20000010

08002c38 <initialise_monitor_handles>:
 8002c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c3c:	b085      	sub	sp, #20
 8002c3e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002cf0 <initialise_monitor_handles+0xb8>
 8002c42:	f8cd 9004 	str.w	r9, [sp, #4]
 8002c46:	2303      	movs	r3, #3
 8002c48:	2400      	movs	r4, #0
 8002c4a:	9303      	str	r3, [sp, #12]
 8002c4c:	af01      	add	r7, sp, #4
 8002c4e:	9402      	str	r4, [sp, #8]
 8002c50:	2501      	movs	r5, #1
 8002c52:	4628      	mov	r0, r5
 8002c54:	4639      	mov	r1, r7
 8002c56:	beab      	bkpt	0x00ab
 8002c58:	4605      	mov	r5, r0
 8002c5a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8002cf4 <initialise_monitor_handles+0xbc>
 8002c5e:	4623      	mov	r3, r4
 8002c60:	4c20      	ldr	r4, [pc, #128]	; (8002ce4 <initialise_monitor_handles+0xac>)
 8002c62:	f8c8 5000 	str.w	r5, [r8]
 8002c66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c6a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	2b14      	cmp	r3, #20
 8002c72:	d1fa      	bne.n	8002c6a <initialise_monitor_handles+0x32>
 8002c74:	f7ff ffd4 	bl	8002c20 <_has_ext_stdout_stderr>
 8002c78:	4d1b      	ldr	r5, [pc, #108]	; (8002ce8 <initialise_monitor_handles+0xb0>)
 8002c7a:	b1d0      	cbz	r0, 8002cb2 <initialise_monitor_handles+0x7a>
 8002c7c:	f04f 0a03 	mov.w	sl, #3
 8002c80:	2304      	movs	r3, #4
 8002c82:	f8cd 9004 	str.w	r9, [sp, #4]
 8002c86:	2601      	movs	r6, #1
 8002c88:	f8cd a00c 	str.w	sl, [sp, #12]
 8002c8c:	9302      	str	r3, [sp, #8]
 8002c8e:	4630      	mov	r0, r6
 8002c90:	4639      	mov	r1, r7
 8002c92:	beab      	bkpt	0x00ab
 8002c94:	4683      	mov	fp, r0
 8002c96:	4b15      	ldr	r3, [pc, #84]	; (8002cec <initialise_monitor_handles+0xb4>)
 8002c98:	f8cd 9004 	str.w	r9, [sp, #4]
 8002c9c:	f8c3 b000 	str.w	fp, [r3]
 8002ca0:	2308      	movs	r3, #8
 8002ca2:	f8cd a00c 	str.w	sl, [sp, #12]
 8002ca6:	9302      	str	r3, [sp, #8]
 8002ca8:	4630      	mov	r0, r6
 8002caa:	4639      	mov	r1, r7
 8002cac:	beab      	bkpt	0x00ab
 8002cae:	4606      	mov	r6, r0
 8002cb0:	602e      	str	r6, [r5, #0]
 8002cb2:	682b      	ldr	r3, [r5, #0]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	bf02      	ittt	eq
 8002cb8:	4b0c      	ldreq	r3, [pc, #48]	; (8002cec <initialise_monitor_handles+0xb4>)
 8002cba:	681b      	ldreq	r3, [r3, #0]
 8002cbc:	602b      	streq	r3, [r5, #0]
 8002cbe:	2600      	movs	r6, #0
 8002cc0:	f8d8 3000 	ldr.w	r3, [r8]
 8002cc4:	6023      	str	r3, [r4, #0]
 8002cc6:	6066      	str	r6, [r4, #4]
 8002cc8:	f7ff ffaa 	bl	8002c20 <_has_ext_stdout_stderr>
 8002ccc:	b130      	cbz	r0, 8002cdc <initialise_monitor_handles+0xa4>
 8002cce:	4b07      	ldr	r3, [pc, #28]	; (8002cec <initialise_monitor_handles+0xb4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002cd6:	682b      	ldr	r3, [r5, #0]
 8002cd8:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002cdc:	b005      	add	sp, #20
 8002cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ce2:	bf00      	nop
 8002ce4:	2000029c 	.word	0x2000029c
 8002ce8:	20000290 	.word	0x20000290
 8002cec:	20000298 	.word	0x20000298
 8002cf0:	0800585a 	.word	0x0800585a
 8002cf4:	20000294 	.word	0x20000294

08002cf8 <_isatty>:
 8002cf8:	b570      	push	{r4, r5, r6, lr}
 8002cfa:	f7ff fd75 	bl	80027e8 <findslot>
 8002cfe:	2509      	movs	r5, #9
 8002d00:	4604      	mov	r4, r0
 8002d02:	b920      	cbnz	r0, 8002d0e <_isatty+0x16>
 8002d04:	f000 fec2 	bl	8003a8c <__errno>
 8002d08:	6005      	str	r5, [r0, #0]
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	bd70      	pop	{r4, r5, r6, pc}
 8002d0e:	4628      	mov	r0, r5
 8002d10:	4621      	mov	r1, r4
 8002d12:	beab      	bkpt	0x00ab
 8002d14:	4604      	mov	r4, r0
 8002d16:	2c01      	cmp	r4, #1
 8002d18:	d0f7      	beq.n	8002d0a <_isatty+0x12>
 8002d1a:	f000 feb7 	bl	8003a8c <__errno>
 8002d1e:	2400      	movs	r4, #0
 8002d20:	4605      	mov	r5, r0
 8002d22:	2613      	movs	r6, #19
 8002d24:	4630      	mov	r0, r6
 8002d26:	4621      	mov	r1, r4
 8002d28:	beab      	bkpt	0x00ab
 8002d2a:	4606      	mov	r6, r0
 8002d2c:	602e      	str	r6, [r5, #0]
 8002d2e:	e7ec      	b.n	8002d0a <_isatty+0x12>

08002d30 <__cvt>:
 8002d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d34:	ec55 4b10 	vmov	r4, r5, d0
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	460e      	mov	r6, r1
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	462b      	mov	r3, r5
 8002d40:	bfbb      	ittet	lt
 8002d42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002d46:	461d      	movlt	r5, r3
 8002d48:	2300      	movge	r3, #0
 8002d4a:	232d      	movlt	r3, #45	; 0x2d
 8002d4c:	700b      	strb	r3, [r1, #0]
 8002d4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d50:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002d54:	4691      	mov	r9, r2
 8002d56:	f023 0820 	bic.w	r8, r3, #32
 8002d5a:	bfbc      	itt	lt
 8002d5c:	4622      	movlt	r2, r4
 8002d5e:	4614      	movlt	r4, r2
 8002d60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002d64:	d005      	beq.n	8002d72 <__cvt+0x42>
 8002d66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002d6a:	d100      	bne.n	8002d6e <__cvt+0x3e>
 8002d6c:	3601      	adds	r6, #1
 8002d6e:	2102      	movs	r1, #2
 8002d70:	e000      	b.n	8002d74 <__cvt+0x44>
 8002d72:	2103      	movs	r1, #3
 8002d74:	ab03      	add	r3, sp, #12
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	ab02      	add	r3, sp, #8
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	ec45 4b10 	vmov	d0, r4, r5
 8002d80:	4653      	mov	r3, sl
 8002d82:	4632      	mov	r2, r6
 8002d84:	f000 ff64 	bl	8003c50 <_dtoa_r>
 8002d88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002d8c:	4607      	mov	r7, r0
 8002d8e:	d102      	bne.n	8002d96 <__cvt+0x66>
 8002d90:	f019 0f01 	tst.w	r9, #1
 8002d94:	d022      	beq.n	8002ddc <__cvt+0xac>
 8002d96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002d9a:	eb07 0906 	add.w	r9, r7, r6
 8002d9e:	d110      	bne.n	8002dc2 <__cvt+0x92>
 8002da0:	783b      	ldrb	r3, [r7, #0]
 8002da2:	2b30      	cmp	r3, #48	; 0x30
 8002da4:	d10a      	bne.n	8002dbc <__cvt+0x8c>
 8002da6:	2200      	movs	r2, #0
 8002da8:	2300      	movs	r3, #0
 8002daa:	4620      	mov	r0, r4
 8002dac:	4629      	mov	r1, r5
 8002dae:	f7fd fe8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8002db2:	b918      	cbnz	r0, 8002dbc <__cvt+0x8c>
 8002db4:	f1c6 0601 	rsb	r6, r6, #1
 8002db8:	f8ca 6000 	str.w	r6, [sl]
 8002dbc:	f8da 3000 	ldr.w	r3, [sl]
 8002dc0:	4499      	add	r9, r3
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	4629      	mov	r1, r5
 8002dca:	f7fd fe7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8002dce:	b108      	cbz	r0, 8002dd4 <__cvt+0xa4>
 8002dd0:	f8cd 900c 	str.w	r9, [sp, #12]
 8002dd4:	2230      	movs	r2, #48	; 0x30
 8002dd6:	9b03      	ldr	r3, [sp, #12]
 8002dd8:	454b      	cmp	r3, r9
 8002dda:	d307      	bcc.n	8002dec <__cvt+0xbc>
 8002ddc:	9b03      	ldr	r3, [sp, #12]
 8002dde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002de0:	1bdb      	subs	r3, r3, r7
 8002de2:	4638      	mov	r0, r7
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	b004      	add	sp, #16
 8002de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dec:	1c59      	adds	r1, r3, #1
 8002dee:	9103      	str	r1, [sp, #12]
 8002df0:	701a      	strb	r2, [r3, #0]
 8002df2:	e7f0      	b.n	8002dd6 <__cvt+0xa6>

08002df4 <__exponent>:
 8002df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002df6:	4603      	mov	r3, r0
 8002df8:	2900      	cmp	r1, #0
 8002dfa:	bfb8      	it	lt
 8002dfc:	4249      	neglt	r1, r1
 8002dfe:	f803 2b02 	strb.w	r2, [r3], #2
 8002e02:	bfb4      	ite	lt
 8002e04:	222d      	movlt	r2, #45	; 0x2d
 8002e06:	222b      	movge	r2, #43	; 0x2b
 8002e08:	2909      	cmp	r1, #9
 8002e0a:	7042      	strb	r2, [r0, #1]
 8002e0c:	dd2a      	ble.n	8002e64 <__exponent+0x70>
 8002e0e:	f10d 0207 	add.w	r2, sp, #7
 8002e12:	4617      	mov	r7, r2
 8002e14:	260a      	movs	r6, #10
 8002e16:	4694      	mov	ip, r2
 8002e18:	fb91 f5f6 	sdiv	r5, r1, r6
 8002e1c:	fb06 1415 	mls	r4, r6, r5, r1
 8002e20:	3430      	adds	r4, #48	; 0x30
 8002e22:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8002e26:	460c      	mov	r4, r1
 8002e28:	2c63      	cmp	r4, #99	; 0x63
 8002e2a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8002e2e:	4629      	mov	r1, r5
 8002e30:	dcf1      	bgt.n	8002e16 <__exponent+0x22>
 8002e32:	3130      	adds	r1, #48	; 0x30
 8002e34:	f1ac 0402 	sub.w	r4, ip, #2
 8002e38:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002e3c:	1c41      	adds	r1, r0, #1
 8002e3e:	4622      	mov	r2, r4
 8002e40:	42ba      	cmp	r2, r7
 8002e42:	d30a      	bcc.n	8002e5a <__exponent+0x66>
 8002e44:	f10d 0209 	add.w	r2, sp, #9
 8002e48:	eba2 020c 	sub.w	r2, r2, ip
 8002e4c:	42bc      	cmp	r4, r7
 8002e4e:	bf88      	it	hi
 8002e50:	2200      	movhi	r2, #0
 8002e52:	4413      	add	r3, r2
 8002e54:	1a18      	subs	r0, r3, r0
 8002e56:	b003      	add	sp, #12
 8002e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e5a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002e5e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8002e62:	e7ed      	b.n	8002e40 <__exponent+0x4c>
 8002e64:	2330      	movs	r3, #48	; 0x30
 8002e66:	3130      	adds	r1, #48	; 0x30
 8002e68:	7083      	strb	r3, [r0, #2]
 8002e6a:	70c1      	strb	r1, [r0, #3]
 8002e6c:	1d03      	adds	r3, r0, #4
 8002e6e:	e7f1      	b.n	8002e54 <__exponent+0x60>

08002e70 <_printf_float>:
 8002e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e74:	ed2d 8b02 	vpush	{d8}
 8002e78:	b08d      	sub	sp, #52	; 0x34
 8002e7a:	460c      	mov	r4, r1
 8002e7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002e80:	4616      	mov	r6, r2
 8002e82:	461f      	mov	r7, r3
 8002e84:	4605      	mov	r5, r0
 8002e86:	f000 fdb7 	bl	80039f8 <_localeconv_r>
 8002e8a:	f8d0 a000 	ldr.w	sl, [r0]
 8002e8e:	4650      	mov	r0, sl
 8002e90:	f7fd f9ee 	bl	8000270 <strlen>
 8002e94:	2300      	movs	r3, #0
 8002e96:	930a      	str	r3, [sp, #40]	; 0x28
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	9305      	str	r3, [sp, #20]
 8002e9c:	f8d8 3000 	ldr.w	r3, [r8]
 8002ea0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002ea4:	3307      	adds	r3, #7
 8002ea6:	f023 0307 	bic.w	r3, r3, #7
 8002eaa:	f103 0208 	add.w	r2, r3, #8
 8002eae:	f8c8 2000 	str.w	r2, [r8]
 8002eb2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002eb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002eba:	9307      	str	r3, [sp, #28]
 8002ebc:	f8cd 8018 	str.w	r8, [sp, #24]
 8002ec0:	ee08 0a10 	vmov	s16, r0
 8002ec4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8002ec8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002ecc:	4b9e      	ldr	r3, [pc, #632]	; (8003148 <_printf_float+0x2d8>)
 8002ece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ed2:	f7fd fe2b 	bl	8000b2c <__aeabi_dcmpun>
 8002ed6:	bb88      	cbnz	r0, 8002f3c <_printf_float+0xcc>
 8002ed8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002edc:	4b9a      	ldr	r3, [pc, #616]	; (8003148 <_printf_float+0x2d8>)
 8002ede:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ee2:	f7fd fe05 	bl	8000af0 <__aeabi_dcmple>
 8002ee6:	bb48      	cbnz	r0, 8002f3c <_printf_float+0xcc>
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2300      	movs	r3, #0
 8002eec:	4640      	mov	r0, r8
 8002eee:	4649      	mov	r1, r9
 8002ef0:	f7fd fdf4 	bl	8000adc <__aeabi_dcmplt>
 8002ef4:	b110      	cbz	r0, 8002efc <_printf_float+0x8c>
 8002ef6:	232d      	movs	r3, #45	; 0x2d
 8002ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002efc:	4a93      	ldr	r2, [pc, #588]	; (800314c <_printf_float+0x2dc>)
 8002efe:	4b94      	ldr	r3, [pc, #592]	; (8003150 <_printf_float+0x2e0>)
 8002f00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002f04:	bf94      	ite	ls
 8002f06:	4690      	movls	r8, r2
 8002f08:	4698      	movhi	r8, r3
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	6123      	str	r3, [r4, #16]
 8002f0e:	9b05      	ldr	r3, [sp, #20]
 8002f10:	f023 0304 	bic.w	r3, r3, #4
 8002f14:	6023      	str	r3, [r4, #0]
 8002f16:	f04f 0900 	mov.w	r9, #0
 8002f1a:	9700      	str	r7, [sp, #0]
 8002f1c:	4633      	mov	r3, r6
 8002f1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8002f20:	4621      	mov	r1, r4
 8002f22:	4628      	mov	r0, r5
 8002f24:	f000 f9da 	bl	80032dc <_printf_common>
 8002f28:	3001      	adds	r0, #1
 8002f2a:	f040 8090 	bne.w	800304e <_printf_float+0x1de>
 8002f2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f32:	b00d      	add	sp, #52	; 0x34
 8002f34:	ecbd 8b02 	vpop	{d8}
 8002f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f3c:	4642      	mov	r2, r8
 8002f3e:	464b      	mov	r3, r9
 8002f40:	4640      	mov	r0, r8
 8002f42:	4649      	mov	r1, r9
 8002f44:	f7fd fdf2 	bl	8000b2c <__aeabi_dcmpun>
 8002f48:	b140      	cbz	r0, 8002f5c <_printf_float+0xec>
 8002f4a:	464b      	mov	r3, r9
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bfbc      	itt	lt
 8002f50:	232d      	movlt	r3, #45	; 0x2d
 8002f52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002f56:	4a7f      	ldr	r2, [pc, #508]	; (8003154 <_printf_float+0x2e4>)
 8002f58:	4b7f      	ldr	r3, [pc, #508]	; (8003158 <_printf_float+0x2e8>)
 8002f5a:	e7d1      	b.n	8002f00 <_printf_float+0x90>
 8002f5c:	6863      	ldr	r3, [r4, #4]
 8002f5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002f62:	9206      	str	r2, [sp, #24]
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	d13f      	bne.n	8002fe8 <_printf_float+0x178>
 8002f68:	2306      	movs	r3, #6
 8002f6a:	6063      	str	r3, [r4, #4]
 8002f6c:	9b05      	ldr	r3, [sp, #20]
 8002f6e:	6861      	ldr	r1, [r4, #4]
 8002f70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002f74:	2300      	movs	r3, #0
 8002f76:	9303      	str	r3, [sp, #12]
 8002f78:	ab0a      	add	r3, sp, #40	; 0x28
 8002f7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002f7e:	ab09      	add	r3, sp, #36	; 0x24
 8002f80:	ec49 8b10 	vmov	d0, r8, r9
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	6022      	str	r2, [r4, #0]
 8002f88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002f8c:	4628      	mov	r0, r5
 8002f8e:	f7ff fecf 	bl	8002d30 <__cvt>
 8002f92:	9b06      	ldr	r3, [sp, #24]
 8002f94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002f96:	2b47      	cmp	r3, #71	; 0x47
 8002f98:	4680      	mov	r8, r0
 8002f9a:	d108      	bne.n	8002fae <_printf_float+0x13e>
 8002f9c:	1cc8      	adds	r0, r1, #3
 8002f9e:	db02      	blt.n	8002fa6 <_printf_float+0x136>
 8002fa0:	6863      	ldr	r3, [r4, #4]
 8002fa2:	4299      	cmp	r1, r3
 8002fa4:	dd41      	ble.n	800302a <_printf_float+0x1ba>
 8002fa6:	f1ab 0302 	sub.w	r3, fp, #2
 8002faa:	fa5f fb83 	uxtb.w	fp, r3
 8002fae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002fb2:	d820      	bhi.n	8002ff6 <_printf_float+0x186>
 8002fb4:	3901      	subs	r1, #1
 8002fb6:	465a      	mov	r2, fp
 8002fb8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002fbc:	9109      	str	r1, [sp, #36]	; 0x24
 8002fbe:	f7ff ff19 	bl	8002df4 <__exponent>
 8002fc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002fc4:	1813      	adds	r3, r2, r0
 8002fc6:	2a01      	cmp	r2, #1
 8002fc8:	4681      	mov	r9, r0
 8002fca:	6123      	str	r3, [r4, #16]
 8002fcc:	dc02      	bgt.n	8002fd4 <_printf_float+0x164>
 8002fce:	6822      	ldr	r2, [r4, #0]
 8002fd0:	07d2      	lsls	r2, r2, #31
 8002fd2:	d501      	bpl.n	8002fd8 <_printf_float+0x168>
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	6123      	str	r3, [r4, #16]
 8002fd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d09c      	beq.n	8002f1a <_printf_float+0xaa>
 8002fe0:	232d      	movs	r3, #45	; 0x2d
 8002fe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fe6:	e798      	b.n	8002f1a <_printf_float+0xaa>
 8002fe8:	9a06      	ldr	r2, [sp, #24]
 8002fea:	2a47      	cmp	r2, #71	; 0x47
 8002fec:	d1be      	bne.n	8002f6c <_printf_float+0xfc>
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1bc      	bne.n	8002f6c <_printf_float+0xfc>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e7b9      	b.n	8002f6a <_printf_float+0xfa>
 8002ff6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002ffa:	d118      	bne.n	800302e <_printf_float+0x1be>
 8002ffc:	2900      	cmp	r1, #0
 8002ffe:	6863      	ldr	r3, [r4, #4]
 8003000:	dd0b      	ble.n	800301a <_printf_float+0x1aa>
 8003002:	6121      	str	r1, [r4, #16]
 8003004:	b913      	cbnz	r3, 800300c <_printf_float+0x19c>
 8003006:	6822      	ldr	r2, [r4, #0]
 8003008:	07d0      	lsls	r0, r2, #31
 800300a:	d502      	bpl.n	8003012 <_printf_float+0x1a2>
 800300c:	3301      	adds	r3, #1
 800300e:	440b      	add	r3, r1
 8003010:	6123      	str	r3, [r4, #16]
 8003012:	65a1      	str	r1, [r4, #88]	; 0x58
 8003014:	f04f 0900 	mov.w	r9, #0
 8003018:	e7de      	b.n	8002fd8 <_printf_float+0x168>
 800301a:	b913      	cbnz	r3, 8003022 <_printf_float+0x1b2>
 800301c:	6822      	ldr	r2, [r4, #0]
 800301e:	07d2      	lsls	r2, r2, #31
 8003020:	d501      	bpl.n	8003026 <_printf_float+0x1b6>
 8003022:	3302      	adds	r3, #2
 8003024:	e7f4      	b.n	8003010 <_printf_float+0x1a0>
 8003026:	2301      	movs	r3, #1
 8003028:	e7f2      	b.n	8003010 <_printf_float+0x1a0>
 800302a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800302e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003030:	4299      	cmp	r1, r3
 8003032:	db05      	blt.n	8003040 <_printf_float+0x1d0>
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	6121      	str	r1, [r4, #16]
 8003038:	07d8      	lsls	r0, r3, #31
 800303a:	d5ea      	bpl.n	8003012 <_printf_float+0x1a2>
 800303c:	1c4b      	adds	r3, r1, #1
 800303e:	e7e7      	b.n	8003010 <_printf_float+0x1a0>
 8003040:	2900      	cmp	r1, #0
 8003042:	bfd4      	ite	le
 8003044:	f1c1 0202 	rsble	r2, r1, #2
 8003048:	2201      	movgt	r2, #1
 800304a:	4413      	add	r3, r2
 800304c:	e7e0      	b.n	8003010 <_printf_float+0x1a0>
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	055a      	lsls	r2, r3, #21
 8003052:	d407      	bmi.n	8003064 <_printf_float+0x1f4>
 8003054:	6923      	ldr	r3, [r4, #16]
 8003056:	4642      	mov	r2, r8
 8003058:	4631      	mov	r1, r6
 800305a:	4628      	mov	r0, r5
 800305c:	47b8      	blx	r7
 800305e:	3001      	adds	r0, #1
 8003060:	d12c      	bne.n	80030bc <_printf_float+0x24c>
 8003062:	e764      	b.n	8002f2e <_printf_float+0xbe>
 8003064:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003068:	f240 80e0 	bls.w	800322c <_printf_float+0x3bc>
 800306c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003070:	2200      	movs	r2, #0
 8003072:	2300      	movs	r3, #0
 8003074:	f7fd fd28 	bl	8000ac8 <__aeabi_dcmpeq>
 8003078:	2800      	cmp	r0, #0
 800307a:	d034      	beq.n	80030e6 <_printf_float+0x276>
 800307c:	4a37      	ldr	r2, [pc, #220]	; (800315c <_printf_float+0x2ec>)
 800307e:	2301      	movs	r3, #1
 8003080:	4631      	mov	r1, r6
 8003082:	4628      	mov	r0, r5
 8003084:	47b8      	blx	r7
 8003086:	3001      	adds	r0, #1
 8003088:	f43f af51 	beq.w	8002f2e <_printf_float+0xbe>
 800308c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003090:	429a      	cmp	r2, r3
 8003092:	db02      	blt.n	800309a <_printf_float+0x22a>
 8003094:	6823      	ldr	r3, [r4, #0]
 8003096:	07d8      	lsls	r0, r3, #31
 8003098:	d510      	bpl.n	80030bc <_printf_float+0x24c>
 800309a:	ee18 3a10 	vmov	r3, s16
 800309e:	4652      	mov	r2, sl
 80030a0:	4631      	mov	r1, r6
 80030a2:	4628      	mov	r0, r5
 80030a4:	47b8      	blx	r7
 80030a6:	3001      	adds	r0, #1
 80030a8:	f43f af41 	beq.w	8002f2e <_printf_float+0xbe>
 80030ac:	f04f 0800 	mov.w	r8, #0
 80030b0:	f104 091a 	add.w	r9, r4, #26
 80030b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030b6:	3b01      	subs	r3, #1
 80030b8:	4543      	cmp	r3, r8
 80030ba:	dc09      	bgt.n	80030d0 <_printf_float+0x260>
 80030bc:	6823      	ldr	r3, [r4, #0]
 80030be:	079b      	lsls	r3, r3, #30
 80030c0:	f100 8107 	bmi.w	80032d2 <_printf_float+0x462>
 80030c4:	68e0      	ldr	r0, [r4, #12]
 80030c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80030c8:	4298      	cmp	r0, r3
 80030ca:	bfb8      	it	lt
 80030cc:	4618      	movlt	r0, r3
 80030ce:	e730      	b.n	8002f32 <_printf_float+0xc2>
 80030d0:	2301      	movs	r3, #1
 80030d2:	464a      	mov	r2, r9
 80030d4:	4631      	mov	r1, r6
 80030d6:	4628      	mov	r0, r5
 80030d8:	47b8      	blx	r7
 80030da:	3001      	adds	r0, #1
 80030dc:	f43f af27 	beq.w	8002f2e <_printf_float+0xbe>
 80030e0:	f108 0801 	add.w	r8, r8, #1
 80030e4:	e7e6      	b.n	80030b4 <_printf_float+0x244>
 80030e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	dc39      	bgt.n	8003160 <_printf_float+0x2f0>
 80030ec:	4a1b      	ldr	r2, [pc, #108]	; (800315c <_printf_float+0x2ec>)
 80030ee:	2301      	movs	r3, #1
 80030f0:	4631      	mov	r1, r6
 80030f2:	4628      	mov	r0, r5
 80030f4:	47b8      	blx	r7
 80030f6:	3001      	adds	r0, #1
 80030f8:	f43f af19 	beq.w	8002f2e <_printf_float+0xbe>
 80030fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003100:	4313      	orrs	r3, r2
 8003102:	d102      	bne.n	800310a <_printf_float+0x29a>
 8003104:	6823      	ldr	r3, [r4, #0]
 8003106:	07d9      	lsls	r1, r3, #31
 8003108:	d5d8      	bpl.n	80030bc <_printf_float+0x24c>
 800310a:	ee18 3a10 	vmov	r3, s16
 800310e:	4652      	mov	r2, sl
 8003110:	4631      	mov	r1, r6
 8003112:	4628      	mov	r0, r5
 8003114:	47b8      	blx	r7
 8003116:	3001      	adds	r0, #1
 8003118:	f43f af09 	beq.w	8002f2e <_printf_float+0xbe>
 800311c:	f04f 0900 	mov.w	r9, #0
 8003120:	f104 0a1a 	add.w	sl, r4, #26
 8003124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003126:	425b      	negs	r3, r3
 8003128:	454b      	cmp	r3, r9
 800312a:	dc01      	bgt.n	8003130 <_printf_float+0x2c0>
 800312c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800312e:	e792      	b.n	8003056 <_printf_float+0x1e6>
 8003130:	2301      	movs	r3, #1
 8003132:	4652      	mov	r2, sl
 8003134:	4631      	mov	r1, r6
 8003136:	4628      	mov	r0, r5
 8003138:	47b8      	blx	r7
 800313a:	3001      	adds	r0, #1
 800313c:	f43f aef7 	beq.w	8002f2e <_printf_float+0xbe>
 8003140:	f109 0901 	add.w	r9, r9, #1
 8003144:	e7ee      	b.n	8003124 <_printf_float+0x2b4>
 8003146:	bf00      	nop
 8003148:	7fefffff 	.word	0x7fefffff
 800314c:	0800585e 	.word	0x0800585e
 8003150:	08005862 	.word	0x08005862
 8003154:	08005866 	.word	0x08005866
 8003158:	0800586a 	.word	0x0800586a
 800315c:	0800586e 	.word	0x0800586e
 8003160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003162:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003164:	429a      	cmp	r2, r3
 8003166:	bfa8      	it	ge
 8003168:	461a      	movge	r2, r3
 800316a:	2a00      	cmp	r2, #0
 800316c:	4691      	mov	r9, r2
 800316e:	dc37      	bgt.n	80031e0 <_printf_float+0x370>
 8003170:	f04f 0b00 	mov.w	fp, #0
 8003174:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003178:	f104 021a 	add.w	r2, r4, #26
 800317c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800317e:	9305      	str	r3, [sp, #20]
 8003180:	eba3 0309 	sub.w	r3, r3, r9
 8003184:	455b      	cmp	r3, fp
 8003186:	dc33      	bgt.n	80031f0 <_printf_float+0x380>
 8003188:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800318c:	429a      	cmp	r2, r3
 800318e:	db3b      	blt.n	8003208 <_printf_float+0x398>
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	07da      	lsls	r2, r3, #31
 8003194:	d438      	bmi.n	8003208 <_printf_float+0x398>
 8003196:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800319a:	eba2 0903 	sub.w	r9, r2, r3
 800319e:	9b05      	ldr	r3, [sp, #20]
 80031a0:	1ad2      	subs	r2, r2, r3
 80031a2:	4591      	cmp	r9, r2
 80031a4:	bfa8      	it	ge
 80031a6:	4691      	movge	r9, r2
 80031a8:	f1b9 0f00 	cmp.w	r9, #0
 80031ac:	dc35      	bgt.n	800321a <_printf_float+0x3aa>
 80031ae:	f04f 0800 	mov.w	r8, #0
 80031b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80031b6:	f104 0a1a 	add.w	sl, r4, #26
 80031ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80031be:	1a9b      	subs	r3, r3, r2
 80031c0:	eba3 0309 	sub.w	r3, r3, r9
 80031c4:	4543      	cmp	r3, r8
 80031c6:	f77f af79 	ble.w	80030bc <_printf_float+0x24c>
 80031ca:	2301      	movs	r3, #1
 80031cc:	4652      	mov	r2, sl
 80031ce:	4631      	mov	r1, r6
 80031d0:	4628      	mov	r0, r5
 80031d2:	47b8      	blx	r7
 80031d4:	3001      	adds	r0, #1
 80031d6:	f43f aeaa 	beq.w	8002f2e <_printf_float+0xbe>
 80031da:	f108 0801 	add.w	r8, r8, #1
 80031de:	e7ec      	b.n	80031ba <_printf_float+0x34a>
 80031e0:	4613      	mov	r3, r2
 80031e2:	4631      	mov	r1, r6
 80031e4:	4642      	mov	r2, r8
 80031e6:	4628      	mov	r0, r5
 80031e8:	47b8      	blx	r7
 80031ea:	3001      	adds	r0, #1
 80031ec:	d1c0      	bne.n	8003170 <_printf_float+0x300>
 80031ee:	e69e      	b.n	8002f2e <_printf_float+0xbe>
 80031f0:	2301      	movs	r3, #1
 80031f2:	4631      	mov	r1, r6
 80031f4:	4628      	mov	r0, r5
 80031f6:	9205      	str	r2, [sp, #20]
 80031f8:	47b8      	blx	r7
 80031fa:	3001      	adds	r0, #1
 80031fc:	f43f ae97 	beq.w	8002f2e <_printf_float+0xbe>
 8003200:	9a05      	ldr	r2, [sp, #20]
 8003202:	f10b 0b01 	add.w	fp, fp, #1
 8003206:	e7b9      	b.n	800317c <_printf_float+0x30c>
 8003208:	ee18 3a10 	vmov	r3, s16
 800320c:	4652      	mov	r2, sl
 800320e:	4631      	mov	r1, r6
 8003210:	4628      	mov	r0, r5
 8003212:	47b8      	blx	r7
 8003214:	3001      	adds	r0, #1
 8003216:	d1be      	bne.n	8003196 <_printf_float+0x326>
 8003218:	e689      	b.n	8002f2e <_printf_float+0xbe>
 800321a:	9a05      	ldr	r2, [sp, #20]
 800321c:	464b      	mov	r3, r9
 800321e:	4442      	add	r2, r8
 8003220:	4631      	mov	r1, r6
 8003222:	4628      	mov	r0, r5
 8003224:	47b8      	blx	r7
 8003226:	3001      	adds	r0, #1
 8003228:	d1c1      	bne.n	80031ae <_printf_float+0x33e>
 800322a:	e680      	b.n	8002f2e <_printf_float+0xbe>
 800322c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800322e:	2a01      	cmp	r2, #1
 8003230:	dc01      	bgt.n	8003236 <_printf_float+0x3c6>
 8003232:	07db      	lsls	r3, r3, #31
 8003234:	d53a      	bpl.n	80032ac <_printf_float+0x43c>
 8003236:	2301      	movs	r3, #1
 8003238:	4642      	mov	r2, r8
 800323a:	4631      	mov	r1, r6
 800323c:	4628      	mov	r0, r5
 800323e:	47b8      	blx	r7
 8003240:	3001      	adds	r0, #1
 8003242:	f43f ae74 	beq.w	8002f2e <_printf_float+0xbe>
 8003246:	ee18 3a10 	vmov	r3, s16
 800324a:	4652      	mov	r2, sl
 800324c:	4631      	mov	r1, r6
 800324e:	4628      	mov	r0, r5
 8003250:	47b8      	blx	r7
 8003252:	3001      	adds	r0, #1
 8003254:	f43f ae6b 	beq.w	8002f2e <_printf_float+0xbe>
 8003258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800325c:	2200      	movs	r2, #0
 800325e:	2300      	movs	r3, #0
 8003260:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003264:	f7fd fc30 	bl	8000ac8 <__aeabi_dcmpeq>
 8003268:	b9d8      	cbnz	r0, 80032a2 <_printf_float+0x432>
 800326a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800326e:	f108 0201 	add.w	r2, r8, #1
 8003272:	4631      	mov	r1, r6
 8003274:	4628      	mov	r0, r5
 8003276:	47b8      	blx	r7
 8003278:	3001      	adds	r0, #1
 800327a:	d10e      	bne.n	800329a <_printf_float+0x42a>
 800327c:	e657      	b.n	8002f2e <_printf_float+0xbe>
 800327e:	2301      	movs	r3, #1
 8003280:	4652      	mov	r2, sl
 8003282:	4631      	mov	r1, r6
 8003284:	4628      	mov	r0, r5
 8003286:	47b8      	blx	r7
 8003288:	3001      	adds	r0, #1
 800328a:	f43f ae50 	beq.w	8002f2e <_printf_float+0xbe>
 800328e:	f108 0801 	add.w	r8, r8, #1
 8003292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003294:	3b01      	subs	r3, #1
 8003296:	4543      	cmp	r3, r8
 8003298:	dcf1      	bgt.n	800327e <_printf_float+0x40e>
 800329a:	464b      	mov	r3, r9
 800329c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80032a0:	e6da      	b.n	8003058 <_printf_float+0x1e8>
 80032a2:	f04f 0800 	mov.w	r8, #0
 80032a6:	f104 0a1a 	add.w	sl, r4, #26
 80032aa:	e7f2      	b.n	8003292 <_printf_float+0x422>
 80032ac:	2301      	movs	r3, #1
 80032ae:	4642      	mov	r2, r8
 80032b0:	e7df      	b.n	8003272 <_printf_float+0x402>
 80032b2:	2301      	movs	r3, #1
 80032b4:	464a      	mov	r2, r9
 80032b6:	4631      	mov	r1, r6
 80032b8:	4628      	mov	r0, r5
 80032ba:	47b8      	blx	r7
 80032bc:	3001      	adds	r0, #1
 80032be:	f43f ae36 	beq.w	8002f2e <_printf_float+0xbe>
 80032c2:	f108 0801 	add.w	r8, r8, #1
 80032c6:	68e3      	ldr	r3, [r4, #12]
 80032c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032ca:	1a5b      	subs	r3, r3, r1
 80032cc:	4543      	cmp	r3, r8
 80032ce:	dcf0      	bgt.n	80032b2 <_printf_float+0x442>
 80032d0:	e6f8      	b.n	80030c4 <_printf_float+0x254>
 80032d2:	f04f 0800 	mov.w	r8, #0
 80032d6:	f104 0919 	add.w	r9, r4, #25
 80032da:	e7f4      	b.n	80032c6 <_printf_float+0x456>

080032dc <_printf_common>:
 80032dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032e0:	4616      	mov	r6, r2
 80032e2:	4699      	mov	r9, r3
 80032e4:	688a      	ldr	r2, [r1, #8]
 80032e6:	690b      	ldr	r3, [r1, #16]
 80032e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032ec:	4293      	cmp	r3, r2
 80032ee:	bfb8      	it	lt
 80032f0:	4613      	movlt	r3, r2
 80032f2:	6033      	str	r3, [r6, #0]
 80032f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032f8:	4607      	mov	r7, r0
 80032fa:	460c      	mov	r4, r1
 80032fc:	b10a      	cbz	r2, 8003302 <_printf_common+0x26>
 80032fe:	3301      	adds	r3, #1
 8003300:	6033      	str	r3, [r6, #0]
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	0699      	lsls	r1, r3, #26
 8003306:	bf42      	ittt	mi
 8003308:	6833      	ldrmi	r3, [r6, #0]
 800330a:	3302      	addmi	r3, #2
 800330c:	6033      	strmi	r3, [r6, #0]
 800330e:	6825      	ldr	r5, [r4, #0]
 8003310:	f015 0506 	ands.w	r5, r5, #6
 8003314:	d106      	bne.n	8003324 <_printf_common+0x48>
 8003316:	f104 0a19 	add.w	sl, r4, #25
 800331a:	68e3      	ldr	r3, [r4, #12]
 800331c:	6832      	ldr	r2, [r6, #0]
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	42ab      	cmp	r3, r5
 8003322:	dc26      	bgt.n	8003372 <_printf_common+0x96>
 8003324:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003328:	1e13      	subs	r3, r2, #0
 800332a:	6822      	ldr	r2, [r4, #0]
 800332c:	bf18      	it	ne
 800332e:	2301      	movne	r3, #1
 8003330:	0692      	lsls	r2, r2, #26
 8003332:	d42b      	bmi.n	800338c <_printf_common+0xb0>
 8003334:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003338:	4649      	mov	r1, r9
 800333a:	4638      	mov	r0, r7
 800333c:	47c0      	blx	r8
 800333e:	3001      	adds	r0, #1
 8003340:	d01e      	beq.n	8003380 <_printf_common+0xa4>
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	6922      	ldr	r2, [r4, #16]
 8003346:	f003 0306 	and.w	r3, r3, #6
 800334a:	2b04      	cmp	r3, #4
 800334c:	bf02      	ittt	eq
 800334e:	68e5      	ldreq	r5, [r4, #12]
 8003350:	6833      	ldreq	r3, [r6, #0]
 8003352:	1aed      	subeq	r5, r5, r3
 8003354:	68a3      	ldr	r3, [r4, #8]
 8003356:	bf0c      	ite	eq
 8003358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800335c:	2500      	movne	r5, #0
 800335e:	4293      	cmp	r3, r2
 8003360:	bfc4      	itt	gt
 8003362:	1a9b      	subgt	r3, r3, r2
 8003364:	18ed      	addgt	r5, r5, r3
 8003366:	2600      	movs	r6, #0
 8003368:	341a      	adds	r4, #26
 800336a:	42b5      	cmp	r5, r6
 800336c:	d11a      	bne.n	80033a4 <_printf_common+0xc8>
 800336e:	2000      	movs	r0, #0
 8003370:	e008      	b.n	8003384 <_printf_common+0xa8>
 8003372:	2301      	movs	r3, #1
 8003374:	4652      	mov	r2, sl
 8003376:	4649      	mov	r1, r9
 8003378:	4638      	mov	r0, r7
 800337a:	47c0      	blx	r8
 800337c:	3001      	adds	r0, #1
 800337e:	d103      	bne.n	8003388 <_printf_common+0xac>
 8003380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003388:	3501      	adds	r5, #1
 800338a:	e7c6      	b.n	800331a <_printf_common+0x3e>
 800338c:	18e1      	adds	r1, r4, r3
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	2030      	movs	r0, #48	; 0x30
 8003392:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003396:	4422      	add	r2, r4
 8003398:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800339c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033a0:	3302      	adds	r3, #2
 80033a2:	e7c7      	b.n	8003334 <_printf_common+0x58>
 80033a4:	2301      	movs	r3, #1
 80033a6:	4622      	mov	r2, r4
 80033a8:	4649      	mov	r1, r9
 80033aa:	4638      	mov	r0, r7
 80033ac:	47c0      	blx	r8
 80033ae:	3001      	adds	r0, #1
 80033b0:	d0e6      	beq.n	8003380 <_printf_common+0xa4>
 80033b2:	3601      	adds	r6, #1
 80033b4:	e7d9      	b.n	800336a <_printf_common+0x8e>
	...

080033b8 <_printf_i>:
 80033b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033bc:	7e0f      	ldrb	r7, [r1, #24]
 80033be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80033c0:	2f78      	cmp	r7, #120	; 0x78
 80033c2:	4691      	mov	r9, r2
 80033c4:	4680      	mov	r8, r0
 80033c6:	460c      	mov	r4, r1
 80033c8:	469a      	mov	sl, r3
 80033ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80033ce:	d807      	bhi.n	80033e0 <_printf_i+0x28>
 80033d0:	2f62      	cmp	r7, #98	; 0x62
 80033d2:	d80a      	bhi.n	80033ea <_printf_i+0x32>
 80033d4:	2f00      	cmp	r7, #0
 80033d6:	f000 80d4 	beq.w	8003582 <_printf_i+0x1ca>
 80033da:	2f58      	cmp	r7, #88	; 0x58
 80033dc:	f000 80c0 	beq.w	8003560 <_printf_i+0x1a8>
 80033e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033e8:	e03a      	b.n	8003460 <_printf_i+0xa8>
 80033ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033ee:	2b15      	cmp	r3, #21
 80033f0:	d8f6      	bhi.n	80033e0 <_printf_i+0x28>
 80033f2:	a101      	add	r1, pc, #4	; (adr r1, 80033f8 <_printf_i+0x40>)
 80033f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033f8:	08003451 	.word	0x08003451
 80033fc:	08003465 	.word	0x08003465
 8003400:	080033e1 	.word	0x080033e1
 8003404:	080033e1 	.word	0x080033e1
 8003408:	080033e1 	.word	0x080033e1
 800340c:	080033e1 	.word	0x080033e1
 8003410:	08003465 	.word	0x08003465
 8003414:	080033e1 	.word	0x080033e1
 8003418:	080033e1 	.word	0x080033e1
 800341c:	080033e1 	.word	0x080033e1
 8003420:	080033e1 	.word	0x080033e1
 8003424:	08003569 	.word	0x08003569
 8003428:	08003491 	.word	0x08003491
 800342c:	08003523 	.word	0x08003523
 8003430:	080033e1 	.word	0x080033e1
 8003434:	080033e1 	.word	0x080033e1
 8003438:	0800358b 	.word	0x0800358b
 800343c:	080033e1 	.word	0x080033e1
 8003440:	08003491 	.word	0x08003491
 8003444:	080033e1 	.word	0x080033e1
 8003448:	080033e1 	.word	0x080033e1
 800344c:	0800352b 	.word	0x0800352b
 8003450:	682b      	ldr	r3, [r5, #0]
 8003452:	1d1a      	adds	r2, r3, #4
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	602a      	str	r2, [r5, #0]
 8003458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800345c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003460:	2301      	movs	r3, #1
 8003462:	e09f      	b.n	80035a4 <_printf_i+0x1ec>
 8003464:	6820      	ldr	r0, [r4, #0]
 8003466:	682b      	ldr	r3, [r5, #0]
 8003468:	0607      	lsls	r7, r0, #24
 800346a:	f103 0104 	add.w	r1, r3, #4
 800346e:	6029      	str	r1, [r5, #0]
 8003470:	d501      	bpl.n	8003476 <_printf_i+0xbe>
 8003472:	681e      	ldr	r6, [r3, #0]
 8003474:	e003      	b.n	800347e <_printf_i+0xc6>
 8003476:	0646      	lsls	r6, r0, #25
 8003478:	d5fb      	bpl.n	8003472 <_printf_i+0xba>
 800347a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800347e:	2e00      	cmp	r6, #0
 8003480:	da03      	bge.n	800348a <_printf_i+0xd2>
 8003482:	232d      	movs	r3, #45	; 0x2d
 8003484:	4276      	negs	r6, r6
 8003486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800348a:	485a      	ldr	r0, [pc, #360]	; (80035f4 <_printf_i+0x23c>)
 800348c:	230a      	movs	r3, #10
 800348e:	e012      	b.n	80034b6 <_printf_i+0xfe>
 8003490:	682b      	ldr	r3, [r5, #0]
 8003492:	6820      	ldr	r0, [r4, #0]
 8003494:	1d19      	adds	r1, r3, #4
 8003496:	6029      	str	r1, [r5, #0]
 8003498:	0605      	lsls	r5, r0, #24
 800349a:	d501      	bpl.n	80034a0 <_printf_i+0xe8>
 800349c:	681e      	ldr	r6, [r3, #0]
 800349e:	e002      	b.n	80034a6 <_printf_i+0xee>
 80034a0:	0641      	lsls	r1, r0, #25
 80034a2:	d5fb      	bpl.n	800349c <_printf_i+0xe4>
 80034a4:	881e      	ldrh	r6, [r3, #0]
 80034a6:	4853      	ldr	r0, [pc, #332]	; (80035f4 <_printf_i+0x23c>)
 80034a8:	2f6f      	cmp	r7, #111	; 0x6f
 80034aa:	bf0c      	ite	eq
 80034ac:	2308      	moveq	r3, #8
 80034ae:	230a      	movne	r3, #10
 80034b0:	2100      	movs	r1, #0
 80034b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034b6:	6865      	ldr	r5, [r4, #4]
 80034b8:	60a5      	str	r5, [r4, #8]
 80034ba:	2d00      	cmp	r5, #0
 80034bc:	bfa2      	ittt	ge
 80034be:	6821      	ldrge	r1, [r4, #0]
 80034c0:	f021 0104 	bicge.w	r1, r1, #4
 80034c4:	6021      	strge	r1, [r4, #0]
 80034c6:	b90e      	cbnz	r6, 80034cc <_printf_i+0x114>
 80034c8:	2d00      	cmp	r5, #0
 80034ca:	d04b      	beq.n	8003564 <_printf_i+0x1ac>
 80034cc:	4615      	mov	r5, r2
 80034ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80034d2:	fb03 6711 	mls	r7, r3, r1, r6
 80034d6:	5dc7      	ldrb	r7, [r0, r7]
 80034d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80034dc:	4637      	mov	r7, r6
 80034de:	42bb      	cmp	r3, r7
 80034e0:	460e      	mov	r6, r1
 80034e2:	d9f4      	bls.n	80034ce <_printf_i+0x116>
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d10b      	bne.n	8003500 <_printf_i+0x148>
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	07de      	lsls	r6, r3, #31
 80034ec:	d508      	bpl.n	8003500 <_printf_i+0x148>
 80034ee:	6923      	ldr	r3, [r4, #16]
 80034f0:	6861      	ldr	r1, [r4, #4]
 80034f2:	4299      	cmp	r1, r3
 80034f4:	bfde      	ittt	le
 80034f6:	2330      	movle	r3, #48	; 0x30
 80034f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003500:	1b52      	subs	r2, r2, r5
 8003502:	6122      	str	r2, [r4, #16]
 8003504:	f8cd a000 	str.w	sl, [sp]
 8003508:	464b      	mov	r3, r9
 800350a:	aa03      	add	r2, sp, #12
 800350c:	4621      	mov	r1, r4
 800350e:	4640      	mov	r0, r8
 8003510:	f7ff fee4 	bl	80032dc <_printf_common>
 8003514:	3001      	adds	r0, #1
 8003516:	d14a      	bne.n	80035ae <_printf_i+0x1f6>
 8003518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800351c:	b004      	add	sp, #16
 800351e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003522:	6823      	ldr	r3, [r4, #0]
 8003524:	f043 0320 	orr.w	r3, r3, #32
 8003528:	6023      	str	r3, [r4, #0]
 800352a:	4833      	ldr	r0, [pc, #204]	; (80035f8 <_printf_i+0x240>)
 800352c:	2778      	movs	r7, #120	; 0x78
 800352e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	6829      	ldr	r1, [r5, #0]
 8003536:	061f      	lsls	r7, r3, #24
 8003538:	f851 6b04 	ldr.w	r6, [r1], #4
 800353c:	d402      	bmi.n	8003544 <_printf_i+0x18c>
 800353e:	065f      	lsls	r7, r3, #25
 8003540:	bf48      	it	mi
 8003542:	b2b6      	uxthmi	r6, r6
 8003544:	07df      	lsls	r7, r3, #31
 8003546:	bf48      	it	mi
 8003548:	f043 0320 	orrmi.w	r3, r3, #32
 800354c:	6029      	str	r1, [r5, #0]
 800354e:	bf48      	it	mi
 8003550:	6023      	strmi	r3, [r4, #0]
 8003552:	b91e      	cbnz	r6, 800355c <_printf_i+0x1a4>
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	f023 0320 	bic.w	r3, r3, #32
 800355a:	6023      	str	r3, [r4, #0]
 800355c:	2310      	movs	r3, #16
 800355e:	e7a7      	b.n	80034b0 <_printf_i+0xf8>
 8003560:	4824      	ldr	r0, [pc, #144]	; (80035f4 <_printf_i+0x23c>)
 8003562:	e7e4      	b.n	800352e <_printf_i+0x176>
 8003564:	4615      	mov	r5, r2
 8003566:	e7bd      	b.n	80034e4 <_printf_i+0x12c>
 8003568:	682b      	ldr	r3, [r5, #0]
 800356a:	6826      	ldr	r6, [r4, #0]
 800356c:	6961      	ldr	r1, [r4, #20]
 800356e:	1d18      	adds	r0, r3, #4
 8003570:	6028      	str	r0, [r5, #0]
 8003572:	0635      	lsls	r5, r6, #24
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	d501      	bpl.n	800357c <_printf_i+0x1c4>
 8003578:	6019      	str	r1, [r3, #0]
 800357a:	e002      	b.n	8003582 <_printf_i+0x1ca>
 800357c:	0670      	lsls	r0, r6, #25
 800357e:	d5fb      	bpl.n	8003578 <_printf_i+0x1c0>
 8003580:	8019      	strh	r1, [r3, #0]
 8003582:	2300      	movs	r3, #0
 8003584:	6123      	str	r3, [r4, #16]
 8003586:	4615      	mov	r5, r2
 8003588:	e7bc      	b.n	8003504 <_printf_i+0x14c>
 800358a:	682b      	ldr	r3, [r5, #0]
 800358c:	1d1a      	adds	r2, r3, #4
 800358e:	602a      	str	r2, [r5, #0]
 8003590:	681d      	ldr	r5, [r3, #0]
 8003592:	6862      	ldr	r2, [r4, #4]
 8003594:	2100      	movs	r1, #0
 8003596:	4628      	mov	r0, r5
 8003598:	f7fc fe1a 	bl	80001d0 <memchr>
 800359c:	b108      	cbz	r0, 80035a2 <_printf_i+0x1ea>
 800359e:	1b40      	subs	r0, r0, r5
 80035a0:	6060      	str	r0, [r4, #4]
 80035a2:	6863      	ldr	r3, [r4, #4]
 80035a4:	6123      	str	r3, [r4, #16]
 80035a6:	2300      	movs	r3, #0
 80035a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035ac:	e7aa      	b.n	8003504 <_printf_i+0x14c>
 80035ae:	6923      	ldr	r3, [r4, #16]
 80035b0:	462a      	mov	r2, r5
 80035b2:	4649      	mov	r1, r9
 80035b4:	4640      	mov	r0, r8
 80035b6:	47d0      	blx	sl
 80035b8:	3001      	adds	r0, #1
 80035ba:	d0ad      	beq.n	8003518 <_printf_i+0x160>
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	079b      	lsls	r3, r3, #30
 80035c0:	d413      	bmi.n	80035ea <_printf_i+0x232>
 80035c2:	68e0      	ldr	r0, [r4, #12]
 80035c4:	9b03      	ldr	r3, [sp, #12]
 80035c6:	4298      	cmp	r0, r3
 80035c8:	bfb8      	it	lt
 80035ca:	4618      	movlt	r0, r3
 80035cc:	e7a6      	b.n	800351c <_printf_i+0x164>
 80035ce:	2301      	movs	r3, #1
 80035d0:	4632      	mov	r2, r6
 80035d2:	4649      	mov	r1, r9
 80035d4:	4640      	mov	r0, r8
 80035d6:	47d0      	blx	sl
 80035d8:	3001      	adds	r0, #1
 80035da:	d09d      	beq.n	8003518 <_printf_i+0x160>
 80035dc:	3501      	adds	r5, #1
 80035de:	68e3      	ldr	r3, [r4, #12]
 80035e0:	9903      	ldr	r1, [sp, #12]
 80035e2:	1a5b      	subs	r3, r3, r1
 80035e4:	42ab      	cmp	r3, r5
 80035e6:	dcf2      	bgt.n	80035ce <_printf_i+0x216>
 80035e8:	e7eb      	b.n	80035c2 <_printf_i+0x20a>
 80035ea:	2500      	movs	r5, #0
 80035ec:	f104 0619 	add.w	r6, r4, #25
 80035f0:	e7f5      	b.n	80035de <_printf_i+0x226>
 80035f2:	bf00      	nop
 80035f4:	08005870 	.word	0x08005870
 80035f8:	08005881 	.word	0x08005881

080035fc <std>:
 80035fc:	2300      	movs	r3, #0
 80035fe:	b510      	push	{r4, lr}
 8003600:	4604      	mov	r4, r0
 8003602:	e9c0 3300 	strd	r3, r3, [r0]
 8003606:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800360a:	6083      	str	r3, [r0, #8]
 800360c:	8181      	strh	r1, [r0, #12]
 800360e:	6643      	str	r3, [r0, #100]	; 0x64
 8003610:	81c2      	strh	r2, [r0, #14]
 8003612:	6183      	str	r3, [r0, #24]
 8003614:	4619      	mov	r1, r3
 8003616:	2208      	movs	r2, #8
 8003618:	305c      	adds	r0, #92	; 0x5c
 800361a:	f000 f9e5 	bl	80039e8 <memset>
 800361e:	4b05      	ldr	r3, [pc, #20]	; (8003634 <std+0x38>)
 8003620:	6263      	str	r3, [r4, #36]	; 0x24
 8003622:	4b05      	ldr	r3, [pc, #20]	; (8003638 <std+0x3c>)
 8003624:	62a3      	str	r3, [r4, #40]	; 0x28
 8003626:	4b05      	ldr	r3, [pc, #20]	; (800363c <std+0x40>)
 8003628:	62e3      	str	r3, [r4, #44]	; 0x2c
 800362a:	4b05      	ldr	r3, [pc, #20]	; (8003640 <std+0x44>)
 800362c:	6224      	str	r4, [r4, #32]
 800362e:	6323      	str	r3, [r4, #48]	; 0x30
 8003630:	bd10      	pop	{r4, pc}
 8003632:	bf00      	nop
 8003634:	08003839 	.word	0x08003839
 8003638:	0800385b 	.word	0x0800385b
 800363c:	08003893 	.word	0x08003893
 8003640:	080038b7 	.word	0x080038b7

08003644 <stdio_exit_handler>:
 8003644:	4a02      	ldr	r2, [pc, #8]	; (8003650 <stdio_exit_handler+0xc>)
 8003646:	4903      	ldr	r1, [pc, #12]	; (8003654 <stdio_exit_handler+0x10>)
 8003648:	4803      	ldr	r0, [pc, #12]	; (8003658 <stdio_exit_handler+0x14>)
 800364a:	f000 b869 	b.w	8003720 <_fwalk_sglue>
 800364e:	bf00      	nop
 8003650:	20000014 	.word	0x20000014
 8003654:	080054c1 	.word	0x080054c1
 8003658:	20000020 	.word	0x20000020

0800365c <cleanup_stdio>:
 800365c:	6841      	ldr	r1, [r0, #4]
 800365e:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <cleanup_stdio+0x34>)
 8003660:	4299      	cmp	r1, r3
 8003662:	b510      	push	{r4, lr}
 8003664:	4604      	mov	r4, r0
 8003666:	d001      	beq.n	800366c <cleanup_stdio+0x10>
 8003668:	f001 ff2a 	bl	80054c0 <_fflush_r>
 800366c:	68a1      	ldr	r1, [r4, #8]
 800366e:	4b09      	ldr	r3, [pc, #36]	; (8003694 <cleanup_stdio+0x38>)
 8003670:	4299      	cmp	r1, r3
 8003672:	d002      	beq.n	800367a <cleanup_stdio+0x1e>
 8003674:	4620      	mov	r0, r4
 8003676:	f001 ff23 	bl	80054c0 <_fflush_r>
 800367a:	68e1      	ldr	r1, [r4, #12]
 800367c:	4b06      	ldr	r3, [pc, #24]	; (8003698 <cleanup_stdio+0x3c>)
 800367e:	4299      	cmp	r1, r3
 8003680:	d004      	beq.n	800368c <cleanup_stdio+0x30>
 8003682:	4620      	mov	r0, r4
 8003684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003688:	f001 bf1a 	b.w	80054c0 <_fflush_r>
 800368c:	bd10      	pop	{r4, pc}
 800368e:	bf00      	nop
 8003690:	2000033c 	.word	0x2000033c
 8003694:	200003a4 	.word	0x200003a4
 8003698:	2000040c 	.word	0x2000040c

0800369c <global_stdio_init.part.0>:
 800369c:	b510      	push	{r4, lr}
 800369e:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <global_stdio_init.part.0+0x30>)
 80036a0:	4c0b      	ldr	r4, [pc, #44]	; (80036d0 <global_stdio_init.part.0+0x34>)
 80036a2:	4a0c      	ldr	r2, [pc, #48]	; (80036d4 <global_stdio_init.part.0+0x38>)
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	4620      	mov	r0, r4
 80036a8:	2200      	movs	r2, #0
 80036aa:	2104      	movs	r1, #4
 80036ac:	f7ff ffa6 	bl	80035fc <std>
 80036b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80036b4:	2201      	movs	r2, #1
 80036b6:	2109      	movs	r1, #9
 80036b8:	f7ff ffa0 	bl	80035fc <std>
 80036bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80036c0:	2202      	movs	r2, #2
 80036c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036c6:	2112      	movs	r1, #18
 80036c8:	f7ff bf98 	b.w	80035fc <std>
 80036cc:	20000474 	.word	0x20000474
 80036d0:	2000033c 	.word	0x2000033c
 80036d4:	08003645 	.word	0x08003645

080036d8 <__sfp_lock_acquire>:
 80036d8:	4801      	ldr	r0, [pc, #4]	; (80036e0 <__sfp_lock_acquire+0x8>)
 80036da:	f000 ba01 	b.w	8003ae0 <__retarget_lock_acquire_recursive>
 80036de:	bf00      	nop
 80036e0:	2000047d 	.word	0x2000047d

080036e4 <__sfp_lock_release>:
 80036e4:	4801      	ldr	r0, [pc, #4]	; (80036ec <__sfp_lock_release+0x8>)
 80036e6:	f000 b9fc 	b.w	8003ae2 <__retarget_lock_release_recursive>
 80036ea:	bf00      	nop
 80036ec:	2000047d 	.word	0x2000047d

080036f0 <__sinit>:
 80036f0:	b510      	push	{r4, lr}
 80036f2:	4604      	mov	r4, r0
 80036f4:	f7ff fff0 	bl	80036d8 <__sfp_lock_acquire>
 80036f8:	6a23      	ldr	r3, [r4, #32]
 80036fa:	b11b      	cbz	r3, 8003704 <__sinit+0x14>
 80036fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003700:	f7ff bff0 	b.w	80036e4 <__sfp_lock_release>
 8003704:	4b04      	ldr	r3, [pc, #16]	; (8003718 <__sinit+0x28>)
 8003706:	6223      	str	r3, [r4, #32]
 8003708:	4b04      	ldr	r3, [pc, #16]	; (800371c <__sinit+0x2c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f5      	bne.n	80036fc <__sinit+0xc>
 8003710:	f7ff ffc4 	bl	800369c <global_stdio_init.part.0>
 8003714:	e7f2      	b.n	80036fc <__sinit+0xc>
 8003716:	bf00      	nop
 8003718:	0800365d 	.word	0x0800365d
 800371c:	20000474 	.word	0x20000474

08003720 <_fwalk_sglue>:
 8003720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003724:	4607      	mov	r7, r0
 8003726:	4688      	mov	r8, r1
 8003728:	4614      	mov	r4, r2
 800372a:	2600      	movs	r6, #0
 800372c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003730:	f1b9 0901 	subs.w	r9, r9, #1
 8003734:	d505      	bpl.n	8003742 <_fwalk_sglue+0x22>
 8003736:	6824      	ldr	r4, [r4, #0]
 8003738:	2c00      	cmp	r4, #0
 800373a:	d1f7      	bne.n	800372c <_fwalk_sglue+0xc>
 800373c:	4630      	mov	r0, r6
 800373e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003742:	89ab      	ldrh	r3, [r5, #12]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d907      	bls.n	8003758 <_fwalk_sglue+0x38>
 8003748:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800374c:	3301      	adds	r3, #1
 800374e:	d003      	beq.n	8003758 <_fwalk_sglue+0x38>
 8003750:	4629      	mov	r1, r5
 8003752:	4638      	mov	r0, r7
 8003754:	47c0      	blx	r8
 8003756:	4306      	orrs	r6, r0
 8003758:	3568      	adds	r5, #104	; 0x68
 800375a:	e7e9      	b.n	8003730 <_fwalk_sglue+0x10>

0800375c <iprintf>:
 800375c:	b40f      	push	{r0, r1, r2, r3}
 800375e:	b507      	push	{r0, r1, r2, lr}
 8003760:	4906      	ldr	r1, [pc, #24]	; (800377c <iprintf+0x20>)
 8003762:	ab04      	add	r3, sp, #16
 8003764:	6808      	ldr	r0, [r1, #0]
 8003766:	f853 2b04 	ldr.w	r2, [r3], #4
 800376a:	6881      	ldr	r1, [r0, #8]
 800376c:	9301      	str	r3, [sp, #4]
 800376e:	f001 fd07 	bl	8005180 <_vfiprintf_r>
 8003772:	b003      	add	sp, #12
 8003774:	f85d eb04 	ldr.w	lr, [sp], #4
 8003778:	b004      	add	sp, #16
 800377a:	4770      	bx	lr
 800377c:	2000006c 	.word	0x2000006c

08003780 <_puts_r>:
 8003780:	6a03      	ldr	r3, [r0, #32]
 8003782:	b570      	push	{r4, r5, r6, lr}
 8003784:	6884      	ldr	r4, [r0, #8]
 8003786:	4605      	mov	r5, r0
 8003788:	460e      	mov	r6, r1
 800378a:	b90b      	cbnz	r3, 8003790 <_puts_r+0x10>
 800378c:	f7ff ffb0 	bl	80036f0 <__sinit>
 8003790:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003792:	07db      	lsls	r3, r3, #31
 8003794:	d405      	bmi.n	80037a2 <_puts_r+0x22>
 8003796:	89a3      	ldrh	r3, [r4, #12]
 8003798:	0598      	lsls	r0, r3, #22
 800379a:	d402      	bmi.n	80037a2 <_puts_r+0x22>
 800379c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800379e:	f000 f99f 	bl	8003ae0 <__retarget_lock_acquire_recursive>
 80037a2:	89a3      	ldrh	r3, [r4, #12]
 80037a4:	0719      	lsls	r1, r3, #28
 80037a6:	d513      	bpl.n	80037d0 <_puts_r+0x50>
 80037a8:	6923      	ldr	r3, [r4, #16]
 80037aa:	b18b      	cbz	r3, 80037d0 <_puts_r+0x50>
 80037ac:	3e01      	subs	r6, #1
 80037ae:	68a3      	ldr	r3, [r4, #8]
 80037b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80037b4:	3b01      	subs	r3, #1
 80037b6:	60a3      	str	r3, [r4, #8]
 80037b8:	b9e9      	cbnz	r1, 80037f6 <_puts_r+0x76>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	da2e      	bge.n	800381c <_puts_r+0x9c>
 80037be:	4622      	mov	r2, r4
 80037c0:	210a      	movs	r1, #10
 80037c2:	4628      	mov	r0, r5
 80037c4:	f000 f87b 	bl	80038be <__swbuf_r>
 80037c8:	3001      	adds	r0, #1
 80037ca:	d007      	beq.n	80037dc <_puts_r+0x5c>
 80037cc:	250a      	movs	r5, #10
 80037ce:	e007      	b.n	80037e0 <_puts_r+0x60>
 80037d0:	4621      	mov	r1, r4
 80037d2:	4628      	mov	r0, r5
 80037d4:	f000 f8b0 	bl	8003938 <__swsetup_r>
 80037d8:	2800      	cmp	r0, #0
 80037da:	d0e7      	beq.n	80037ac <_puts_r+0x2c>
 80037dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80037e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037e2:	07da      	lsls	r2, r3, #31
 80037e4:	d405      	bmi.n	80037f2 <_puts_r+0x72>
 80037e6:	89a3      	ldrh	r3, [r4, #12]
 80037e8:	059b      	lsls	r3, r3, #22
 80037ea:	d402      	bmi.n	80037f2 <_puts_r+0x72>
 80037ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037ee:	f000 f978 	bl	8003ae2 <__retarget_lock_release_recursive>
 80037f2:	4628      	mov	r0, r5
 80037f4:	bd70      	pop	{r4, r5, r6, pc}
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	da04      	bge.n	8003804 <_puts_r+0x84>
 80037fa:	69a2      	ldr	r2, [r4, #24]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	dc06      	bgt.n	800380e <_puts_r+0x8e>
 8003800:	290a      	cmp	r1, #10
 8003802:	d004      	beq.n	800380e <_puts_r+0x8e>
 8003804:	6823      	ldr	r3, [r4, #0]
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	6022      	str	r2, [r4, #0]
 800380a:	7019      	strb	r1, [r3, #0]
 800380c:	e7cf      	b.n	80037ae <_puts_r+0x2e>
 800380e:	4622      	mov	r2, r4
 8003810:	4628      	mov	r0, r5
 8003812:	f000 f854 	bl	80038be <__swbuf_r>
 8003816:	3001      	adds	r0, #1
 8003818:	d1c9      	bne.n	80037ae <_puts_r+0x2e>
 800381a:	e7df      	b.n	80037dc <_puts_r+0x5c>
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	250a      	movs	r5, #10
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	6022      	str	r2, [r4, #0]
 8003824:	701d      	strb	r5, [r3, #0]
 8003826:	e7db      	b.n	80037e0 <_puts_r+0x60>

08003828 <puts>:
 8003828:	4b02      	ldr	r3, [pc, #8]	; (8003834 <puts+0xc>)
 800382a:	4601      	mov	r1, r0
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	f7ff bfa7 	b.w	8003780 <_puts_r>
 8003832:	bf00      	nop
 8003834:	2000006c 	.word	0x2000006c

08003838 <__sread>:
 8003838:	b510      	push	{r4, lr}
 800383a:	460c      	mov	r4, r1
 800383c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003840:	f000 f900 	bl	8003a44 <_read_r>
 8003844:	2800      	cmp	r0, #0
 8003846:	bfab      	itete	ge
 8003848:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800384a:	89a3      	ldrhlt	r3, [r4, #12]
 800384c:	181b      	addge	r3, r3, r0
 800384e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003852:	bfac      	ite	ge
 8003854:	6563      	strge	r3, [r4, #84]	; 0x54
 8003856:	81a3      	strhlt	r3, [r4, #12]
 8003858:	bd10      	pop	{r4, pc}

0800385a <__swrite>:
 800385a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800385e:	461f      	mov	r7, r3
 8003860:	898b      	ldrh	r3, [r1, #12]
 8003862:	05db      	lsls	r3, r3, #23
 8003864:	4605      	mov	r5, r0
 8003866:	460c      	mov	r4, r1
 8003868:	4616      	mov	r6, r2
 800386a:	d505      	bpl.n	8003878 <__swrite+0x1e>
 800386c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003870:	2302      	movs	r3, #2
 8003872:	2200      	movs	r2, #0
 8003874:	f000 f8d4 	bl	8003a20 <_lseek_r>
 8003878:	89a3      	ldrh	r3, [r4, #12]
 800387a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800387e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003882:	81a3      	strh	r3, [r4, #12]
 8003884:	4632      	mov	r2, r6
 8003886:	463b      	mov	r3, r7
 8003888:	4628      	mov	r0, r5
 800388a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800388e:	f000 b8eb 	b.w	8003a68 <_write_r>

08003892 <__sseek>:
 8003892:	b510      	push	{r4, lr}
 8003894:	460c      	mov	r4, r1
 8003896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800389a:	f000 f8c1 	bl	8003a20 <_lseek_r>
 800389e:	1c43      	adds	r3, r0, #1
 80038a0:	89a3      	ldrh	r3, [r4, #12]
 80038a2:	bf15      	itete	ne
 80038a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80038a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80038aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80038ae:	81a3      	strheq	r3, [r4, #12]
 80038b0:	bf18      	it	ne
 80038b2:	81a3      	strhne	r3, [r4, #12]
 80038b4:	bd10      	pop	{r4, pc}

080038b6 <__sclose>:
 80038b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038ba:	f000 b8a1 	b.w	8003a00 <_close_r>

080038be <__swbuf_r>:
 80038be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c0:	460e      	mov	r6, r1
 80038c2:	4614      	mov	r4, r2
 80038c4:	4605      	mov	r5, r0
 80038c6:	b118      	cbz	r0, 80038d0 <__swbuf_r+0x12>
 80038c8:	6a03      	ldr	r3, [r0, #32]
 80038ca:	b90b      	cbnz	r3, 80038d0 <__swbuf_r+0x12>
 80038cc:	f7ff ff10 	bl	80036f0 <__sinit>
 80038d0:	69a3      	ldr	r3, [r4, #24]
 80038d2:	60a3      	str	r3, [r4, #8]
 80038d4:	89a3      	ldrh	r3, [r4, #12]
 80038d6:	071a      	lsls	r2, r3, #28
 80038d8:	d525      	bpl.n	8003926 <__swbuf_r+0x68>
 80038da:	6923      	ldr	r3, [r4, #16]
 80038dc:	b31b      	cbz	r3, 8003926 <__swbuf_r+0x68>
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	6922      	ldr	r2, [r4, #16]
 80038e2:	1a98      	subs	r0, r3, r2
 80038e4:	6963      	ldr	r3, [r4, #20]
 80038e6:	b2f6      	uxtb	r6, r6
 80038e8:	4283      	cmp	r3, r0
 80038ea:	4637      	mov	r7, r6
 80038ec:	dc04      	bgt.n	80038f8 <__swbuf_r+0x3a>
 80038ee:	4621      	mov	r1, r4
 80038f0:	4628      	mov	r0, r5
 80038f2:	f001 fde5 	bl	80054c0 <_fflush_r>
 80038f6:	b9e0      	cbnz	r0, 8003932 <__swbuf_r+0x74>
 80038f8:	68a3      	ldr	r3, [r4, #8]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	60a3      	str	r3, [r4, #8]
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	6022      	str	r2, [r4, #0]
 8003904:	701e      	strb	r6, [r3, #0]
 8003906:	6962      	ldr	r2, [r4, #20]
 8003908:	1c43      	adds	r3, r0, #1
 800390a:	429a      	cmp	r2, r3
 800390c:	d004      	beq.n	8003918 <__swbuf_r+0x5a>
 800390e:	89a3      	ldrh	r3, [r4, #12]
 8003910:	07db      	lsls	r3, r3, #31
 8003912:	d506      	bpl.n	8003922 <__swbuf_r+0x64>
 8003914:	2e0a      	cmp	r6, #10
 8003916:	d104      	bne.n	8003922 <__swbuf_r+0x64>
 8003918:	4621      	mov	r1, r4
 800391a:	4628      	mov	r0, r5
 800391c:	f001 fdd0 	bl	80054c0 <_fflush_r>
 8003920:	b938      	cbnz	r0, 8003932 <__swbuf_r+0x74>
 8003922:	4638      	mov	r0, r7
 8003924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003926:	4621      	mov	r1, r4
 8003928:	4628      	mov	r0, r5
 800392a:	f000 f805 	bl	8003938 <__swsetup_r>
 800392e:	2800      	cmp	r0, #0
 8003930:	d0d5      	beq.n	80038de <__swbuf_r+0x20>
 8003932:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003936:	e7f4      	b.n	8003922 <__swbuf_r+0x64>

08003938 <__swsetup_r>:
 8003938:	b538      	push	{r3, r4, r5, lr}
 800393a:	4b2a      	ldr	r3, [pc, #168]	; (80039e4 <__swsetup_r+0xac>)
 800393c:	4605      	mov	r5, r0
 800393e:	6818      	ldr	r0, [r3, #0]
 8003940:	460c      	mov	r4, r1
 8003942:	b118      	cbz	r0, 800394c <__swsetup_r+0x14>
 8003944:	6a03      	ldr	r3, [r0, #32]
 8003946:	b90b      	cbnz	r3, 800394c <__swsetup_r+0x14>
 8003948:	f7ff fed2 	bl	80036f0 <__sinit>
 800394c:	89a3      	ldrh	r3, [r4, #12]
 800394e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003952:	0718      	lsls	r0, r3, #28
 8003954:	d422      	bmi.n	800399c <__swsetup_r+0x64>
 8003956:	06d9      	lsls	r1, r3, #27
 8003958:	d407      	bmi.n	800396a <__swsetup_r+0x32>
 800395a:	2309      	movs	r3, #9
 800395c:	602b      	str	r3, [r5, #0]
 800395e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003962:	81a3      	strh	r3, [r4, #12]
 8003964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003968:	e034      	b.n	80039d4 <__swsetup_r+0x9c>
 800396a:	0758      	lsls	r0, r3, #29
 800396c:	d512      	bpl.n	8003994 <__swsetup_r+0x5c>
 800396e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003970:	b141      	cbz	r1, 8003984 <__swsetup_r+0x4c>
 8003972:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003976:	4299      	cmp	r1, r3
 8003978:	d002      	beq.n	8003980 <__swsetup_r+0x48>
 800397a:	4628      	mov	r0, r5
 800397c:	f000 ff5a 	bl	8004834 <_free_r>
 8003980:	2300      	movs	r3, #0
 8003982:	6363      	str	r3, [r4, #52]	; 0x34
 8003984:	89a3      	ldrh	r3, [r4, #12]
 8003986:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800398a:	81a3      	strh	r3, [r4, #12]
 800398c:	2300      	movs	r3, #0
 800398e:	6063      	str	r3, [r4, #4]
 8003990:	6923      	ldr	r3, [r4, #16]
 8003992:	6023      	str	r3, [r4, #0]
 8003994:	89a3      	ldrh	r3, [r4, #12]
 8003996:	f043 0308 	orr.w	r3, r3, #8
 800399a:	81a3      	strh	r3, [r4, #12]
 800399c:	6923      	ldr	r3, [r4, #16]
 800399e:	b94b      	cbnz	r3, 80039b4 <__swsetup_r+0x7c>
 80039a0:	89a3      	ldrh	r3, [r4, #12]
 80039a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80039a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039aa:	d003      	beq.n	80039b4 <__swsetup_r+0x7c>
 80039ac:	4621      	mov	r1, r4
 80039ae:	4628      	mov	r0, r5
 80039b0:	f001 fde6 	bl	8005580 <__smakebuf_r>
 80039b4:	89a0      	ldrh	r0, [r4, #12]
 80039b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80039ba:	f010 0301 	ands.w	r3, r0, #1
 80039be:	d00a      	beq.n	80039d6 <__swsetup_r+0x9e>
 80039c0:	2300      	movs	r3, #0
 80039c2:	60a3      	str	r3, [r4, #8]
 80039c4:	6963      	ldr	r3, [r4, #20]
 80039c6:	425b      	negs	r3, r3
 80039c8:	61a3      	str	r3, [r4, #24]
 80039ca:	6923      	ldr	r3, [r4, #16]
 80039cc:	b943      	cbnz	r3, 80039e0 <__swsetup_r+0xa8>
 80039ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80039d2:	d1c4      	bne.n	800395e <__swsetup_r+0x26>
 80039d4:	bd38      	pop	{r3, r4, r5, pc}
 80039d6:	0781      	lsls	r1, r0, #30
 80039d8:	bf58      	it	pl
 80039da:	6963      	ldrpl	r3, [r4, #20]
 80039dc:	60a3      	str	r3, [r4, #8]
 80039de:	e7f4      	b.n	80039ca <__swsetup_r+0x92>
 80039e0:	2000      	movs	r0, #0
 80039e2:	e7f7      	b.n	80039d4 <__swsetup_r+0x9c>
 80039e4:	2000006c 	.word	0x2000006c

080039e8 <memset>:
 80039e8:	4402      	add	r2, r0
 80039ea:	4603      	mov	r3, r0
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d100      	bne.n	80039f2 <memset+0xa>
 80039f0:	4770      	bx	lr
 80039f2:	f803 1b01 	strb.w	r1, [r3], #1
 80039f6:	e7f9      	b.n	80039ec <memset+0x4>

080039f8 <_localeconv_r>:
 80039f8:	4800      	ldr	r0, [pc, #0]	; (80039fc <_localeconv_r+0x4>)
 80039fa:	4770      	bx	lr
 80039fc:	20000160 	.word	0x20000160

08003a00 <_close_r>:
 8003a00:	b538      	push	{r3, r4, r5, lr}
 8003a02:	4d06      	ldr	r5, [pc, #24]	; (8003a1c <_close_r+0x1c>)
 8003a04:	2300      	movs	r3, #0
 8003a06:	4604      	mov	r4, r0
 8003a08:	4608      	mov	r0, r1
 8003a0a:	602b      	str	r3, [r5, #0]
 8003a0c:	f7fe ffc4 	bl	8002998 <_close>
 8003a10:	1c43      	adds	r3, r0, #1
 8003a12:	d102      	bne.n	8003a1a <_close_r+0x1a>
 8003a14:	682b      	ldr	r3, [r5, #0]
 8003a16:	b103      	cbz	r3, 8003a1a <_close_r+0x1a>
 8003a18:	6023      	str	r3, [r4, #0]
 8003a1a:	bd38      	pop	{r3, r4, r5, pc}
 8003a1c:	20000478 	.word	0x20000478

08003a20 <_lseek_r>:
 8003a20:	b538      	push	{r3, r4, r5, lr}
 8003a22:	4d07      	ldr	r5, [pc, #28]	; (8003a40 <_lseek_r+0x20>)
 8003a24:	4604      	mov	r4, r0
 8003a26:	4608      	mov	r0, r1
 8003a28:	4611      	mov	r1, r2
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	602a      	str	r2, [r5, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	f7fe ff6f 	bl	8002912 <_lseek>
 8003a34:	1c43      	adds	r3, r0, #1
 8003a36:	d102      	bne.n	8003a3e <_lseek_r+0x1e>
 8003a38:	682b      	ldr	r3, [r5, #0]
 8003a3a:	b103      	cbz	r3, 8003a3e <_lseek_r+0x1e>
 8003a3c:	6023      	str	r3, [r4, #0]
 8003a3e:	bd38      	pop	{r3, r4, r5, pc}
 8003a40:	20000478 	.word	0x20000478

08003a44 <_read_r>:
 8003a44:	b538      	push	{r3, r4, r5, lr}
 8003a46:	4d07      	ldr	r5, [pc, #28]	; (8003a64 <_read_r+0x20>)
 8003a48:	4604      	mov	r4, r0
 8003a4a:	4608      	mov	r0, r1
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	2200      	movs	r2, #0
 8003a50:	602a      	str	r2, [r5, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	f7fe ff05 	bl	8002862 <_read>
 8003a58:	1c43      	adds	r3, r0, #1
 8003a5a:	d102      	bne.n	8003a62 <_read_r+0x1e>
 8003a5c:	682b      	ldr	r3, [r5, #0]
 8003a5e:	b103      	cbz	r3, 8003a62 <_read_r+0x1e>
 8003a60:	6023      	str	r3, [r4, #0]
 8003a62:	bd38      	pop	{r3, r4, r5, pc}
 8003a64:	20000478 	.word	0x20000478

08003a68 <_write_r>:
 8003a68:	b538      	push	{r3, r4, r5, lr}
 8003a6a:	4d07      	ldr	r5, [pc, #28]	; (8003a88 <_write_r+0x20>)
 8003a6c:	4604      	mov	r4, r0
 8003a6e:	4608      	mov	r0, r1
 8003a70:	4611      	mov	r1, r2
 8003a72:	2200      	movs	r2, #0
 8003a74:	602a      	str	r2, [r5, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	f7fe ff5d 	bl	8002936 <_write>
 8003a7c:	1c43      	adds	r3, r0, #1
 8003a7e:	d102      	bne.n	8003a86 <_write_r+0x1e>
 8003a80:	682b      	ldr	r3, [r5, #0]
 8003a82:	b103      	cbz	r3, 8003a86 <_write_r+0x1e>
 8003a84:	6023      	str	r3, [r4, #0]
 8003a86:	bd38      	pop	{r3, r4, r5, pc}
 8003a88:	20000478 	.word	0x20000478

08003a8c <__errno>:
 8003a8c:	4b01      	ldr	r3, [pc, #4]	; (8003a94 <__errno+0x8>)
 8003a8e:	6818      	ldr	r0, [r3, #0]
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	2000006c 	.word	0x2000006c

08003a98 <__libc_init_array>:
 8003a98:	b570      	push	{r4, r5, r6, lr}
 8003a9a:	4d0d      	ldr	r5, [pc, #52]	; (8003ad0 <__libc_init_array+0x38>)
 8003a9c:	4c0d      	ldr	r4, [pc, #52]	; (8003ad4 <__libc_init_array+0x3c>)
 8003a9e:	1b64      	subs	r4, r4, r5
 8003aa0:	10a4      	asrs	r4, r4, #2
 8003aa2:	2600      	movs	r6, #0
 8003aa4:	42a6      	cmp	r6, r4
 8003aa6:	d109      	bne.n	8003abc <__libc_init_array+0x24>
 8003aa8:	4d0b      	ldr	r5, [pc, #44]	; (8003ad8 <__libc_init_array+0x40>)
 8003aaa:	4c0c      	ldr	r4, [pc, #48]	; (8003adc <__libc_init_array+0x44>)
 8003aac:	f001 fe60 	bl	8005770 <_init>
 8003ab0:	1b64      	subs	r4, r4, r5
 8003ab2:	10a4      	asrs	r4, r4, #2
 8003ab4:	2600      	movs	r6, #0
 8003ab6:	42a6      	cmp	r6, r4
 8003ab8:	d105      	bne.n	8003ac6 <__libc_init_array+0x2e>
 8003aba:	bd70      	pop	{r4, r5, r6, pc}
 8003abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ac0:	4798      	blx	r3
 8003ac2:	3601      	adds	r6, #1
 8003ac4:	e7ee      	b.n	8003aa4 <__libc_init_array+0xc>
 8003ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aca:	4798      	blx	r3
 8003acc:	3601      	adds	r6, #1
 8003ace:	e7f2      	b.n	8003ab6 <__libc_init_array+0x1e>
 8003ad0:	08005bd8 	.word	0x08005bd8
 8003ad4:	08005bd8 	.word	0x08005bd8
 8003ad8:	08005bd8 	.word	0x08005bd8
 8003adc:	08005bdc 	.word	0x08005bdc

08003ae0 <__retarget_lock_acquire_recursive>:
 8003ae0:	4770      	bx	lr

08003ae2 <__retarget_lock_release_recursive>:
 8003ae2:	4770      	bx	lr

08003ae4 <memcpy>:
 8003ae4:	440a      	add	r2, r1
 8003ae6:	4291      	cmp	r1, r2
 8003ae8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003aec:	d100      	bne.n	8003af0 <memcpy+0xc>
 8003aee:	4770      	bx	lr
 8003af0:	b510      	push	{r4, lr}
 8003af2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003af6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003afa:	4291      	cmp	r1, r2
 8003afc:	d1f9      	bne.n	8003af2 <memcpy+0xe>
 8003afe:	bd10      	pop	{r4, pc}

08003b00 <__assert_func>:
 8003b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003b02:	4614      	mov	r4, r2
 8003b04:	461a      	mov	r2, r3
 8003b06:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <__assert_func+0x2c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4605      	mov	r5, r0
 8003b0c:	68d8      	ldr	r0, [r3, #12]
 8003b0e:	b14c      	cbz	r4, 8003b24 <__assert_func+0x24>
 8003b10:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <__assert_func+0x30>)
 8003b12:	9100      	str	r1, [sp, #0]
 8003b14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003b18:	4906      	ldr	r1, [pc, #24]	; (8003b34 <__assert_func+0x34>)
 8003b1a:	462b      	mov	r3, r5
 8003b1c:	f001 fcf8 	bl	8005510 <fiprintf>
 8003b20:	f001 fd9c 	bl	800565c <abort>
 8003b24:	4b04      	ldr	r3, [pc, #16]	; (8003b38 <__assert_func+0x38>)
 8003b26:	461c      	mov	r4, r3
 8003b28:	e7f3      	b.n	8003b12 <__assert_func+0x12>
 8003b2a:	bf00      	nop
 8003b2c:	2000006c 	.word	0x2000006c
 8003b30:	08005892 	.word	0x08005892
 8003b34:	0800589f 	.word	0x0800589f
 8003b38:	080058cd 	.word	0x080058cd

08003b3c <quorem>:
 8003b3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b40:	6903      	ldr	r3, [r0, #16]
 8003b42:	690c      	ldr	r4, [r1, #16]
 8003b44:	42a3      	cmp	r3, r4
 8003b46:	4607      	mov	r7, r0
 8003b48:	db7e      	blt.n	8003c48 <quorem+0x10c>
 8003b4a:	3c01      	subs	r4, #1
 8003b4c:	f101 0814 	add.w	r8, r1, #20
 8003b50:	f100 0514 	add.w	r5, r0, #20
 8003b54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b58:	9301      	str	r3, [sp, #4]
 8003b5a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003b5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b62:	3301      	adds	r3, #1
 8003b64:	429a      	cmp	r2, r3
 8003b66:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003b6a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003b6e:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b72:	d331      	bcc.n	8003bd8 <quorem+0x9c>
 8003b74:	f04f 0e00 	mov.w	lr, #0
 8003b78:	4640      	mov	r0, r8
 8003b7a:	46ac      	mov	ip, r5
 8003b7c:	46f2      	mov	sl, lr
 8003b7e:	f850 2b04 	ldr.w	r2, [r0], #4
 8003b82:	b293      	uxth	r3, r2
 8003b84:	fb06 e303 	mla	r3, r6, r3, lr
 8003b88:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003b8c:	0c1a      	lsrs	r2, r3, #16
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	ebaa 0303 	sub.w	r3, sl, r3
 8003b94:	f8dc a000 	ldr.w	sl, [ip]
 8003b98:	fa13 f38a 	uxtah	r3, r3, sl
 8003b9c:	fb06 220e 	mla	r2, r6, lr, r2
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	9b00      	ldr	r3, [sp, #0]
 8003ba4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003ba8:	b292      	uxth	r2, r2
 8003baa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003bae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003bb2:	f8bd 3000 	ldrh.w	r3, [sp]
 8003bb6:	4581      	cmp	r9, r0
 8003bb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003bbc:	f84c 3b04 	str.w	r3, [ip], #4
 8003bc0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003bc4:	d2db      	bcs.n	8003b7e <quorem+0x42>
 8003bc6:	f855 300b 	ldr.w	r3, [r5, fp]
 8003bca:	b92b      	cbnz	r3, 8003bd8 <quorem+0x9c>
 8003bcc:	9b01      	ldr	r3, [sp, #4]
 8003bce:	3b04      	subs	r3, #4
 8003bd0:	429d      	cmp	r5, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	d32c      	bcc.n	8003c30 <quorem+0xf4>
 8003bd6:	613c      	str	r4, [r7, #16]
 8003bd8:	4638      	mov	r0, r7
 8003bda:	f001 f9a7 	bl	8004f2c <__mcmp>
 8003bde:	2800      	cmp	r0, #0
 8003be0:	db22      	blt.n	8003c28 <quorem+0xec>
 8003be2:	3601      	adds	r6, #1
 8003be4:	4629      	mov	r1, r5
 8003be6:	2000      	movs	r0, #0
 8003be8:	f858 2b04 	ldr.w	r2, [r8], #4
 8003bec:	f8d1 c000 	ldr.w	ip, [r1]
 8003bf0:	b293      	uxth	r3, r2
 8003bf2:	1ac3      	subs	r3, r0, r3
 8003bf4:	0c12      	lsrs	r2, r2, #16
 8003bf6:	fa13 f38c 	uxtah	r3, r3, ip
 8003bfa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003bfe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c08:	45c1      	cmp	r9, r8
 8003c0a:	f841 3b04 	str.w	r3, [r1], #4
 8003c0e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003c12:	d2e9      	bcs.n	8003be8 <quorem+0xac>
 8003c14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c1c:	b922      	cbnz	r2, 8003c28 <quorem+0xec>
 8003c1e:	3b04      	subs	r3, #4
 8003c20:	429d      	cmp	r5, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	d30a      	bcc.n	8003c3c <quorem+0x100>
 8003c26:	613c      	str	r4, [r7, #16]
 8003c28:	4630      	mov	r0, r6
 8003c2a:	b003      	add	sp, #12
 8003c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c30:	6812      	ldr	r2, [r2, #0]
 8003c32:	3b04      	subs	r3, #4
 8003c34:	2a00      	cmp	r2, #0
 8003c36:	d1ce      	bne.n	8003bd6 <quorem+0x9a>
 8003c38:	3c01      	subs	r4, #1
 8003c3a:	e7c9      	b.n	8003bd0 <quorem+0x94>
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	3b04      	subs	r3, #4
 8003c40:	2a00      	cmp	r2, #0
 8003c42:	d1f0      	bne.n	8003c26 <quorem+0xea>
 8003c44:	3c01      	subs	r4, #1
 8003c46:	e7eb      	b.n	8003c20 <quorem+0xe4>
 8003c48:	2000      	movs	r0, #0
 8003c4a:	e7ee      	b.n	8003c2a <quorem+0xee>
 8003c4c:	0000      	movs	r0, r0
	...

08003c50 <_dtoa_r>:
 8003c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c54:	ed2d 8b04 	vpush	{d8-d9}
 8003c58:	69c5      	ldr	r5, [r0, #28]
 8003c5a:	b093      	sub	sp, #76	; 0x4c
 8003c5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003c60:	ec57 6b10 	vmov	r6, r7, d0
 8003c64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003c68:	9107      	str	r1, [sp, #28]
 8003c6a:	4604      	mov	r4, r0
 8003c6c:	920a      	str	r2, [sp, #40]	; 0x28
 8003c6e:	930d      	str	r3, [sp, #52]	; 0x34
 8003c70:	b975      	cbnz	r5, 8003c90 <_dtoa_r+0x40>
 8003c72:	2010      	movs	r0, #16
 8003c74:	f000 fe2a 	bl	80048cc <malloc>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	61e0      	str	r0, [r4, #28]
 8003c7c:	b920      	cbnz	r0, 8003c88 <_dtoa_r+0x38>
 8003c7e:	4bae      	ldr	r3, [pc, #696]	; (8003f38 <_dtoa_r+0x2e8>)
 8003c80:	21ef      	movs	r1, #239	; 0xef
 8003c82:	48ae      	ldr	r0, [pc, #696]	; (8003f3c <_dtoa_r+0x2ec>)
 8003c84:	f7ff ff3c 	bl	8003b00 <__assert_func>
 8003c88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003c8c:	6005      	str	r5, [r0, #0]
 8003c8e:	60c5      	str	r5, [r0, #12]
 8003c90:	69e3      	ldr	r3, [r4, #28]
 8003c92:	6819      	ldr	r1, [r3, #0]
 8003c94:	b151      	cbz	r1, 8003cac <_dtoa_r+0x5c>
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	604a      	str	r2, [r1, #4]
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	4093      	lsls	r3, r2
 8003c9e:	608b      	str	r3, [r1, #8]
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	f000 ff07 	bl	8004ab4 <_Bfree>
 8003ca6:	69e3      	ldr	r3, [r4, #28]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	1e3b      	subs	r3, r7, #0
 8003cae:	bfbb      	ittet	lt
 8003cb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003cb4:	9303      	strlt	r3, [sp, #12]
 8003cb6:	2300      	movge	r3, #0
 8003cb8:	2201      	movlt	r2, #1
 8003cba:	bfac      	ite	ge
 8003cbc:	f8c8 3000 	strge.w	r3, [r8]
 8003cc0:	f8c8 2000 	strlt.w	r2, [r8]
 8003cc4:	4b9e      	ldr	r3, [pc, #632]	; (8003f40 <_dtoa_r+0x2f0>)
 8003cc6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003cca:	ea33 0308 	bics.w	r3, r3, r8
 8003cce:	d11b      	bne.n	8003d08 <_dtoa_r+0xb8>
 8003cd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003cd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003cdc:	4333      	orrs	r3, r6
 8003cde:	f000 8593 	beq.w	8004808 <_dtoa_r+0xbb8>
 8003ce2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ce4:	b963      	cbnz	r3, 8003d00 <_dtoa_r+0xb0>
 8003ce6:	4b97      	ldr	r3, [pc, #604]	; (8003f44 <_dtoa_r+0x2f4>)
 8003ce8:	e027      	b.n	8003d3a <_dtoa_r+0xea>
 8003cea:	4b97      	ldr	r3, [pc, #604]	; (8003f48 <_dtoa_r+0x2f8>)
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	3308      	adds	r3, #8
 8003cf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	9800      	ldr	r0, [sp, #0]
 8003cf6:	b013      	add	sp, #76	; 0x4c
 8003cf8:	ecbd 8b04 	vpop	{d8-d9}
 8003cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d00:	4b90      	ldr	r3, [pc, #576]	; (8003f44 <_dtoa_r+0x2f4>)
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	3303      	adds	r3, #3
 8003d06:	e7f3      	b.n	8003cf0 <_dtoa_r+0xa0>
 8003d08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	ec51 0b17 	vmov	r0, r1, d7
 8003d12:	eeb0 8a47 	vmov.f32	s16, s14
 8003d16:	eef0 8a67 	vmov.f32	s17, s15
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f7fc fed4 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d20:	4681      	mov	r9, r0
 8003d22:	b160      	cbz	r0, 8003d3e <_dtoa_r+0xee>
 8003d24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003d26:	2301      	movs	r3, #1
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8568 	beq.w	8004802 <_dtoa_r+0xbb2>
 8003d32:	4b86      	ldr	r3, [pc, #536]	; (8003f4c <_dtoa_r+0x2fc>)
 8003d34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	e7da      	b.n	8003cf4 <_dtoa_r+0xa4>
 8003d3e:	aa10      	add	r2, sp, #64	; 0x40
 8003d40:	a911      	add	r1, sp, #68	; 0x44
 8003d42:	4620      	mov	r0, r4
 8003d44:	eeb0 0a48 	vmov.f32	s0, s16
 8003d48:	eef0 0a68 	vmov.f32	s1, s17
 8003d4c:	f001 f994 	bl	8005078 <__d2b>
 8003d50:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003d54:	4682      	mov	sl, r0
 8003d56:	2d00      	cmp	r5, #0
 8003d58:	d07f      	beq.n	8003e5a <_dtoa_r+0x20a>
 8003d5a:	ee18 3a90 	vmov	r3, s17
 8003d5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d62:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003d66:	ec51 0b18 	vmov	r0, r1, d8
 8003d6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003d6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003d72:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003d76:	4619      	mov	r1, r3
 8003d78:	2200      	movs	r2, #0
 8003d7a:	4b75      	ldr	r3, [pc, #468]	; (8003f50 <_dtoa_r+0x300>)
 8003d7c:	f7fc fa84 	bl	8000288 <__aeabi_dsub>
 8003d80:	a367      	add	r3, pc, #412	; (adr r3, 8003f20 <_dtoa_r+0x2d0>)
 8003d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d86:	f7fc fc37 	bl	80005f8 <__aeabi_dmul>
 8003d8a:	a367      	add	r3, pc, #412	; (adr r3, 8003f28 <_dtoa_r+0x2d8>)
 8003d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d90:	f7fc fa7c 	bl	800028c <__adddf3>
 8003d94:	4606      	mov	r6, r0
 8003d96:	4628      	mov	r0, r5
 8003d98:	460f      	mov	r7, r1
 8003d9a:	f7fc fbc3 	bl	8000524 <__aeabi_i2d>
 8003d9e:	a364      	add	r3, pc, #400	; (adr r3, 8003f30 <_dtoa_r+0x2e0>)
 8003da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da4:	f7fc fc28 	bl	80005f8 <__aeabi_dmul>
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	4630      	mov	r0, r6
 8003dae:	4639      	mov	r1, r7
 8003db0:	f7fc fa6c 	bl	800028c <__adddf3>
 8003db4:	4606      	mov	r6, r0
 8003db6:	460f      	mov	r7, r1
 8003db8:	f7fc fece 	bl	8000b58 <__aeabi_d2iz>
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	4683      	mov	fp, r0
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	4639      	mov	r1, r7
 8003dc6:	f7fc fe89 	bl	8000adc <__aeabi_dcmplt>
 8003dca:	b148      	cbz	r0, 8003de0 <_dtoa_r+0x190>
 8003dcc:	4658      	mov	r0, fp
 8003dce:	f7fc fba9 	bl	8000524 <__aeabi_i2d>
 8003dd2:	4632      	mov	r2, r6
 8003dd4:	463b      	mov	r3, r7
 8003dd6:	f7fc fe77 	bl	8000ac8 <__aeabi_dcmpeq>
 8003dda:	b908      	cbnz	r0, 8003de0 <_dtoa_r+0x190>
 8003ddc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003de0:	f1bb 0f16 	cmp.w	fp, #22
 8003de4:	d857      	bhi.n	8003e96 <_dtoa_r+0x246>
 8003de6:	4b5b      	ldr	r3, [pc, #364]	; (8003f54 <_dtoa_r+0x304>)
 8003de8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	ec51 0b18 	vmov	r0, r1, d8
 8003df4:	f7fc fe72 	bl	8000adc <__aeabi_dcmplt>
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	d04e      	beq.n	8003e9a <_dtoa_r+0x24a>
 8003dfc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003e00:	2300      	movs	r3, #0
 8003e02:	930c      	str	r3, [sp, #48]	; 0x30
 8003e04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003e06:	1b5b      	subs	r3, r3, r5
 8003e08:	1e5a      	subs	r2, r3, #1
 8003e0a:	bf45      	ittet	mi
 8003e0c:	f1c3 0301 	rsbmi	r3, r3, #1
 8003e10:	9305      	strmi	r3, [sp, #20]
 8003e12:	2300      	movpl	r3, #0
 8003e14:	2300      	movmi	r3, #0
 8003e16:	9206      	str	r2, [sp, #24]
 8003e18:	bf54      	ite	pl
 8003e1a:	9305      	strpl	r3, [sp, #20]
 8003e1c:	9306      	strmi	r3, [sp, #24]
 8003e1e:	f1bb 0f00 	cmp.w	fp, #0
 8003e22:	db3c      	blt.n	8003e9e <_dtoa_r+0x24e>
 8003e24:	9b06      	ldr	r3, [sp, #24]
 8003e26:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003e2a:	445b      	add	r3, fp
 8003e2c:	9306      	str	r3, [sp, #24]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	9308      	str	r3, [sp, #32]
 8003e32:	9b07      	ldr	r3, [sp, #28]
 8003e34:	2b09      	cmp	r3, #9
 8003e36:	d868      	bhi.n	8003f0a <_dtoa_r+0x2ba>
 8003e38:	2b05      	cmp	r3, #5
 8003e3a:	bfc4      	itt	gt
 8003e3c:	3b04      	subgt	r3, #4
 8003e3e:	9307      	strgt	r3, [sp, #28]
 8003e40:	9b07      	ldr	r3, [sp, #28]
 8003e42:	f1a3 0302 	sub.w	r3, r3, #2
 8003e46:	bfcc      	ite	gt
 8003e48:	2500      	movgt	r5, #0
 8003e4a:	2501      	movle	r5, #1
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	f200 8085 	bhi.w	8003f5c <_dtoa_r+0x30c>
 8003e52:	e8df f003 	tbb	[pc, r3]
 8003e56:	3b2e      	.short	0x3b2e
 8003e58:	5839      	.short	0x5839
 8003e5a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003e5e:	441d      	add	r5, r3
 8003e60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	bfc1      	itttt	gt
 8003e68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003e6c:	fa08 f803 	lslgt.w	r8, r8, r3
 8003e70:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8003e74:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003e78:	bfd6      	itet	le
 8003e7a:	f1c3 0320 	rsble	r3, r3, #32
 8003e7e:	ea48 0003 	orrgt.w	r0, r8, r3
 8003e82:	fa06 f003 	lslle.w	r0, r6, r3
 8003e86:	f7fc fb3d 	bl	8000504 <__aeabi_ui2d>
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003e90:	3d01      	subs	r5, #1
 8003e92:	920e      	str	r2, [sp, #56]	; 0x38
 8003e94:	e76f      	b.n	8003d76 <_dtoa_r+0x126>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e7b3      	b.n	8003e02 <_dtoa_r+0x1b2>
 8003e9a:	900c      	str	r0, [sp, #48]	; 0x30
 8003e9c:	e7b2      	b.n	8003e04 <_dtoa_r+0x1b4>
 8003e9e:	9b05      	ldr	r3, [sp, #20]
 8003ea0:	eba3 030b 	sub.w	r3, r3, fp
 8003ea4:	9305      	str	r3, [sp, #20]
 8003ea6:	f1cb 0300 	rsb	r3, fp, #0
 8003eaa:	9308      	str	r3, [sp, #32]
 8003eac:	2300      	movs	r3, #0
 8003eae:	930b      	str	r3, [sp, #44]	; 0x2c
 8003eb0:	e7bf      	b.n	8003e32 <_dtoa_r+0x1e2>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8003eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	dc52      	bgt.n	8003f62 <_dtoa_r+0x312>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	9304      	str	r3, [sp, #16]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	920a      	str	r2, [sp, #40]	; 0x28
 8003ec6:	e00b      	b.n	8003ee0 <_dtoa_r+0x290>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e7f3      	b.n	8003eb4 <_dtoa_r+0x264>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	9309      	str	r3, [sp, #36]	; 0x24
 8003ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ed2:	445b      	add	r3, fp
 8003ed4:	9301      	str	r3, [sp, #4]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	9304      	str	r3, [sp, #16]
 8003edc:	bfb8      	it	lt
 8003ede:	2301      	movlt	r3, #1
 8003ee0:	69e0      	ldr	r0, [r4, #28]
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	2204      	movs	r2, #4
 8003ee6:	f102 0614 	add.w	r6, r2, #20
 8003eea:	429e      	cmp	r6, r3
 8003eec:	d93d      	bls.n	8003f6a <_dtoa_r+0x31a>
 8003eee:	6041      	str	r1, [r0, #4]
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	f000 fd9f 	bl	8004a34 <_Balloc>
 8003ef6:	9000      	str	r0, [sp, #0]
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	d139      	bne.n	8003f70 <_dtoa_r+0x320>
 8003efc:	4b16      	ldr	r3, [pc, #88]	; (8003f58 <_dtoa_r+0x308>)
 8003efe:	4602      	mov	r2, r0
 8003f00:	f240 11af 	movw	r1, #431	; 0x1af
 8003f04:	e6bd      	b.n	8003c82 <_dtoa_r+0x32>
 8003f06:	2301      	movs	r3, #1
 8003f08:	e7e1      	b.n	8003ece <_dtoa_r+0x27e>
 8003f0a:	2501      	movs	r5, #1
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	9307      	str	r3, [sp, #28]
 8003f10:	9509      	str	r5, [sp, #36]	; 0x24
 8003f12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f16:	9301      	str	r3, [sp, #4]
 8003f18:	9304      	str	r3, [sp, #16]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	2312      	movs	r3, #18
 8003f1e:	e7d1      	b.n	8003ec4 <_dtoa_r+0x274>
 8003f20:	636f4361 	.word	0x636f4361
 8003f24:	3fd287a7 	.word	0x3fd287a7
 8003f28:	8b60c8b3 	.word	0x8b60c8b3
 8003f2c:	3fc68a28 	.word	0x3fc68a28
 8003f30:	509f79fb 	.word	0x509f79fb
 8003f34:	3fd34413 	.word	0x3fd34413
 8003f38:	080058db 	.word	0x080058db
 8003f3c:	080058f2 	.word	0x080058f2
 8003f40:	7ff00000 	.word	0x7ff00000
 8003f44:	080058d7 	.word	0x080058d7
 8003f48:	080058ce 	.word	0x080058ce
 8003f4c:	0800586f 	.word	0x0800586f
 8003f50:	3ff80000 	.word	0x3ff80000
 8003f54:	080059e0 	.word	0x080059e0
 8003f58:	0800594a 	.word	0x0800594a
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f60:	e7d7      	b.n	8003f12 <_dtoa_r+0x2c2>
 8003f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f64:	9301      	str	r3, [sp, #4]
 8003f66:	9304      	str	r3, [sp, #16]
 8003f68:	e7ba      	b.n	8003ee0 <_dtoa_r+0x290>
 8003f6a:	3101      	adds	r1, #1
 8003f6c:	0052      	lsls	r2, r2, #1
 8003f6e:	e7ba      	b.n	8003ee6 <_dtoa_r+0x296>
 8003f70:	69e3      	ldr	r3, [r4, #28]
 8003f72:	9a00      	ldr	r2, [sp, #0]
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	9b04      	ldr	r3, [sp, #16]
 8003f78:	2b0e      	cmp	r3, #14
 8003f7a:	f200 80a8 	bhi.w	80040ce <_dtoa_r+0x47e>
 8003f7e:	2d00      	cmp	r5, #0
 8003f80:	f000 80a5 	beq.w	80040ce <_dtoa_r+0x47e>
 8003f84:	f1bb 0f00 	cmp.w	fp, #0
 8003f88:	dd38      	ble.n	8003ffc <_dtoa_r+0x3ac>
 8003f8a:	4bc0      	ldr	r3, [pc, #768]	; (800428c <_dtoa_r+0x63c>)
 8003f8c:	f00b 020f 	and.w	r2, fp, #15
 8003f90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003f98:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003f9c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8003fa0:	d019      	beq.n	8003fd6 <_dtoa_r+0x386>
 8003fa2:	4bbb      	ldr	r3, [pc, #748]	; (8004290 <_dtoa_r+0x640>)
 8003fa4:	ec51 0b18 	vmov	r0, r1, d8
 8003fa8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003fac:	f7fc fc4e 	bl	800084c <__aeabi_ddiv>
 8003fb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fb4:	f008 080f 	and.w	r8, r8, #15
 8003fb8:	2503      	movs	r5, #3
 8003fba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004290 <_dtoa_r+0x640>
 8003fbe:	f1b8 0f00 	cmp.w	r8, #0
 8003fc2:	d10a      	bne.n	8003fda <_dtoa_r+0x38a>
 8003fc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fc8:	4632      	mov	r2, r6
 8003fca:	463b      	mov	r3, r7
 8003fcc:	f7fc fc3e 	bl	800084c <__aeabi_ddiv>
 8003fd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fd4:	e02b      	b.n	800402e <_dtoa_r+0x3de>
 8003fd6:	2502      	movs	r5, #2
 8003fd8:	e7ef      	b.n	8003fba <_dtoa_r+0x36a>
 8003fda:	f018 0f01 	tst.w	r8, #1
 8003fde:	d008      	beq.n	8003ff2 <_dtoa_r+0x3a2>
 8003fe0:	4630      	mov	r0, r6
 8003fe2:	4639      	mov	r1, r7
 8003fe4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003fe8:	f7fc fb06 	bl	80005f8 <__aeabi_dmul>
 8003fec:	3501      	adds	r5, #1
 8003fee:	4606      	mov	r6, r0
 8003ff0:	460f      	mov	r7, r1
 8003ff2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003ff6:	f109 0908 	add.w	r9, r9, #8
 8003ffa:	e7e0      	b.n	8003fbe <_dtoa_r+0x36e>
 8003ffc:	f000 809f 	beq.w	800413e <_dtoa_r+0x4ee>
 8004000:	f1cb 0600 	rsb	r6, fp, #0
 8004004:	4ba1      	ldr	r3, [pc, #644]	; (800428c <_dtoa_r+0x63c>)
 8004006:	4fa2      	ldr	r7, [pc, #648]	; (8004290 <_dtoa_r+0x640>)
 8004008:	f006 020f 	and.w	r2, r6, #15
 800400c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004014:	ec51 0b18 	vmov	r0, r1, d8
 8004018:	f7fc faee 	bl	80005f8 <__aeabi_dmul>
 800401c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004020:	1136      	asrs	r6, r6, #4
 8004022:	2300      	movs	r3, #0
 8004024:	2502      	movs	r5, #2
 8004026:	2e00      	cmp	r6, #0
 8004028:	d17e      	bne.n	8004128 <_dtoa_r+0x4d8>
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1d0      	bne.n	8003fd0 <_dtoa_r+0x380>
 800402e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004030:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 8084 	beq.w	8004142 <_dtoa_r+0x4f2>
 800403a:	4b96      	ldr	r3, [pc, #600]	; (8004294 <_dtoa_r+0x644>)
 800403c:	2200      	movs	r2, #0
 800403e:	4640      	mov	r0, r8
 8004040:	4649      	mov	r1, r9
 8004042:	f7fc fd4b 	bl	8000adc <__aeabi_dcmplt>
 8004046:	2800      	cmp	r0, #0
 8004048:	d07b      	beq.n	8004142 <_dtoa_r+0x4f2>
 800404a:	9b04      	ldr	r3, [sp, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d078      	beq.n	8004142 <_dtoa_r+0x4f2>
 8004050:	9b01      	ldr	r3, [sp, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	dd39      	ble.n	80040ca <_dtoa_r+0x47a>
 8004056:	4b90      	ldr	r3, [pc, #576]	; (8004298 <_dtoa_r+0x648>)
 8004058:	2200      	movs	r2, #0
 800405a:	4640      	mov	r0, r8
 800405c:	4649      	mov	r1, r9
 800405e:	f7fc facb 	bl	80005f8 <__aeabi_dmul>
 8004062:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004066:	9e01      	ldr	r6, [sp, #4]
 8004068:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800406c:	3501      	adds	r5, #1
 800406e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004072:	4628      	mov	r0, r5
 8004074:	f7fc fa56 	bl	8000524 <__aeabi_i2d>
 8004078:	4642      	mov	r2, r8
 800407a:	464b      	mov	r3, r9
 800407c:	f7fc fabc 	bl	80005f8 <__aeabi_dmul>
 8004080:	4b86      	ldr	r3, [pc, #536]	; (800429c <_dtoa_r+0x64c>)
 8004082:	2200      	movs	r2, #0
 8004084:	f7fc f902 	bl	800028c <__adddf3>
 8004088:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800408c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004090:	9303      	str	r3, [sp, #12]
 8004092:	2e00      	cmp	r6, #0
 8004094:	d158      	bne.n	8004148 <_dtoa_r+0x4f8>
 8004096:	4b82      	ldr	r3, [pc, #520]	; (80042a0 <_dtoa_r+0x650>)
 8004098:	2200      	movs	r2, #0
 800409a:	4640      	mov	r0, r8
 800409c:	4649      	mov	r1, r9
 800409e:	f7fc f8f3 	bl	8000288 <__aeabi_dsub>
 80040a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040a6:	4680      	mov	r8, r0
 80040a8:	4689      	mov	r9, r1
 80040aa:	f7fc fd35 	bl	8000b18 <__aeabi_dcmpgt>
 80040ae:	2800      	cmp	r0, #0
 80040b0:	f040 8296 	bne.w	80045e0 <_dtoa_r+0x990>
 80040b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80040b8:	4640      	mov	r0, r8
 80040ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80040be:	4649      	mov	r1, r9
 80040c0:	f7fc fd0c 	bl	8000adc <__aeabi_dcmplt>
 80040c4:	2800      	cmp	r0, #0
 80040c6:	f040 8289 	bne.w	80045dc <_dtoa_r+0x98c>
 80040ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80040ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f2c0 814e 	blt.w	8004372 <_dtoa_r+0x722>
 80040d6:	f1bb 0f0e 	cmp.w	fp, #14
 80040da:	f300 814a 	bgt.w	8004372 <_dtoa_r+0x722>
 80040de:	4b6b      	ldr	r3, [pc, #428]	; (800428c <_dtoa_r+0x63c>)
 80040e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80040e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80040e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f280 80dc 	bge.w	80042a8 <_dtoa_r+0x658>
 80040f0:	9b04      	ldr	r3, [sp, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f300 80d8 	bgt.w	80042a8 <_dtoa_r+0x658>
 80040f8:	f040 826f 	bne.w	80045da <_dtoa_r+0x98a>
 80040fc:	4b68      	ldr	r3, [pc, #416]	; (80042a0 <_dtoa_r+0x650>)
 80040fe:	2200      	movs	r2, #0
 8004100:	4640      	mov	r0, r8
 8004102:	4649      	mov	r1, r9
 8004104:	f7fc fa78 	bl	80005f8 <__aeabi_dmul>
 8004108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800410c:	f7fc fcfa 	bl	8000b04 <__aeabi_dcmpge>
 8004110:	9e04      	ldr	r6, [sp, #16]
 8004112:	4637      	mov	r7, r6
 8004114:	2800      	cmp	r0, #0
 8004116:	f040 8245 	bne.w	80045a4 <_dtoa_r+0x954>
 800411a:	9d00      	ldr	r5, [sp, #0]
 800411c:	2331      	movs	r3, #49	; 0x31
 800411e:	f805 3b01 	strb.w	r3, [r5], #1
 8004122:	f10b 0b01 	add.w	fp, fp, #1
 8004126:	e241      	b.n	80045ac <_dtoa_r+0x95c>
 8004128:	07f2      	lsls	r2, r6, #31
 800412a:	d505      	bpl.n	8004138 <_dtoa_r+0x4e8>
 800412c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004130:	f7fc fa62 	bl	80005f8 <__aeabi_dmul>
 8004134:	3501      	adds	r5, #1
 8004136:	2301      	movs	r3, #1
 8004138:	1076      	asrs	r6, r6, #1
 800413a:	3708      	adds	r7, #8
 800413c:	e773      	b.n	8004026 <_dtoa_r+0x3d6>
 800413e:	2502      	movs	r5, #2
 8004140:	e775      	b.n	800402e <_dtoa_r+0x3de>
 8004142:	9e04      	ldr	r6, [sp, #16]
 8004144:	465f      	mov	r7, fp
 8004146:	e792      	b.n	800406e <_dtoa_r+0x41e>
 8004148:	9900      	ldr	r1, [sp, #0]
 800414a:	4b50      	ldr	r3, [pc, #320]	; (800428c <_dtoa_r+0x63c>)
 800414c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004150:	4431      	add	r1, r6
 8004152:	9102      	str	r1, [sp, #8]
 8004154:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004156:	eeb0 9a47 	vmov.f32	s18, s14
 800415a:	eef0 9a67 	vmov.f32	s19, s15
 800415e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004162:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004166:	2900      	cmp	r1, #0
 8004168:	d044      	beq.n	80041f4 <_dtoa_r+0x5a4>
 800416a:	494e      	ldr	r1, [pc, #312]	; (80042a4 <_dtoa_r+0x654>)
 800416c:	2000      	movs	r0, #0
 800416e:	f7fc fb6d 	bl	800084c <__aeabi_ddiv>
 8004172:	ec53 2b19 	vmov	r2, r3, d9
 8004176:	f7fc f887 	bl	8000288 <__aeabi_dsub>
 800417a:	9d00      	ldr	r5, [sp, #0]
 800417c:	ec41 0b19 	vmov	d9, r0, r1
 8004180:	4649      	mov	r1, r9
 8004182:	4640      	mov	r0, r8
 8004184:	f7fc fce8 	bl	8000b58 <__aeabi_d2iz>
 8004188:	4606      	mov	r6, r0
 800418a:	f7fc f9cb 	bl	8000524 <__aeabi_i2d>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4640      	mov	r0, r8
 8004194:	4649      	mov	r1, r9
 8004196:	f7fc f877 	bl	8000288 <__aeabi_dsub>
 800419a:	3630      	adds	r6, #48	; 0x30
 800419c:	f805 6b01 	strb.w	r6, [r5], #1
 80041a0:	ec53 2b19 	vmov	r2, r3, d9
 80041a4:	4680      	mov	r8, r0
 80041a6:	4689      	mov	r9, r1
 80041a8:	f7fc fc98 	bl	8000adc <__aeabi_dcmplt>
 80041ac:	2800      	cmp	r0, #0
 80041ae:	d164      	bne.n	800427a <_dtoa_r+0x62a>
 80041b0:	4642      	mov	r2, r8
 80041b2:	464b      	mov	r3, r9
 80041b4:	4937      	ldr	r1, [pc, #220]	; (8004294 <_dtoa_r+0x644>)
 80041b6:	2000      	movs	r0, #0
 80041b8:	f7fc f866 	bl	8000288 <__aeabi_dsub>
 80041bc:	ec53 2b19 	vmov	r2, r3, d9
 80041c0:	f7fc fc8c 	bl	8000adc <__aeabi_dcmplt>
 80041c4:	2800      	cmp	r0, #0
 80041c6:	f040 80b6 	bne.w	8004336 <_dtoa_r+0x6e6>
 80041ca:	9b02      	ldr	r3, [sp, #8]
 80041cc:	429d      	cmp	r5, r3
 80041ce:	f43f af7c 	beq.w	80040ca <_dtoa_r+0x47a>
 80041d2:	4b31      	ldr	r3, [pc, #196]	; (8004298 <_dtoa_r+0x648>)
 80041d4:	ec51 0b19 	vmov	r0, r1, d9
 80041d8:	2200      	movs	r2, #0
 80041da:	f7fc fa0d 	bl	80005f8 <__aeabi_dmul>
 80041de:	4b2e      	ldr	r3, [pc, #184]	; (8004298 <_dtoa_r+0x648>)
 80041e0:	ec41 0b19 	vmov	d9, r0, r1
 80041e4:	2200      	movs	r2, #0
 80041e6:	4640      	mov	r0, r8
 80041e8:	4649      	mov	r1, r9
 80041ea:	f7fc fa05 	bl	80005f8 <__aeabi_dmul>
 80041ee:	4680      	mov	r8, r0
 80041f0:	4689      	mov	r9, r1
 80041f2:	e7c5      	b.n	8004180 <_dtoa_r+0x530>
 80041f4:	ec51 0b17 	vmov	r0, r1, d7
 80041f8:	f7fc f9fe 	bl	80005f8 <__aeabi_dmul>
 80041fc:	9b02      	ldr	r3, [sp, #8]
 80041fe:	9d00      	ldr	r5, [sp, #0]
 8004200:	930f      	str	r3, [sp, #60]	; 0x3c
 8004202:	ec41 0b19 	vmov	d9, r0, r1
 8004206:	4649      	mov	r1, r9
 8004208:	4640      	mov	r0, r8
 800420a:	f7fc fca5 	bl	8000b58 <__aeabi_d2iz>
 800420e:	4606      	mov	r6, r0
 8004210:	f7fc f988 	bl	8000524 <__aeabi_i2d>
 8004214:	3630      	adds	r6, #48	; 0x30
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4640      	mov	r0, r8
 800421c:	4649      	mov	r1, r9
 800421e:	f7fc f833 	bl	8000288 <__aeabi_dsub>
 8004222:	f805 6b01 	strb.w	r6, [r5], #1
 8004226:	9b02      	ldr	r3, [sp, #8]
 8004228:	429d      	cmp	r5, r3
 800422a:	4680      	mov	r8, r0
 800422c:	4689      	mov	r9, r1
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	d124      	bne.n	800427e <_dtoa_r+0x62e>
 8004234:	4b1b      	ldr	r3, [pc, #108]	; (80042a4 <_dtoa_r+0x654>)
 8004236:	ec51 0b19 	vmov	r0, r1, d9
 800423a:	f7fc f827 	bl	800028c <__adddf3>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4640      	mov	r0, r8
 8004244:	4649      	mov	r1, r9
 8004246:	f7fc fc67 	bl	8000b18 <__aeabi_dcmpgt>
 800424a:	2800      	cmp	r0, #0
 800424c:	d173      	bne.n	8004336 <_dtoa_r+0x6e6>
 800424e:	ec53 2b19 	vmov	r2, r3, d9
 8004252:	4914      	ldr	r1, [pc, #80]	; (80042a4 <_dtoa_r+0x654>)
 8004254:	2000      	movs	r0, #0
 8004256:	f7fc f817 	bl	8000288 <__aeabi_dsub>
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	4640      	mov	r0, r8
 8004260:	4649      	mov	r1, r9
 8004262:	f7fc fc3b 	bl	8000adc <__aeabi_dcmplt>
 8004266:	2800      	cmp	r0, #0
 8004268:	f43f af2f 	beq.w	80040ca <_dtoa_r+0x47a>
 800426c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800426e:	1e6b      	subs	r3, r5, #1
 8004270:	930f      	str	r3, [sp, #60]	; 0x3c
 8004272:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004276:	2b30      	cmp	r3, #48	; 0x30
 8004278:	d0f8      	beq.n	800426c <_dtoa_r+0x61c>
 800427a:	46bb      	mov	fp, r7
 800427c:	e04a      	b.n	8004314 <_dtoa_r+0x6c4>
 800427e:	4b06      	ldr	r3, [pc, #24]	; (8004298 <_dtoa_r+0x648>)
 8004280:	f7fc f9ba 	bl	80005f8 <__aeabi_dmul>
 8004284:	4680      	mov	r8, r0
 8004286:	4689      	mov	r9, r1
 8004288:	e7bd      	b.n	8004206 <_dtoa_r+0x5b6>
 800428a:	bf00      	nop
 800428c:	080059e0 	.word	0x080059e0
 8004290:	080059b8 	.word	0x080059b8
 8004294:	3ff00000 	.word	0x3ff00000
 8004298:	40240000 	.word	0x40240000
 800429c:	401c0000 	.word	0x401c0000
 80042a0:	40140000 	.word	0x40140000
 80042a4:	3fe00000 	.word	0x3fe00000
 80042a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80042ac:	9d00      	ldr	r5, [sp, #0]
 80042ae:	4642      	mov	r2, r8
 80042b0:	464b      	mov	r3, r9
 80042b2:	4630      	mov	r0, r6
 80042b4:	4639      	mov	r1, r7
 80042b6:	f7fc fac9 	bl	800084c <__aeabi_ddiv>
 80042ba:	f7fc fc4d 	bl	8000b58 <__aeabi_d2iz>
 80042be:	9001      	str	r0, [sp, #4]
 80042c0:	f7fc f930 	bl	8000524 <__aeabi_i2d>
 80042c4:	4642      	mov	r2, r8
 80042c6:	464b      	mov	r3, r9
 80042c8:	f7fc f996 	bl	80005f8 <__aeabi_dmul>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4630      	mov	r0, r6
 80042d2:	4639      	mov	r1, r7
 80042d4:	f7fb ffd8 	bl	8000288 <__aeabi_dsub>
 80042d8:	9e01      	ldr	r6, [sp, #4]
 80042da:	9f04      	ldr	r7, [sp, #16]
 80042dc:	3630      	adds	r6, #48	; 0x30
 80042de:	f805 6b01 	strb.w	r6, [r5], #1
 80042e2:	9e00      	ldr	r6, [sp, #0]
 80042e4:	1bae      	subs	r6, r5, r6
 80042e6:	42b7      	cmp	r7, r6
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	d134      	bne.n	8004358 <_dtoa_r+0x708>
 80042ee:	f7fb ffcd 	bl	800028c <__adddf3>
 80042f2:	4642      	mov	r2, r8
 80042f4:	464b      	mov	r3, r9
 80042f6:	4606      	mov	r6, r0
 80042f8:	460f      	mov	r7, r1
 80042fa:	f7fc fc0d 	bl	8000b18 <__aeabi_dcmpgt>
 80042fe:	b9c8      	cbnz	r0, 8004334 <_dtoa_r+0x6e4>
 8004300:	4642      	mov	r2, r8
 8004302:	464b      	mov	r3, r9
 8004304:	4630      	mov	r0, r6
 8004306:	4639      	mov	r1, r7
 8004308:	f7fc fbde 	bl	8000ac8 <__aeabi_dcmpeq>
 800430c:	b110      	cbz	r0, 8004314 <_dtoa_r+0x6c4>
 800430e:	9b01      	ldr	r3, [sp, #4]
 8004310:	07db      	lsls	r3, r3, #31
 8004312:	d40f      	bmi.n	8004334 <_dtoa_r+0x6e4>
 8004314:	4651      	mov	r1, sl
 8004316:	4620      	mov	r0, r4
 8004318:	f000 fbcc 	bl	8004ab4 <_Bfree>
 800431c:	2300      	movs	r3, #0
 800431e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004320:	702b      	strb	r3, [r5, #0]
 8004322:	f10b 0301 	add.w	r3, fp, #1
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800432a:	2b00      	cmp	r3, #0
 800432c:	f43f ace2 	beq.w	8003cf4 <_dtoa_r+0xa4>
 8004330:	601d      	str	r5, [r3, #0]
 8004332:	e4df      	b.n	8003cf4 <_dtoa_r+0xa4>
 8004334:	465f      	mov	r7, fp
 8004336:	462b      	mov	r3, r5
 8004338:	461d      	mov	r5, r3
 800433a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800433e:	2a39      	cmp	r2, #57	; 0x39
 8004340:	d106      	bne.n	8004350 <_dtoa_r+0x700>
 8004342:	9a00      	ldr	r2, [sp, #0]
 8004344:	429a      	cmp	r2, r3
 8004346:	d1f7      	bne.n	8004338 <_dtoa_r+0x6e8>
 8004348:	9900      	ldr	r1, [sp, #0]
 800434a:	2230      	movs	r2, #48	; 0x30
 800434c:	3701      	adds	r7, #1
 800434e:	700a      	strb	r2, [r1, #0]
 8004350:	781a      	ldrb	r2, [r3, #0]
 8004352:	3201      	adds	r2, #1
 8004354:	701a      	strb	r2, [r3, #0]
 8004356:	e790      	b.n	800427a <_dtoa_r+0x62a>
 8004358:	4ba3      	ldr	r3, [pc, #652]	; (80045e8 <_dtoa_r+0x998>)
 800435a:	2200      	movs	r2, #0
 800435c:	f7fc f94c 	bl	80005f8 <__aeabi_dmul>
 8004360:	2200      	movs	r2, #0
 8004362:	2300      	movs	r3, #0
 8004364:	4606      	mov	r6, r0
 8004366:	460f      	mov	r7, r1
 8004368:	f7fc fbae 	bl	8000ac8 <__aeabi_dcmpeq>
 800436c:	2800      	cmp	r0, #0
 800436e:	d09e      	beq.n	80042ae <_dtoa_r+0x65e>
 8004370:	e7d0      	b.n	8004314 <_dtoa_r+0x6c4>
 8004372:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004374:	2a00      	cmp	r2, #0
 8004376:	f000 80ca 	beq.w	800450e <_dtoa_r+0x8be>
 800437a:	9a07      	ldr	r2, [sp, #28]
 800437c:	2a01      	cmp	r2, #1
 800437e:	f300 80ad 	bgt.w	80044dc <_dtoa_r+0x88c>
 8004382:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004384:	2a00      	cmp	r2, #0
 8004386:	f000 80a5 	beq.w	80044d4 <_dtoa_r+0x884>
 800438a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800438e:	9e08      	ldr	r6, [sp, #32]
 8004390:	9d05      	ldr	r5, [sp, #20]
 8004392:	9a05      	ldr	r2, [sp, #20]
 8004394:	441a      	add	r2, r3
 8004396:	9205      	str	r2, [sp, #20]
 8004398:	9a06      	ldr	r2, [sp, #24]
 800439a:	2101      	movs	r1, #1
 800439c:	441a      	add	r2, r3
 800439e:	4620      	mov	r0, r4
 80043a0:	9206      	str	r2, [sp, #24]
 80043a2:	f000 fc3d 	bl	8004c20 <__i2b>
 80043a6:	4607      	mov	r7, r0
 80043a8:	b165      	cbz	r5, 80043c4 <_dtoa_r+0x774>
 80043aa:	9b06      	ldr	r3, [sp, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	dd09      	ble.n	80043c4 <_dtoa_r+0x774>
 80043b0:	42ab      	cmp	r3, r5
 80043b2:	9a05      	ldr	r2, [sp, #20]
 80043b4:	bfa8      	it	ge
 80043b6:	462b      	movge	r3, r5
 80043b8:	1ad2      	subs	r2, r2, r3
 80043ba:	9205      	str	r2, [sp, #20]
 80043bc:	9a06      	ldr	r2, [sp, #24]
 80043be:	1aed      	subs	r5, r5, r3
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	9306      	str	r3, [sp, #24]
 80043c4:	9b08      	ldr	r3, [sp, #32]
 80043c6:	b1f3      	cbz	r3, 8004406 <_dtoa_r+0x7b6>
 80043c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 80a3 	beq.w	8004516 <_dtoa_r+0x8c6>
 80043d0:	2e00      	cmp	r6, #0
 80043d2:	dd10      	ble.n	80043f6 <_dtoa_r+0x7a6>
 80043d4:	4639      	mov	r1, r7
 80043d6:	4632      	mov	r2, r6
 80043d8:	4620      	mov	r0, r4
 80043da:	f000 fce1 	bl	8004da0 <__pow5mult>
 80043de:	4652      	mov	r2, sl
 80043e0:	4601      	mov	r1, r0
 80043e2:	4607      	mov	r7, r0
 80043e4:	4620      	mov	r0, r4
 80043e6:	f000 fc31 	bl	8004c4c <__multiply>
 80043ea:	4651      	mov	r1, sl
 80043ec:	4680      	mov	r8, r0
 80043ee:	4620      	mov	r0, r4
 80043f0:	f000 fb60 	bl	8004ab4 <_Bfree>
 80043f4:	46c2      	mov	sl, r8
 80043f6:	9b08      	ldr	r3, [sp, #32]
 80043f8:	1b9a      	subs	r2, r3, r6
 80043fa:	d004      	beq.n	8004406 <_dtoa_r+0x7b6>
 80043fc:	4651      	mov	r1, sl
 80043fe:	4620      	mov	r0, r4
 8004400:	f000 fcce 	bl	8004da0 <__pow5mult>
 8004404:	4682      	mov	sl, r0
 8004406:	2101      	movs	r1, #1
 8004408:	4620      	mov	r0, r4
 800440a:	f000 fc09 	bl	8004c20 <__i2b>
 800440e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004410:	2b00      	cmp	r3, #0
 8004412:	4606      	mov	r6, r0
 8004414:	f340 8081 	ble.w	800451a <_dtoa_r+0x8ca>
 8004418:	461a      	mov	r2, r3
 800441a:	4601      	mov	r1, r0
 800441c:	4620      	mov	r0, r4
 800441e:	f000 fcbf 	bl	8004da0 <__pow5mult>
 8004422:	9b07      	ldr	r3, [sp, #28]
 8004424:	2b01      	cmp	r3, #1
 8004426:	4606      	mov	r6, r0
 8004428:	dd7a      	ble.n	8004520 <_dtoa_r+0x8d0>
 800442a:	f04f 0800 	mov.w	r8, #0
 800442e:	6933      	ldr	r3, [r6, #16]
 8004430:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004434:	6918      	ldr	r0, [r3, #16]
 8004436:	f000 fba5 	bl	8004b84 <__hi0bits>
 800443a:	f1c0 0020 	rsb	r0, r0, #32
 800443e:	9b06      	ldr	r3, [sp, #24]
 8004440:	4418      	add	r0, r3
 8004442:	f010 001f 	ands.w	r0, r0, #31
 8004446:	f000 8094 	beq.w	8004572 <_dtoa_r+0x922>
 800444a:	f1c0 0320 	rsb	r3, r0, #32
 800444e:	2b04      	cmp	r3, #4
 8004450:	f340 8085 	ble.w	800455e <_dtoa_r+0x90e>
 8004454:	9b05      	ldr	r3, [sp, #20]
 8004456:	f1c0 001c 	rsb	r0, r0, #28
 800445a:	4403      	add	r3, r0
 800445c:	9305      	str	r3, [sp, #20]
 800445e:	9b06      	ldr	r3, [sp, #24]
 8004460:	4403      	add	r3, r0
 8004462:	4405      	add	r5, r0
 8004464:	9306      	str	r3, [sp, #24]
 8004466:	9b05      	ldr	r3, [sp, #20]
 8004468:	2b00      	cmp	r3, #0
 800446a:	dd05      	ble.n	8004478 <_dtoa_r+0x828>
 800446c:	4651      	mov	r1, sl
 800446e:	461a      	mov	r2, r3
 8004470:	4620      	mov	r0, r4
 8004472:	f000 fcef 	bl	8004e54 <__lshift>
 8004476:	4682      	mov	sl, r0
 8004478:	9b06      	ldr	r3, [sp, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	dd05      	ble.n	800448a <_dtoa_r+0x83a>
 800447e:	4631      	mov	r1, r6
 8004480:	461a      	mov	r2, r3
 8004482:	4620      	mov	r0, r4
 8004484:	f000 fce6 	bl	8004e54 <__lshift>
 8004488:	4606      	mov	r6, r0
 800448a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800448c:	2b00      	cmp	r3, #0
 800448e:	d072      	beq.n	8004576 <_dtoa_r+0x926>
 8004490:	4631      	mov	r1, r6
 8004492:	4650      	mov	r0, sl
 8004494:	f000 fd4a 	bl	8004f2c <__mcmp>
 8004498:	2800      	cmp	r0, #0
 800449a:	da6c      	bge.n	8004576 <_dtoa_r+0x926>
 800449c:	2300      	movs	r3, #0
 800449e:	4651      	mov	r1, sl
 80044a0:	220a      	movs	r2, #10
 80044a2:	4620      	mov	r0, r4
 80044a4:	f000 fb28 	bl	8004af8 <__multadd>
 80044a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044aa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80044ae:	4682      	mov	sl, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 81b0 	beq.w	8004816 <_dtoa_r+0xbc6>
 80044b6:	2300      	movs	r3, #0
 80044b8:	4639      	mov	r1, r7
 80044ba:	220a      	movs	r2, #10
 80044bc:	4620      	mov	r0, r4
 80044be:	f000 fb1b 	bl	8004af8 <__multadd>
 80044c2:	9b01      	ldr	r3, [sp, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	4607      	mov	r7, r0
 80044c8:	f300 8096 	bgt.w	80045f8 <_dtoa_r+0x9a8>
 80044cc:	9b07      	ldr	r3, [sp, #28]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	dc59      	bgt.n	8004586 <_dtoa_r+0x936>
 80044d2:	e091      	b.n	80045f8 <_dtoa_r+0x9a8>
 80044d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80044d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80044da:	e758      	b.n	800438e <_dtoa_r+0x73e>
 80044dc:	9b04      	ldr	r3, [sp, #16]
 80044de:	1e5e      	subs	r6, r3, #1
 80044e0:	9b08      	ldr	r3, [sp, #32]
 80044e2:	42b3      	cmp	r3, r6
 80044e4:	bfbf      	itttt	lt
 80044e6:	9b08      	ldrlt	r3, [sp, #32]
 80044e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80044ea:	9608      	strlt	r6, [sp, #32]
 80044ec:	1af3      	sublt	r3, r6, r3
 80044ee:	bfb4      	ite	lt
 80044f0:	18d2      	addlt	r2, r2, r3
 80044f2:	1b9e      	subge	r6, r3, r6
 80044f4:	9b04      	ldr	r3, [sp, #16]
 80044f6:	bfbc      	itt	lt
 80044f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80044fa:	2600      	movlt	r6, #0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	bfb7      	itett	lt
 8004500:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8004504:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004508:	1a9d      	sublt	r5, r3, r2
 800450a:	2300      	movlt	r3, #0
 800450c:	e741      	b.n	8004392 <_dtoa_r+0x742>
 800450e:	9e08      	ldr	r6, [sp, #32]
 8004510:	9d05      	ldr	r5, [sp, #20]
 8004512:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004514:	e748      	b.n	80043a8 <_dtoa_r+0x758>
 8004516:	9a08      	ldr	r2, [sp, #32]
 8004518:	e770      	b.n	80043fc <_dtoa_r+0x7ac>
 800451a:	9b07      	ldr	r3, [sp, #28]
 800451c:	2b01      	cmp	r3, #1
 800451e:	dc19      	bgt.n	8004554 <_dtoa_r+0x904>
 8004520:	9b02      	ldr	r3, [sp, #8]
 8004522:	b9bb      	cbnz	r3, 8004554 <_dtoa_r+0x904>
 8004524:	9b03      	ldr	r3, [sp, #12]
 8004526:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800452a:	b99b      	cbnz	r3, 8004554 <_dtoa_r+0x904>
 800452c:	9b03      	ldr	r3, [sp, #12]
 800452e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004532:	0d1b      	lsrs	r3, r3, #20
 8004534:	051b      	lsls	r3, r3, #20
 8004536:	b183      	cbz	r3, 800455a <_dtoa_r+0x90a>
 8004538:	9b05      	ldr	r3, [sp, #20]
 800453a:	3301      	adds	r3, #1
 800453c:	9305      	str	r3, [sp, #20]
 800453e:	9b06      	ldr	r3, [sp, #24]
 8004540:	3301      	adds	r3, #1
 8004542:	9306      	str	r3, [sp, #24]
 8004544:	f04f 0801 	mov.w	r8, #1
 8004548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800454a:	2b00      	cmp	r3, #0
 800454c:	f47f af6f 	bne.w	800442e <_dtoa_r+0x7de>
 8004550:	2001      	movs	r0, #1
 8004552:	e774      	b.n	800443e <_dtoa_r+0x7ee>
 8004554:	f04f 0800 	mov.w	r8, #0
 8004558:	e7f6      	b.n	8004548 <_dtoa_r+0x8f8>
 800455a:	4698      	mov	r8, r3
 800455c:	e7f4      	b.n	8004548 <_dtoa_r+0x8f8>
 800455e:	d082      	beq.n	8004466 <_dtoa_r+0x816>
 8004560:	9a05      	ldr	r2, [sp, #20]
 8004562:	331c      	adds	r3, #28
 8004564:	441a      	add	r2, r3
 8004566:	9205      	str	r2, [sp, #20]
 8004568:	9a06      	ldr	r2, [sp, #24]
 800456a:	441a      	add	r2, r3
 800456c:	441d      	add	r5, r3
 800456e:	9206      	str	r2, [sp, #24]
 8004570:	e779      	b.n	8004466 <_dtoa_r+0x816>
 8004572:	4603      	mov	r3, r0
 8004574:	e7f4      	b.n	8004560 <_dtoa_r+0x910>
 8004576:	9b04      	ldr	r3, [sp, #16]
 8004578:	2b00      	cmp	r3, #0
 800457a:	dc37      	bgt.n	80045ec <_dtoa_r+0x99c>
 800457c:	9b07      	ldr	r3, [sp, #28]
 800457e:	2b02      	cmp	r3, #2
 8004580:	dd34      	ble.n	80045ec <_dtoa_r+0x99c>
 8004582:	9b04      	ldr	r3, [sp, #16]
 8004584:	9301      	str	r3, [sp, #4]
 8004586:	9b01      	ldr	r3, [sp, #4]
 8004588:	b963      	cbnz	r3, 80045a4 <_dtoa_r+0x954>
 800458a:	4631      	mov	r1, r6
 800458c:	2205      	movs	r2, #5
 800458e:	4620      	mov	r0, r4
 8004590:	f000 fab2 	bl	8004af8 <__multadd>
 8004594:	4601      	mov	r1, r0
 8004596:	4606      	mov	r6, r0
 8004598:	4650      	mov	r0, sl
 800459a:	f000 fcc7 	bl	8004f2c <__mcmp>
 800459e:	2800      	cmp	r0, #0
 80045a0:	f73f adbb 	bgt.w	800411a <_dtoa_r+0x4ca>
 80045a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045a6:	9d00      	ldr	r5, [sp, #0]
 80045a8:	ea6f 0b03 	mvn.w	fp, r3
 80045ac:	f04f 0800 	mov.w	r8, #0
 80045b0:	4631      	mov	r1, r6
 80045b2:	4620      	mov	r0, r4
 80045b4:	f000 fa7e 	bl	8004ab4 <_Bfree>
 80045b8:	2f00      	cmp	r7, #0
 80045ba:	f43f aeab 	beq.w	8004314 <_dtoa_r+0x6c4>
 80045be:	f1b8 0f00 	cmp.w	r8, #0
 80045c2:	d005      	beq.n	80045d0 <_dtoa_r+0x980>
 80045c4:	45b8      	cmp	r8, r7
 80045c6:	d003      	beq.n	80045d0 <_dtoa_r+0x980>
 80045c8:	4641      	mov	r1, r8
 80045ca:	4620      	mov	r0, r4
 80045cc:	f000 fa72 	bl	8004ab4 <_Bfree>
 80045d0:	4639      	mov	r1, r7
 80045d2:	4620      	mov	r0, r4
 80045d4:	f000 fa6e 	bl	8004ab4 <_Bfree>
 80045d8:	e69c      	b.n	8004314 <_dtoa_r+0x6c4>
 80045da:	2600      	movs	r6, #0
 80045dc:	4637      	mov	r7, r6
 80045de:	e7e1      	b.n	80045a4 <_dtoa_r+0x954>
 80045e0:	46bb      	mov	fp, r7
 80045e2:	4637      	mov	r7, r6
 80045e4:	e599      	b.n	800411a <_dtoa_r+0x4ca>
 80045e6:	bf00      	nop
 80045e8:	40240000 	.word	0x40240000
 80045ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 80c8 	beq.w	8004784 <_dtoa_r+0xb34>
 80045f4:	9b04      	ldr	r3, [sp, #16]
 80045f6:	9301      	str	r3, [sp, #4]
 80045f8:	2d00      	cmp	r5, #0
 80045fa:	dd05      	ble.n	8004608 <_dtoa_r+0x9b8>
 80045fc:	4639      	mov	r1, r7
 80045fe:	462a      	mov	r2, r5
 8004600:	4620      	mov	r0, r4
 8004602:	f000 fc27 	bl	8004e54 <__lshift>
 8004606:	4607      	mov	r7, r0
 8004608:	f1b8 0f00 	cmp.w	r8, #0
 800460c:	d05b      	beq.n	80046c6 <_dtoa_r+0xa76>
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	4620      	mov	r0, r4
 8004612:	f000 fa0f 	bl	8004a34 <_Balloc>
 8004616:	4605      	mov	r5, r0
 8004618:	b928      	cbnz	r0, 8004626 <_dtoa_r+0x9d6>
 800461a:	4b83      	ldr	r3, [pc, #524]	; (8004828 <_dtoa_r+0xbd8>)
 800461c:	4602      	mov	r2, r0
 800461e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004622:	f7ff bb2e 	b.w	8003c82 <_dtoa_r+0x32>
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	3202      	adds	r2, #2
 800462a:	0092      	lsls	r2, r2, #2
 800462c:	f107 010c 	add.w	r1, r7, #12
 8004630:	300c      	adds	r0, #12
 8004632:	f7ff fa57 	bl	8003ae4 <memcpy>
 8004636:	2201      	movs	r2, #1
 8004638:	4629      	mov	r1, r5
 800463a:	4620      	mov	r0, r4
 800463c:	f000 fc0a 	bl	8004e54 <__lshift>
 8004640:	9b00      	ldr	r3, [sp, #0]
 8004642:	3301      	adds	r3, #1
 8004644:	9304      	str	r3, [sp, #16]
 8004646:	e9dd 2300 	ldrd	r2, r3, [sp]
 800464a:	4413      	add	r3, r2
 800464c:	9308      	str	r3, [sp, #32]
 800464e:	9b02      	ldr	r3, [sp, #8]
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	46b8      	mov	r8, r7
 8004656:	9306      	str	r3, [sp, #24]
 8004658:	4607      	mov	r7, r0
 800465a:	9b04      	ldr	r3, [sp, #16]
 800465c:	4631      	mov	r1, r6
 800465e:	3b01      	subs	r3, #1
 8004660:	4650      	mov	r0, sl
 8004662:	9301      	str	r3, [sp, #4]
 8004664:	f7ff fa6a 	bl	8003b3c <quorem>
 8004668:	4641      	mov	r1, r8
 800466a:	9002      	str	r0, [sp, #8]
 800466c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004670:	4650      	mov	r0, sl
 8004672:	f000 fc5b 	bl	8004f2c <__mcmp>
 8004676:	463a      	mov	r2, r7
 8004678:	9005      	str	r0, [sp, #20]
 800467a:	4631      	mov	r1, r6
 800467c:	4620      	mov	r0, r4
 800467e:	f000 fc71 	bl	8004f64 <__mdiff>
 8004682:	68c2      	ldr	r2, [r0, #12]
 8004684:	4605      	mov	r5, r0
 8004686:	bb02      	cbnz	r2, 80046ca <_dtoa_r+0xa7a>
 8004688:	4601      	mov	r1, r0
 800468a:	4650      	mov	r0, sl
 800468c:	f000 fc4e 	bl	8004f2c <__mcmp>
 8004690:	4602      	mov	r2, r0
 8004692:	4629      	mov	r1, r5
 8004694:	4620      	mov	r0, r4
 8004696:	9209      	str	r2, [sp, #36]	; 0x24
 8004698:	f000 fa0c 	bl	8004ab4 <_Bfree>
 800469c:	9b07      	ldr	r3, [sp, #28]
 800469e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046a0:	9d04      	ldr	r5, [sp, #16]
 80046a2:	ea43 0102 	orr.w	r1, r3, r2
 80046a6:	9b06      	ldr	r3, [sp, #24]
 80046a8:	4319      	orrs	r1, r3
 80046aa:	d110      	bne.n	80046ce <_dtoa_r+0xa7e>
 80046ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80046b0:	d029      	beq.n	8004706 <_dtoa_r+0xab6>
 80046b2:	9b05      	ldr	r3, [sp, #20]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	dd02      	ble.n	80046be <_dtoa_r+0xa6e>
 80046b8:	9b02      	ldr	r3, [sp, #8]
 80046ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80046be:	9b01      	ldr	r3, [sp, #4]
 80046c0:	f883 9000 	strb.w	r9, [r3]
 80046c4:	e774      	b.n	80045b0 <_dtoa_r+0x960>
 80046c6:	4638      	mov	r0, r7
 80046c8:	e7ba      	b.n	8004640 <_dtoa_r+0x9f0>
 80046ca:	2201      	movs	r2, #1
 80046cc:	e7e1      	b.n	8004692 <_dtoa_r+0xa42>
 80046ce:	9b05      	ldr	r3, [sp, #20]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	db04      	blt.n	80046de <_dtoa_r+0xa8e>
 80046d4:	9907      	ldr	r1, [sp, #28]
 80046d6:	430b      	orrs	r3, r1
 80046d8:	9906      	ldr	r1, [sp, #24]
 80046da:	430b      	orrs	r3, r1
 80046dc:	d120      	bne.n	8004720 <_dtoa_r+0xad0>
 80046de:	2a00      	cmp	r2, #0
 80046e0:	dded      	ble.n	80046be <_dtoa_r+0xa6e>
 80046e2:	4651      	mov	r1, sl
 80046e4:	2201      	movs	r2, #1
 80046e6:	4620      	mov	r0, r4
 80046e8:	f000 fbb4 	bl	8004e54 <__lshift>
 80046ec:	4631      	mov	r1, r6
 80046ee:	4682      	mov	sl, r0
 80046f0:	f000 fc1c 	bl	8004f2c <__mcmp>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	dc03      	bgt.n	8004700 <_dtoa_r+0xab0>
 80046f8:	d1e1      	bne.n	80046be <_dtoa_r+0xa6e>
 80046fa:	f019 0f01 	tst.w	r9, #1
 80046fe:	d0de      	beq.n	80046be <_dtoa_r+0xa6e>
 8004700:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004704:	d1d8      	bne.n	80046b8 <_dtoa_r+0xa68>
 8004706:	9a01      	ldr	r2, [sp, #4]
 8004708:	2339      	movs	r3, #57	; 0x39
 800470a:	7013      	strb	r3, [r2, #0]
 800470c:	462b      	mov	r3, r5
 800470e:	461d      	mov	r5, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004716:	2a39      	cmp	r2, #57	; 0x39
 8004718:	d06c      	beq.n	80047f4 <_dtoa_r+0xba4>
 800471a:	3201      	adds	r2, #1
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	e747      	b.n	80045b0 <_dtoa_r+0x960>
 8004720:	2a00      	cmp	r2, #0
 8004722:	dd07      	ble.n	8004734 <_dtoa_r+0xae4>
 8004724:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004728:	d0ed      	beq.n	8004706 <_dtoa_r+0xab6>
 800472a:	9a01      	ldr	r2, [sp, #4]
 800472c:	f109 0301 	add.w	r3, r9, #1
 8004730:	7013      	strb	r3, [r2, #0]
 8004732:	e73d      	b.n	80045b0 <_dtoa_r+0x960>
 8004734:	9b04      	ldr	r3, [sp, #16]
 8004736:	9a08      	ldr	r2, [sp, #32]
 8004738:	f803 9c01 	strb.w	r9, [r3, #-1]
 800473c:	4293      	cmp	r3, r2
 800473e:	d043      	beq.n	80047c8 <_dtoa_r+0xb78>
 8004740:	4651      	mov	r1, sl
 8004742:	2300      	movs	r3, #0
 8004744:	220a      	movs	r2, #10
 8004746:	4620      	mov	r0, r4
 8004748:	f000 f9d6 	bl	8004af8 <__multadd>
 800474c:	45b8      	cmp	r8, r7
 800474e:	4682      	mov	sl, r0
 8004750:	f04f 0300 	mov.w	r3, #0
 8004754:	f04f 020a 	mov.w	r2, #10
 8004758:	4641      	mov	r1, r8
 800475a:	4620      	mov	r0, r4
 800475c:	d107      	bne.n	800476e <_dtoa_r+0xb1e>
 800475e:	f000 f9cb 	bl	8004af8 <__multadd>
 8004762:	4680      	mov	r8, r0
 8004764:	4607      	mov	r7, r0
 8004766:	9b04      	ldr	r3, [sp, #16]
 8004768:	3301      	adds	r3, #1
 800476a:	9304      	str	r3, [sp, #16]
 800476c:	e775      	b.n	800465a <_dtoa_r+0xa0a>
 800476e:	f000 f9c3 	bl	8004af8 <__multadd>
 8004772:	4639      	mov	r1, r7
 8004774:	4680      	mov	r8, r0
 8004776:	2300      	movs	r3, #0
 8004778:	220a      	movs	r2, #10
 800477a:	4620      	mov	r0, r4
 800477c:	f000 f9bc 	bl	8004af8 <__multadd>
 8004780:	4607      	mov	r7, r0
 8004782:	e7f0      	b.n	8004766 <_dtoa_r+0xb16>
 8004784:	9b04      	ldr	r3, [sp, #16]
 8004786:	9301      	str	r3, [sp, #4]
 8004788:	9d00      	ldr	r5, [sp, #0]
 800478a:	4631      	mov	r1, r6
 800478c:	4650      	mov	r0, sl
 800478e:	f7ff f9d5 	bl	8003b3c <quorem>
 8004792:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004796:	9b00      	ldr	r3, [sp, #0]
 8004798:	f805 9b01 	strb.w	r9, [r5], #1
 800479c:	1aea      	subs	r2, r5, r3
 800479e:	9b01      	ldr	r3, [sp, #4]
 80047a0:	4293      	cmp	r3, r2
 80047a2:	dd07      	ble.n	80047b4 <_dtoa_r+0xb64>
 80047a4:	4651      	mov	r1, sl
 80047a6:	2300      	movs	r3, #0
 80047a8:	220a      	movs	r2, #10
 80047aa:	4620      	mov	r0, r4
 80047ac:	f000 f9a4 	bl	8004af8 <__multadd>
 80047b0:	4682      	mov	sl, r0
 80047b2:	e7ea      	b.n	800478a <_dtoa_r+0xb3a>
 80047b4:	9b01      	ldr	r3, [sp, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	bfc8      	it	gt
 80047ba:	461d      	movgt	r5, r3
 80047bc:	9b00      	ldr	r3, [sp, #0]
 80047be:	bfd8      	it	le
 80047c0:	2501      	movle	r5, #1
 80047c2:	441d      	add	r5, r3
 80047c4:	f04f 0800 	mov.w	r8, #0
 80047c8:	4651      	mov	r1, sl
 80047ca:	2201      	movs	r2, #1
 80047cc:	4620      	mov	r0, r4
 80047ce:	f000 fb41 	bl	8004e54 <__lshift>
 80047d2:	4631      	mov	r1, r6
 80047d4:	4682      	mov	sl, r0
 80047d6:	f000 fba9 	bl	8004f2c <__mcmp>
 80047da:	2800      	cmp	r0, #0
 80047dc:	dc96      	bgt.n	800470c <_dtoa_r+0xabc>
 80047de:	d102      	bne.n	80047e6 <_dtoa_r+0xb96>
 80047e0:	f019 0f01 	tst.w	r9, #1
 80047e4:	d192      	bne.n	800470c <_dtoa_r+0xabc>
 80047e6:	462b      	mov	r3, r5
 80047e8:	461d      	mov	r5, r3
 80047ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80047ee:	2a30      	cmp	r2, #48	; 0x30
 80047f0:	d0fa      	beq.n	80047e8 <_dtoa_r+0xb98>
 80047f2:	e6dd      	b.n	80045b0 <_dtoa_r+0x960>
 80047f4:	9a00      	ldr	r2, [sp, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d189      	bne.n	800470e <_dtoa_r+0xabe>
 80047fa:	f10b 0b01 	add.w	fp, fp, #1
 80047fe:	2331      	movs	r3, #49	; 0x31
 8004800:	e796      	b.n	8004730 <_dtoa_r+0xae0>
 8004802:	4b0a      	ldr	r3, [pc, #40]	; (800482c <_dtoa_r+0xbdc>)
 8004804:	f7ff ba99 	b.w	8003d3a <_dtoa_r+0xea>
 8004808:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800480a:	2b00      	cmp	r3, #0
 800480c:	f47f aa6d 	bne.w	8003cea <_dtoa_r+0x9a>
 8004810:	4b07      	ldr	r3, [pc, #28]	; (8004830 <_dtoa_r+0xbe0>)
 8004812:	f7ff ba92 	b.w	8003d3a <_dtoa_r+0xea>
 8004816:	9b01      	ldr	r3, [sp, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	dcb5      	bgt.n	8004788 <_dtoa_r+0xb38>
 800481c:	9b07      	ldr	r3, [sp, #28]
 800481e:	2b02      	cmp	r3, #2
 8004820:	f73f aeb1 	bgt.w	8004586 <_dtoa_r+0x936>
 8004824:	e7b0      	b.n	8004788 <_dtoa_r+0xb38>
 8004826:	bf00      	nop
 8004828:	0800594a 	.word	0x0800594a
 800482c:	0800586e 	.word	0x0800586e
 8004830:	080058ce 	.word	0x080058ce

08004834 <_free_r>:
 8004834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004836:	2900      	cmp	r1, #0
 8004838:	d044      	beq.n	80048c4 <_free_r+0x90>
 800483a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800483e:	9001      	str	r0, [sp, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	f1a1 0404 	sub.w	r4, r1, #4
 8004846:	bfb8      	it	lt
 8004848:	18e4      	addlt	r4, r4, r3
 800484a:	f000 f8e7 	bl	8004a1c <__malloc_lock>
 800484e:	4a1e      	ldr	r2, [pc, #120]	; (80048c8 <_free_r+0x94>)
 8004850:	9801      	ldr	r0, [sp, #4]
 8004852:	6813      	ldr	r3, [r2, #0]
 8004854:	b933      	cbnz	r3, 8004864 <_free_r+0x30>
 8004856:	6063      	str	r3, [r4, #4]
 8004858:	6014      	str	r4, [r2, #0]
 800485a:	b003      	add	sp, #12
 800485c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004860:	f000 b8e2 	b.w	8004a28 <__malloc_unlock>
 8004864:	42a3      	cmp	r3, r4
 8004866:	d908      	bls.n	800487a <_free_r+0x46>
 8004868:	6825      	ldr	r5, [r4, #0]
 800486a:	1961      	adds	r1, r4, r5
 800486c:	428b      	cmp	r3, r1
 800486e:	bf01      	itttt	eq
 8004870:	6819      	ldreq	r1, [r3, #0]
 8004872:	685b      	ldreq	r3, [r3, #4]
 8004874:	1949      	addeq	r1, r1, r5
 8004876:	6021      	streq	r1, [r4, #0]
 8004878:	e7ed      	b.n	8004856 <_free_r+0x22>
 800487a:	461a      	mov	r2, r3
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	b10b      	cbz	r3, 8004884 <_free_r+0x50>
 8004880:	42a3      	cmp	r3, r4
 8004882:	d9fa      	bls.n	800487a <_free_r+0x46>
 8004884:	6811      	ldr	r1, [r2, #0]
 8004886:	1855      	adds	r5, r2, r1
 8004888:	42a5      	cmp	r5, r4
 800488a:	d10b      	bne.n	80048a4 <_free_r+0x70>
 800488c:	6824      	ldr	r4, [r4, #0]
 800488e:	4421      	add	r1, r4
 8004890:	1854      	adds	r4, r2, r1
 8004892:	42a3      	cmp	r3, r4
 8004894:	6011      	str	r1, [r2, #0]
 8004896:	d1e0      	bne.n	800485a <_free_r+0x26>
 8004898:	681c      	ldr	r4, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	6053      	str	r3, [r2, #4]
 800489e:	440c      	add	r4, r1
 80048a0:	6014      	str	r4, [r2, #0]
 80048a2:	e7da      	b.n	800485a <_free_r+0x26>
 80048a4:	d902      	bls.n	80048ac <_free_r+0x78>
 80048a6:	230c      	movs	r3, #12
 80048a8:	6003      	str	r3, [r0, #0]
 80048aa:	e7d6      	b.n	800485a <_free_r+0x26>
 80048ac:	6825      	ldr	r5, [r4, #0]
 80048ae:	1961      	adds	r1, r4, r5
 80048b0:	428b      	cmp	r3, r1
 80048b2:	bf04      	itt	eq
 80048b4:	6819      	ldreq	r1, [r3, #0]
 80048b6:	685b      	ldreq	r3, [r3, #4]
 80048b8:	6063      	str	r3, [r4, #4]
 80048ba:	bf04      	itt	eq
 80048bc:	1949      	addeq	r1, r1, r5
 80048be:	6021      	streq	r1, [r4, #0]
 80048c0:	6054      	str	r4, [r2, #4]
 80048c2:	e7ca      	b.n	800485a <_free_r+0x26>
 80048c4:	b003      	add	sp, #12
 80048c6:	bd30      	pop	{r4, r5, pc}
 80048c8:	20000480 	.word	0x20000480

080048cc <malloc>:
 80048cc:	4b02      	ldr	r3, [pc, #8]	; (80048d8 <malloc+0xc>)
 80048ce:	4601      	mov	r1, r0
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	f000 b823 	b.w	800491c <_malloc_r>
 80048d6:	bf00      	nop
 80048d8:	2000006c 	.word	0x2000006c

080048dc <sbrk_aligned>:
 80048dc:	b570      	push	{r4, r5, r6, lr}
 80048de:	4e0e      	ldr	r6, [pc, #56]	; (8004918 <sbrk_aligned+0x3c>)
 80048e0:	460c      	mov	r4, r1
 80048e2:	6831      	ldr	r1, [r6, #0]
 80048e4:	4605      	mov	r5, r0
 80048e6:	b911      	cbnz	r1, 80048ee <sbrk_aligned+0x12>
 80048e8:	f000 fea8 	bl	800563c <_sbrk_r>
 80048ec:	6030      	str	r0, [r6, #0]
 80048ee:	4621      	mov	r1, r4
 80048f0:	4628      	mov	r0, r5
 80048f2:	f000 fea3 	bl	800563c <_sbrk_r>
 80048f6:	1c43      	adds	r3, r0, #1
 80048f8:	d00a      	beq.n	8004910 <sbrk_aligned+0x34>
 80048fa:	1cc4      	adds	r4, r0, #3
 80048fc:	f024 0403 	bic.w	r4, r4, #3
 8004900:	42a0      	cmp	r0, r4
 8004902:	d007      	beq.n	8004914 <sbrk_aligned+0x38>
 8004904:	1a21      	subs	r1, r4, r0
 8004906:	4628      	mov	r0, r5
 8004908:	f000 fe98 	bl	800563c <_sbrk_r>
 800490c:	3001      	adds	r0, #1
 800490e:	d101      	bne.n	8004914 <sbrk_aligned+0x38>
 8004910:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004914:	4620      	mov	r0, r4
 8004916:	bd70      	pop	{r4, r5, r6, pc}
 8004918:	20000484 	.word	0x20000484

0800491c <_malloc_r>:
 800491c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004920:	1ccd      	adds	r5, r1, #3
 8004922:	f025 0503 	bic.w	r5, r5, #3
 8004926:	3508      	adds	r5, #8
 8004928:	2d0c      	cmp	r5, #12
 800492a:	bf38      	it	cc
 800492c:	250c      	movcc	r5, #12
 800492e:	2d00      	cmp	r5, #0
 8004930:	4607      	mov	r7, r0
 8004932:	db01      	blt.n	8004938 <_malloc_r+0x1c>
 8004934:	42a9      	cmp	r1, r5
 8004936:	d905      	bls.n	8004944 <_malloc_r+0x28>
 8004938:	230c      	movs	r3, #12
 800493a:	603b      	str	r3, [r7, #0]
 800493c:	2600      	movs	r6, #0
 800493e:	4630      	mov	r0, r6
 8004940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004944:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004a18 <_malloc_r+0xfc>
 8004948:	f000 f868 	bl	8004a1c <__malloc_lock>
 800494c:	f8d8 3000 	ldr.w	r3, [r8]
 8004950:	461c      	mov	r4, r3
 8004952:	bb5c      	cbnz	r4, 80049ac <_malloc_r+0x90>
 8004954:	4629      	mov	r1, r5
 8004956:	4638      	mov	r0, r7
 8004958:	f7ff ffc0 	bl	80048dc <sbrk_aligned>
 800495c:	1c43      	adds	r3, r0, #1
 800495e:	4604      	mov	r4, r0
 8004960:	d155      	bne.n	8004a0e <_malloc_r+0xf2>
 8004962:	f8d8 4000 	ldr.w	r4, [r8]
 8004966:	4626      	mov	r6, r4
 8004968:	2e00      	cmp	r6, #0
 800496a:	d145      	bne.n	80049f8 <_malloc_r+0xdc>
 800496c:	2c00      	cmp	r4, #0
 800496e:	d048      	beq.n	8004a02 <_malloc_r+0xe6>
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	4631      	mov	r1, r6
 8004974:	4638      	mov	r0, r7
 8004976:	eb04 0903 	add.w	r9, r4, r3
 800497a:	f000 fe5f 	bl	800563c <_sbrk_r>
 800497e:	4581      	cmp	r9, r0
 8004980:	d13f      	bne.n	8004a02 <_malloc_r+0xe6>
 8004982:	6821      	ldr	r1, [r4, #0]
 8004984:	1a6d      	subs	r5, r5, r1
 8004986:	4629      	mov	r1, r5
 8004988:	4638      	mov	r0, r7
 800498a:	f7ff ffa7 	bl	80048dc <sbrk_aligned>
 800498e:	3001      	adds	r0, #1
 8004990:	d037      	beq.n	8004a02 <_malloc_r+0xe6>
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	442b      	add	r3, r5
 8004996:	6023      	str	r3, [r4, #0]
 8004998:	f8d8 3000 	ldr.w	r3, [r8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d038      	beq.n	8004a12 <_malloc_r+0xf6>
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	42a2      	cmp	r2, r4
 80049a4:	d12b      	bne.n	80049fe <_malloc_r+0xe2>
 80049a6:	2200      	movs	r2, #0
 80049a8:	605a      	str	r2, [r3, #4]
 80049aa:	e00f      	b.n	80049cc <_malloc_r+0xb0>
 80049ac:	6822      	ldr	r2, [r4, #0]
 80049ae:	1b52      	subs	r2, r2, r5
 80049b0:	d41f      	bmi.n	80049f2 <_malloc_r+0xd6>
 80049b2:	2a0b      	cmp	r2, #11
 80049b4:	d917      	bls.n	80049e6 <_malloc_r+0xca>
 80049b6:	1961      	adds	r1, r4, r5
 80049b8:	42a3      	cmp	r3, r4
 80049ba:	6025      	str	r5, [r4, #0]
 80049bc:	bf18      	it	ne
 80049be:	6059      	strne	r1, [r3, #4]
 80049c0:	6863      	ldr	r3, [r4, #4]
 80049c2:	bf08      	it	eq
 80049c4:	f8c8 1000 	streq.w	r1, [r8]
 80049c8:	5162      	str	r2, [r4, r5]
 80049ca:	604b      	str	r3, [r1, #4]
 80049cc:	4638      	mov	r0, r7
 80049ce:	f104 060b 	add.w	r6, r4, #11
 80049d2:	f000 f829 	bl	8004a28 <__malloc_unlock>
 80049d6:	f026 0607 	bic.w	r6, r6, #7
 80049da:	1d23      	adds	r3, r4, #4
 80049dc:	1af2      	subs	r2, r6, r3
 80049de:	d0ae      	beq.n	800493e <_malloc_r+0x22>
 80049e0:	1b9b      	subs	r3, r3, r6
 80049e2:	50a3      	str	r3, [r4, r2]
 80049e4:	e7ab      	b.n	800493e <_malloc_r+0x22>
 80049e6:	42a3      	cmp	r3, r4
 80049e8:	6862      	ldr	r2, [r4, #4]
 80049ea:	d1dd      	bne.n	80049a8 <_malloc_r+0x8c>
 80049ec:	f8c8 2000 	str.w	r2, [r8]
 80049f0:	e7ec      	b.n	80049cc <_malloc_r+0xb0>
 80049f2:	4623      	mov	r3, r4
 80049f4:	6864      	ldr	r4, [r4, #4]
 80049f6:	e7ac      	b.n	8004952 <_malloc_r+0x36>
 80049f8:	4634      	mov	r4, r6
 80049fa:	6876      	ldr	r6, [r6, #4]
 80049fc:	e7b4      	b.n	8004968 <_malloc_r+0x4c>
 80049fe:	4613      	mov	r3, r2
 8004a00:	e7cc      	b.n	800499c <_malloc_r+0x80>
 8004a02:	230c      	movs	r3, #12
 8004a04:	603b      	str	r3, [r7, #0]
 8004a06:	4638      	mov	r0, r7
 8004a08:	f000 f80e 	bl	8004a28 <__malloc_unlock>
 8004a0c:	e797      	b.n	800493e <_malloc_r+0x22>
 8004a0e:	6025      	str	r5, [r4, #0]
 8004a10:	e7dc      	b.n	80049cc <_malloc_r+0xb0>
 8004a12:	605b      	str	r3, [r3, #4]
 8004a14:	deff      	udf	#255	; 0xff
 8004a16:	bf00      	nop
 8004a18:	20000480 	.word	0x20000480

08004a1c <__malloc_lock>:
 8004a1c:	4801      	ldr	r0, [pc, #4]	; (8004a24 <__malloc_lock+0x8>)
 8004a1e:	f7ff b85f 	b.w	8003ae0 <__retarget_lock_acquire_recursive>
 8004a22:	bf00      	nop
 8004a24:	2000047c 	.word	0x2000047c

08004a28 <__malloc_unlock>:
 8004a28:	4801      	ldr	r0, [pc, #4]	; (8004a30 <__malloc_unlock+0x8>)
 8004a2a:	f7ff b85a 	b.w	8003ae2 <__retarget_lock_release_recursive>
 8004a2e:	bf00      	nop
 8004a30:	2000047c 	.word	0x2000047c

08004a34 <_Balloc>:
 8004a34:	b570      	push	{r4, r5, r6, lr}
 8004a36:	69c6      	ldr	r6, [r0, #28]
 8004a38:	4604      	mov	r4, r0
 8004a3a:	460d      	mov	r5, r1
 8004a3c:	b976      	cbnz	r6, 8004a5c <_Balloc+0x28>
 8004a3e:	2010      	movs	r0, #16
 8004a40:	f7ff ff44 	bl	80048cc <malloc>
 8004a44:	4602      	mov	r2, r0
 8004a46:	61e0      	str	r0, [r4, #28]
 8004a48:	b920      	cbnz	r0, 8004a54 <_Balloc+0x20>
 8004a4a:	4b18      	ldr	r3, [pc, #96]	; (8004aac <_Balloc+0x78>)
 8004a4c:	4818      	ldr	r0, [pc, #96]	; (8004ab0 <_Balloc+0x7c>)
 8004a4e:	216b      	movs	r1, #107	; 0x6b
 8004a50:	f7ff f856 	bl	8003b00 <__assert_func>
 8004a54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a58:	6006      	str	r6, [r0, #0]
 8004a5a:	60c6      	str	r6, [r0, #12]
 8004a5c:	69e6      	ldr	r6, [r4, #28]
 8004a5e:	68f3      	ldr	r3, [r6, #12]
 8004a60:	b183      	cbz	r3, 8004a84 <_Balloc+0x50>
 8004a62:	69e3      	ldr	r3, [r4, #28]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004a6a:	b9b8      	cbnz	r0, 8004a9c <_Balloc+0x68>
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	fa01 f605 	lsl.w	r6, r1, r5
 8004a72:	1d72      	adds	r2, r6, #5
 8004a74:	0092      	lsls	r2, r2, #2
 8004a76:	4620      	mov	r0, r4
 8004a78:	f000 fdf7 	bl	800566a <_calloc_r>
 8004a7c:	b160      	cbz	r0, 8004a98 <_Balloc+0x64>
 8004a7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004a82:	e00e      	b.n	8004aa2 <_Balloc+0x6e>
 8004a84:	2221      	movs	r2, #33	; 0x21
 8004a86:	2104      	movs	r1, #4
 8004a88:	4620      	mov	r0, r4
 8004a8a:	f000 fdee 	bl	800566a <_calloc_r>
 8004a8e:	69e3      	ldr	r3, [r4, #28]
 8004a90:	60f0      	str	r0, [r6, #12]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e4      	bne.n	8004a62 <_Balloc+0x2e>
 8004a98:	2000      	movs	r0, #0
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}
 8004a9c:	6802      	ldr	r2, [r0, #0]
 8004a9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004aa8:	e7f7      	b.n	8004a9a <_Balloc+0x66>
 8004aaa:	bf00      	nop
 8004aac:	080058db 	.word	0x080058db
 8004ab0:	0800595b 	.word	0x0800595b

08004ab4 <_Bfree>:
 8004ab4:	b570      	push	{r4, r5, r6, lr}
 8004ab6:	69c6      	ldr	r6, [r0, #28]
 8004ab8:	4605      	mov	r5, r0
 8004aba:	460c      	mov	r4, r1
 8004abc:	b976      	cbnz	r6, 8004adc <_Bfree+0x28>
 8004abe:	2010      	movs	r0, #16
 8004ac0:	f7ff ff04 	bl	80048cc <malloc>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	61e8      	str	r0, [r5, #28]
 8004ac8:	b920      	cbnz	r0, 8004ad4 <_Bfree+0x20>
 8004aca:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <_Bfree+0x3c>)
 8004acc:	4809      	ldr	r0, [pc, #36]	; (8004af4 <_Bfree+0x40>)
 8004ace:	218f      	movs	r1, #143	; 0x8f
 8004ad0:	f7ff f816 	bl	8003b00 <__assert_func>
 8004ad4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ad8:	6006      	str	r6, [r0, #0]
 8004ada:	60c6      	str	r6, [r0, #12]
 8004adc:	b13c      	cbz	r4, 8004aee <_Bfree+0x3a>
 8004ade:	69eb      	ldr	r3, [r5, #28]
 8004ae0:	6862      	ldr	r2, [r4, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ae8:	6021      	str	r1, [r4, #0]
 8004aea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004aee:	bd70      	pop	{r4, r5, r6, pc}
 8004af0:	080058db 	.word	0x080058db
 8004af4:	0800595b 	.word	0x0800595b

08004af8 <__multadd>:
 8004af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004afc:	690d      	ldr	r5, [r1, #16]
 8004afe:	4607      	mov	r7, r0
 8004b00:	460c      	mov	r4, r1
 8004b02:	461e      	mov	r6, r3
 8004b04:	f101 0c14 	add.w	ip, r1, #20
 8004b08:	2000      	movs	r0, #0
 8004b0a:	f8dc 3000 	ldr.w	r3, [ip]
 8004b0e:	b299      	uxth	r1, r3
 8004b10:	fb02 6101 	mla	r1, r2, r1, r6
 8004b14:	0c1e      	lsrs	r6, r3, #16
 8004b16:	0c0b      	lsrs	r3, r1, #16
 8004b18:	fb02 3306 	mla	r3, r2, r6, r3
 8004b1c:	b289      	uxth	r1, r1
 8004b1e:	3001      	adds	r0, #1
 8004b20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004b24:	4285      	cmp	r5, r0
 8004b26:	f84c 1b04 	str.w	r1, [ip], #4
 8004b2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004b2e:	dcec      	bgt.n	8004b0a <__multadd+0x12>
 8004b30:	b30e      	cbz	r6, 8004b76 <__multadd+0x7e>
 8004b32:	68a3      	ldr	r3, [r4, #8]
 8004b34:	42ab      	cmp	r3, r5
 8004b36:	dc19      	bgt.n	8004b6c <__multadd+0x74>
 8004b38:	6861      	ldr	r1, [r4, #4]
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	3101      	adds	r1, #1
 8004b3e:	f7ff ff79 	bl	8004a34 <_Balloc>
 8004b42:	4680      	mov	r8, r0
 8004b44:	b928      	cbnz	r0, 8004b52 <__multadd+0x5a>
 8004b46:	4602      	mov	r2, r0
 8004b48:	4b0c      	ldr	r3, [pc, #48]	; (8004b7c <__multadd+0x84>)
 8004b4a:	480d      	ldr	r0, [pc, #52]	; (8004b80 <__multadd+0x88>)
 8004b4c:	21ba      	movs	r1, #186	; 0xba
 8004b4e:	f7fe ffd7 	bl	8003b00 <__assert_func>
 8004b52:	6922      	ldr	r2, [r4, #16]
 8004b54:	3202      	adds	r2, #2
 8004b56:	f104 010c 	add.w	r1, r4, #12
 8004b5a:	0092      	lsls	r2, r2, #2
 8004b5c:	300c      	adds	r0, #12
 8004b5e:	f7fe ffc1 	bl	8003ae4 <memcpy>
 8004b62:	4621      	mov	r1, r4
 8004b64:	4638      	mov	r0, r7
 8004b66:	f7ff ffa5 	bl	8004ab4 <_Bfree>
 8004b6a:	4644      	mov	r4, r8
 8004b6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004b70:	3501      	adds	r5, #1
 8004b72:	615e      	str	r6, [r3, #20]
 8004b74:	6125      	str	r5, [r4, #16]
 8004b76:	4620      	mov	r0, r4
 8004b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b7c:	0800594a 	.word	0x0800594a
 8004b80:	0800595b 	.word	0x0800595b

08004b84 <__hi0bits>:
 8004b84:	0c03      	lsrs	r3, r0, #16
 8004b86:	041b      	lsls	r3, r3, #16
 8004b88:	b9d3      	cbnz	r3, 8004bc0 <__hi0bits+0x3c>
 8004b8a:	0400      	lsls	r0, r0, #16
 8004b8c:	2310      	movs	r3, #16
 8004b8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004b92:	bf04      	itt	eq
 8004b94:	0200      	lsleq	r0, r0, #8
 8004b96:	3308      	addeq	r3, #8
 8004b98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004b9c:	bf04      	itt	eq
 8004b9e:	0100      	lsleq	r0, r0, #4
 8004ba0:	3304      	addeq	r3, #4
 8004ba2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004ba6:	bf04      	itt	eq
 8004ba8:	0080      	lsleq	r0, r0, #2
 8004baa:	3302      	addeq	r3, #2
 8004bac:	2800      	cmp	r0, #0
 8004bae:	db05      	blt.n	8004bbc <__hi0bits+0x38>
 8004bb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004bb4:	f103 0301 	add.w	r3, r3, #1
 8004bb8:	bf08      	it	eq
 8004bba:	2320      	moveq	r3, #32
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	4770      	bx	lr
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	e7e4      	b.n	8004b8e <__hi0bits+0xa>

08004bc4 <__lo0bits>:
 8004bc4:	6803      	ldr	r3, [r0, #0]
 8004bc6:	f013 0207 	ands.w	r2, r3, #7
 8004bca:	d00c      	beq.n	8004be6 <__lo0bits+0x22>
 8004bcc:	07d9      	lsls	r1, r3, #31
 8004bce:	d422      	bmi.n	8004c16 <__lo0bits+0x52>
 8004bd0:	079a      	lsls	r2, r3, #30
 8004bd2:	bf49      	itett	mi
 8004bd4:	085b      	lsrmi	r3, r3, #1
 8004bd6:	089b      	lsrpl	r3, r3, #2
 8004bd8:	6003      	strmi	r3, [r0, #0]
 8004bda:	2201      	movmi	r2, #1
 8004bdc:	bf5c      	itt	pl
 8004bde:	6003      	strpl	r3, [r0, #0]
 8004be0:	2202      	movpl	r2, #2
 8004be2:	4610      	mov	r0, r2
 8004be4:	4770      	bx	lr
 8004be6:	b299      	uxth	r1, r3
 8004be8:	b909      	cbnz	r1, 8004bee <__lo0bits+0x2a>
 8004bea:	0c1b      	lsrs	r3, r3, #16
 8004bec:	2210      	movs	r2, #16
 8004bee:	b2d9      	uxtb	r1, r3
 8004bf0:	b909      	cbnz	r1, 8004bf6 <__lo0bits+0x32>
 8004bf2:	3208      	adds	r2, #8
 8004bf4:	0a1b      	lsrs	r3, r3, #8
 8004bf6:	0719      	lsls	r1, r3, #28
 8004bf8:	bf04      	itt	eq
 8004bfa:	091b      	lsreq	r3, r3, #4
 8004bfc:	3204      	addeq	r2, #4
 8004bfe:	0799      	lsls	r1, r3, #30
 8004c00:	bf04      	itt	eq
 8004c02:	089b      	lsreq	r3, r3, #2
 8004c04:	3202      	addeq	r2, #2
 8004c06:	07d9      	lsls	r1, r3, #31
 8004c08:	d403      	bmi.n	8004c12 <__lo0bits+0x4e>
 8004c0a:	085b      	lsrs	r3, r3, #1
 8004c0c:	f102 0201 	add.w	r2, r2, #1
 8004c10:	d003      	beq.n	8004c1a <__lo0bits+0x56>
 8004c12:	6003      	str	r3, [r0, #0]
 8004c14:	e7e5      	b.n	8004be2 <__lo0bits+0x1e>
 8004c16:	2200      	movs	r2, #0
 8004c18:	e7e3      	b.n	8004be2 <__lo0bits+0x1e>
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	e7e1      	b.n	8004be2 <__lo0bits+0x1e>
	...

08004c20 <__i2b>:
 8004c20:	b510      	push	{r4, lr}
 8004c22:	460c      	mov	r4, r1
 8004c24:	2101      	movs	r1, #1
 8004c26:	f7ff ff05 	bl	8004a34 <_Balloc>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	b928      	cbnz	r0, 8004c3a <__i2b+0x1a>
 8004c2e:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <__i2b+0x24>)
 8004c30:	4805      	ldr	r0, [pc, #20]	; (8004c48 <__i2b+0x28>)
 8004c32:	f240 1145 	movw	r1, #325	; 0x145
 8004c36:	f7fe ff63 	bl	8003b00 <__assert_func>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	6144      	str	r4, [r0, #20]
 8004c3e:	6103      	str	r3, [r0, #16]
 8004c40:	bd10      	pop	{r4, pc}
 8004c42:	bf00      	nop
 8004c44:	0800594a 	.word	0x0800594a
 8004c48:	0800595b 	.word	0x0800595b

08004c4c <__multiply>:
 8004c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c50:	4691      	mov	r9, r2
 8004c52:	690a      	ldr	r2, [r1, #16]
 8004c54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	bfb8      	it	lt
 8004c5c:	460b      	movlt	r3, r1
 8004c5e:	460c      	mov	r4, r1
 8004c60:	bfbc      	itt	lt
 8004c62:	464c      	movlt	r4, r9
 8004c64:	4699      	movlt	r9, r3
 8004c66:	6927      	ldr	r7, [r4, #16]
 8004c68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004c6c:	68a3      	ldr	r3, [r4, #8]
 8004c6e:	6861      	ldr	r1, [r4, #4]
 8004c70:	eb07 060a 	add.w	r6, r7, sl
 8004c74:	42b3      	cmp	r3, r6
 8004c76:	b085      	sub	sp, #20
 8004c78:	bfb8      	it	lt
 8004c7a:	3101      	addlt	r1, #1
 8004c7c:	f7ff feda 	bl	8004a34 <_Balloc>
 8004c80:	b930      	cbnz	r0, 8004c90 <__multiply+0x44>
 8004c82:	4602      	mov	r2, r0
 8004c84:	4b44      	ldr	r3, [pc, #272]	; (8004d98 <__multiply+0x14c>)
 8004c86:	4845      	ldr	r0, [pc, #276]	; (8004d9c <__multiply+0x150>)
 8004c88:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004c8c:	f7fe ff38 	bl	8003b00 <__assert_func>
 8004c90:	f100 0514 	add.w	r5, r0, #20
 8004c94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004c98:	462b      	mov	r3, r5
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	4543      	cmp	r3, r8
 8004c9e:	d321      	bcc.n	8004ce4 <__multiply+0x98>
 8004ca0:	f104 0314 	add.w	r3, r4, #20
 8004ca4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004ca8:	f109 0314 	add.w	r3, r9, #20
 8004cac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004cb0:	9202      	str	r2, [sp, #8]
 8004cb2:	1b3a      	subs	r2, r7, r4
 8004cb4:	3a15      	subs	r2, #21
 8004cb6:	f022 0203 	bic.w	r2, r2, #3
 8004cba:	3204      	adds	r2, #4
 8004cbc:	f104 0115 	add.w	r1, r4, #21
 8004cc0:	428f      	cmp	r7, r1
 8004cc2:	bf38      	it	cc
 8004cc4:	2204      	movcc	r2, #4
 8004cc6:	9201      	str	r2, [sp, #4]
 8004cc8:	9a02      	ldr	r2, [sp, #8]
 8004cca:	9303      	str	r3, [sp, #12]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d80c      	bhi.n	8004cea <__multiply+0x9e>
 8004cd0:	2e00      	cmp	r6, #0
 8004cd2:	dd03      	ble.n	8004cdc <__multiply+0x90>
 8004cd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d05b      	beq.n	8004d94 <__multiply+0x148>
 8004cdc:	6106      	str	r6, [r0, #16]
 8004cde:	b005      	add	sp, #20
 8004ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce4:	f843 2b04 	str.w	r2, [r3], #4
 8004ce8:	e7d8      	b.n	8004c9c <__multiply+0x50>
 8004cea:	f8b3 a000 	ldrh.w	sl, [r3]
 8004cee:	f1ba 0f00 	cmp.w	sl, #0
 8004cf2:	d024      	beq.n	8004d3e <__multiply+0xf2>
 8004cf4:	f104 0e14 	add.w	lr, r4, #20
 8004cf8:	46a9      	mov	r9, r5
 8004cfa:	f04f 0c00 	mov.w	ip, #0
 8004cfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004d02:	f8d9 1000 	ldr.w	r1, [r9]
 8004d06:	fa1f fb82 	uxth.w	fp, r2
 8004d0a:	b289      	uxth	r1, r1
 8004d0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8004d10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004d14:	f8d9 2000 	ldr.w	r2, [r9]
 8004d18:	4461      	add	r1, ip
 8004d1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004d1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8004d22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004d26:	b289      	uxth	r1, r1
 8004d28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004d2c:	4577      	cmp	r7, lr
 8004d2e:	f849 1b04 	str.w	r1, [r9], #4
 8004d32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004d36:	d8e2      	bhi.n	8004cfe <__multiply+0xb2>
 8004d38:	9a01      	ldr	r2, [sp, #4]
 8004d3a:	f845 c002 	str.w	ip, [r5, r2]
 8004d3e:	9a03      	ldr	r2, [sp, #12]
 8004d40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004d44:	3304      	adds	r3, #4
 8004d46:	f1b9 0f00 	cmp.w	r9, #0
 8004d4a:	d021      	beq.n	8004d90 <__multiply+0x144>
 8004d4c:	6829      	ldr	r1, [r5, #0]
 8004d4e:	f104 0c14 	add.w	ip, r4, #20
 8004d52:	46ae      	mov	lr, r5
 8004d54:	f04f 0a00 	mov.w	sl, #0
 8004d58:	f8bc b000 	ldrh.w	fp, [ip]
 8004d5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004d60:	fb09 220b 	mla	r2, r9, fp, r2
 8004d64:	4452      	add	r2, sl
 8004d66:	b289      	uxth	r1, r1
 8004d68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004d6c:	f84e 1b04 	str.w	r1, [lr], #4
 8004d70:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004d74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004d78:	f8be 1000 	ldrh.w	r1, [lr]
 8004d7c:	fb09 110a 	mla	r1, r9, sl, r1
 8004d80:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004d84:	4567      	cmp	r7, ip
 8004d86:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004d8a:	d8e5      	bhi.n	8004d58 <__multiply+0x10c>
 8004d8c:	9a01      	ldr	r2, [sp, #4]
 8004d8e:	50a9      	str	r1, [r5, r2]
 8004d90:	3504      	adds	r5, #4
 8004d92:	e799      	b.n	8004cc8 <__multiply+0x7c>
 8004d94:	3e01      	subs	r6, #1
 8004d96:	e79b      	b.n	8004cd0 <__multiply+0x84>
 8004d98:	0800594a 	.word	0x0800594a
 8004d9c:	0800595b 	.word	0x0800595b

08004da0 <__pow5mult>:
 8004da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004da4:	4615      	mov	r5, r2
 8004da6:	f012 0203 	ands.w	r2, r2, #3
 8004daa:	4606      	mov	r6, r0
 8004dac:	460f      	mov	r7, r1
 8004dae:	d007      	beq.n	8004dc0 <__pow5mult+0x20>
 8004db0:	4c25      	ldr	r4, [pc, #148]	; (8004e48 <__pow5mult+0xa8>)
 8004db2:	3a01      	subs	r2, #1
 8004db4:	2300      	movs	r3, #0
 8004db6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004dba:	f7ff fe9d 	bl	8004af8 <__multadd>
 8004dbe:	4607      	mov	r7, r0
 8004dc0:	10ad      	asrs	r5, r5, #2
 8004dc2:	d03d      	beq.n	8004e40 <__pow5mult+0xa0>
 8004dc4:	69f4      	ldr	r4, [r6, #28]
 8004dc6:	b97c      	cbnz	r4, 8004de8 <__pow5mult+0x48>
 8004dc8:	2010      	movs	r0, #16
 8004dca:	f7ff fd7f 	bl	80048cc <malloc>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	61f0      	str	r0, [r6, #28]
 8004dd2:	b928      	cbnz	r0, 8004de0 <__pow5mult+0x40>
 8004dd4:	4b1d      	ldr	r3, [pc, #116]	; (8004e4c <__pow5mult+0xac>)
 8004dd6:	481e      	ldr	r0, [pc, #120]	; (8004e50 <__pow5mult+0xb0>)
 8004dd8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004ddc:	f7fe fe90 	bl	8003b00 <__assert_func>
 8004de0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004de4:	6004      	str	r4, [r0, #0]
 8004de6:	60c4      	str	r4, [r0, #12]
 8004de8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004dec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004df0:	b94c      	cbnz	r4, 8004e06 <__pow5mult+0x66>
 8004df2:	f240 2171 	movw	r1, #625	; 0x271
 8004df6:	4630      	mov	r0, r6
 8004df8:	f7ff ff12 	bl	8004c20 <__i2b>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e02:	4604      	mov	r4, r0
 8004e04:	6003      	str	r3, [r0, #0]
 8004e06:	f04f 0900 	mov.w	r9, #0
 8004e0a:	07eb      	lsls	r3, r5, #31
 8004e0c:	d50a      	bpl.n	8004e24 <__pow5mult+0x84>
 8004e0e:	4639      	mov	r1, r7
 8004e10:	4622      	mov	r2, r4
 8004e12:	4630      	mov	r0, r6
 8004e14:	f7ff ff1a 	bl	8004c4c <__multiply>
 8004e18:	4639      	mov	r1, r7
 8004e1a:	4680      	mov	r8, r0
 8004e1c:	4630      	mov	r0, r6
 8004e1e:	f7ff fe49 	bl	8004ab4 <_Bfree>
 8004e22:	4647      	mov	r7, r8
 8004e24:	106d      	asrs	r5, r5, #1
 8004e26:	d00b      	beq.n	8004e40 <__pow5mult+0xa0>
 8004e28:	6820      	ldr	r0, [r4, #0]
 8004e2a:	b938      	cbnz	r0, 8004e3c <__pow5mult+0x9c>
 8004e2c:	4622      	mov	r2, r4
 8004e2e:	4621      	mov	r1, r4
 8004e30:	4630      	mov	r0, r6
 8004e32:	f7ff ff0b 	bl	8004c4c <__multiply>
 8004e36:	6020      	str	r0, [r4, #0]
 8004e38:	f8c0 9000 	str.w	r9, [r0]
 8004e3c:	4604      	mov	r4, r0
 8004e3e:	e7e4      	b.n	8004e0a <__pow5mult+0x6a>
 8004e40:	4638      	mov	r0, r7
 8004e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e46:	bf00      	nop
 8004e48:	08005aa8 	.word	0x08005aa8
 8004e4c:	080058db 	.word	0x080058db
 8004e50:	0800595b 	.word	0x0800595b

08004e54 <__lshift>:
 8004e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e58:	460c      	mov	r4, r1
 8004e5a:	6849      	ldr	r1, [r1, #4]
 8004e5c:	6923      	ldr	r3, [r4, #16]
 8004e5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004e62:	68a3      	ldr	r3, [r4, #8]
 8004e64:	4607      	mov	r7, r0
 8004e66:	4691      	mov	r9, r2
 8004e68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004e6c:	f108 0601 	add.w	r6, r8, #1
 8004e70:	42b3      	cmp	r3, r6
 8004e72:	db0b      	blt.n	8004e8c <__lshift+0x38>
 8004e74:	4638      	mov	r0, r7
 8004e76:	f7ff fddd 	bl	8004a34 <_Balloc>
 8004e7a:	4605      	mov	r5, r0
 8004e7c:	b948      	cbnz	r0, 8004e92 <__lshift+0x3e>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	4b28      	ldr	r3, [pc, #160]	; (8004f24 <__lshift+0xd0>)
 8004e82:	4829      	ldr	r0, [pc, #164]	; (8004f28 <__lshift+0xd4>)
 8004e84:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004e88:	f7fe fe3a 	bl	8003b00 <__assert_func>
 8004e8c:	3101      	adds	r1, #1
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	e7ee      	b.n	8004e70 <__lshift+0x1c>
 8004e92:	2300      	movs	r3, #0
 8004e94:	f100 0114 	add.w	r1, r0, #20
 8004e98:	f100 0210 	add.w	r2, r0, #16
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	4553      	cmp	r3, sl
 8004ea0:	db33      	blt.n	8004f0a <__lshift+0xb6>
 8004ea2:	6920      	ldr	r0, [r4, #16]
 8004ea4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ea8:	f104 0314 	add.w	r3, r4, #20
 8004eac:	f019 091f 	ands.w	r9, r9, #31
 8004eb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004eb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004eb8:	d02b      	beq.n	8004f12 <__lshift+0xbe>
 8004eba:	f1c9 0e20 	rsb	lr, r9, #32
 8004ebe:	468a      	mov	sl, r1
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	fa00 f009 	lsl.w	r0, r0, r9
 8004ec8:	4310      	orrs	r0, r2
 8004eca:	f84a 0b04 	str.w	r0, [sl], #4
 8004ece:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ed2:	459c      	cmp	ip, r3
 8004ed4:	fa22 f20e 	lsr.w	r2, r2, lr
 8004ed8:	d8f3      	bhi.n	8004ec2 <__lshift+0x6e>
 8004eda:	ebac 0304 	sub.w	r3, ip, r4
 8004ede:	3b15      	subs	r3, #21
 8004ee0:	f023 0303 	bic.w	r3, r3, #3
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	f104 0015 	add.w	r0, r4, #21
 8004eea:	4584      	cmp	ip, r0
 8004eec:	bf38      	it	cc
 8004eee:	2304      	movcc	r3, #4
 8004ef0:	50ca      	str	r2, [r1, r3]
 8004ef2:	b10a      	cbz	r2, 8004ef8 <__lshift+0xa4>
 8004ef4:	f108 0602 	add.w	r6, r8, #2
 8004ef8:	3e01      	subs	r6, #1
 8004efa:	4638      	mov	r0, r7
 8004efc:	612e      	str	r6, [r5, #16]
 8004efe:	4621      	mov	r1, r4
 8004f00:	f7ff fdd8 	bl	8004ab4 <_Bfree>
 8004f04:	4628      	mov	r0, r5
 8004f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004f0e:	3301      	adds	r3, #1
 8004f10:	e7c5      	b.n	8004e9e <__lshift+0x4a>
 8004f12:	3904      	subs	r1, #4
 8004f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f18:	f841 2f04 	str.w	r2, [r1, #4]!
 8004f1c:	459c      	cmp	ip, r3
 8004f1e:	d8f9      	bhi.n	8004f14 <__lshift+0xc0>
 8004f20:	e7ea      	b.n	8004ef8 <__lshift+0xa4>
 8004f22:	bf00      	nop
 8004f24:	0800594a 	.word	0x0800594a
 8004f28:	0800595b 	.word	0x0800595b

08004f2c <__mcmp>:
 8004f2c:	b530      	push	{r4, r5, lr}
 8004f2e:	6902      	ldr	r2, [r0, #16]
 8004f30:	690c      	ldr	r4, [r1, #16]
 8004f32:	1b12      	subs	r2, r2, r4
 8004f34:	d10e      	bne.n	8004f54 <__mcmp+0x28>
 8004f36:	f100 0314 	add.w	r3, r0, #20
 8004f3a:	3114      	adds	r1, #20
 8004f3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004f40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004f44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004f48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004f4c:	42a5      	cmp	r5, r4
 8004f4e:	d003      	beq.n	8004f58 <__mcmp+0x2c>
 8004f50:	d305      	bcc.n	8004f5e <__mcmp+0x32>
 8004f52:	2201      	movs	r2, #1
 8004f54:	4610      	mov	r0, r2
 8004f56:	bd30      	pop	{r4, r5, pc}
 8004f58:	4283      	cmp	r3, r0
 8004f5a:	d3f3      	bcc.n	8004f44 <__mcmp+0x18>
 8004f5c:	e7fa      	b.n	8004f54 <__mcmp+0x28>
 8004f5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f62:	e7f7      	b.n	8004f54 <__mcmp+0x28>

08004f64 <__mdiff>:
 8004f64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f68:	460c      	mov	r4, r1
 8004f6a:	4606      	mov	r6, r0
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	4620      	mov	r0, r4
 8004f70:	4690      	mov	r8, r2
 8004f72:	f7ff ffdb 	bl	8004f2c <__mcmp>
 8004f76:	1e05      	subs	r5, r0, #0
 8004f78:	d110      	bne.n	8004f9c <__mdiff+0x38>
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f7ff fd59 	bl	8004a34 <_Balloc>
 8004f82:	b930      	cbnz	r0, 8004f92 <__mdiff+0x2e>
 8004f84:	4b3a      	ldr	r3, [pc, #232]	; (8005070 <__mdiff+0x10c>)
 8004f86:	4602      	mov	r2, r0
 8004f88:	f240 2137 	movw	r1, #567	; 0x237
 8004f8c:	4839      	ldr	r0, [pc, #228]	; (8005074 <__mdiff+0x110>)
 8004f8e:	f7fe fdb7 	bl	8003b00 <__assert_func>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004f98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f9c:	bfa4      	itt	ge
 8004f9e:	4643      	movge	r3, r8
 8004fa0:	46a0      	movge	r8, r4
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004fa8:	bfa6      	itte	ge
 8004faa:	461c      	movge	r4, r3
 8004fac:	2500      	movge	r5, #0
 8004fae:	2501      	movlt	r5, #1
 8004fb0:	f7ff fd40 	bl	8004a34 <_Balloc>
 8004fb4:	b920      	cbnz	r0, 8004fc0 <__mdiff+0x5c>
 8004fb6:	4b2e      	ldr	r3, [pc, #184]	; (8005070 <__mdiff+0x10c>)
 8004fb8:	4602      	mov	r2, r0
 8004fba:	f240 2145 	movw	r1, #581	; 0x245
 8004fbe:	e7e5      	b.n	8004f8c <__mdiff+0x28>
 8004fc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004fc4:	6926      	ldr	r6, [r4, #16]
 8004fc6:	60c5      	str	r5, [r0, #12]
 8004fc8:	f104 0914 	add.w	r9, r4, #20
 8004fcc:	f108 0514 	add.w	r5, r8, #20
 8004fd0:	f100 0e14 	add.w	lr, r0, #20
 8004fd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004fd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004fdc:	f108 0210 	add.w	r2, r8, #16
 8004fe0:	46f2      	mov	sl, lr
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	f859 3b04 	ldr.w	r3, [r9], #4
 8004fe8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004fec:	fa11 f88b 	uxtah	r8, r1, fp
 8004ff0:	b299      	uxth	r1, r3
 8004ff2:	0c1b      	lsrs	r3, r3, #16
 8004ff4:	eba8 0801 	sub.w	r8, r8, r1
 8004ff8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004ffc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005000:	fa1f f888 	uxth.w	r8, r8
 8005004:	1419      	asrs	r1, r3, #16
 8005006:	454e      	cmp	r6, r9
 8005008:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800500c:	f84a 3b04 	str.w	r3, [sl], #4
 8005010:	d8e8      	bhi.n	8004fe4 <__mdiff+0x80>
 8005012:	1b33      	subs	r3, r6, r4
 8005014:	3b15      	subs	r3, #21
 8005016:	f023 0303 	bic.w	r3, r3, #3
 800501a:	3304      	adds	r3, #4
 800501c:	3415      	adds	r4, #21
 800501e:	42a6      	cmp	r6, r4
 8005020:	bf38      	it	cc
 8005022:	2304      	movcc	r3, #4
 8005024:	441d      	add	r5, r3
 8005026:	4473      	add	r3, lr
 8005028:	469e      	mov	lr, r3
 800502a:	462e      	mov	r6, r5
 800502c:	4566      	cmp	r6, ip
 800502e:	d30e      	bcc.n	800504e <__mdiff+0xea>
 8005030:	f10c 0203 	add.w	r2, ip, #3
 8005034:	1b52      	subs	r2, r2, r5
 8005036:	f022 0203 	bic.w	r2, r2, #3
 800503a:	3d03      	subs	r5, #3
 800503c:	45ac      	cmp	ip, r5
 800503e:	bf38      	it	cc
 8005040:	2200      	movcc	r2, #0
 8005042:	4413      	add	r3, r2
 8005044:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005048:	b17a      	cbz	r2, 800506a <__mdiff+0x106>
 800504a:	6107      	str	r7, [r0, #16]
 800504c:	e7a4      	b.n	8004f98 <__mdiff+0x34>
 800504e:	f856 8b04 	ldr.w	r8, [r6], #4
 8005052:	fa11 f288 	uxtah	r2, r1, r8
 8005056:	1414      	asrs	r4, r2, #16
 8005058:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800505c:	b292      	uxth	r2, r2
 800505e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005062:	f84e 2b04 	str.w	r2, [lr], #4
 8005066:	1421      	asrs	r1, r4, #16
 8005068:	e7e0      	b.n	800502c <__mdiff+0xc8>
 800506a:	3f01      	subs	r7, #1
 800506c:	e7ea      	b.n	8005044 <__mdiff+0xe0>
 800506e:	bf00      	nop
 8005070:	0800594a 	.word	0x0800594a
 8005074:	0800595b 	.word	0x0800595b

08005078 <__d2b>:
 8005078:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800507c:	460f      	mov	r7, r1
 800507e:	2101      	movs	r1, #1
 8005080:	ec59 8b10 	vmov	r8, r9, d0
 8005084:	4616      	mov	r6, r2
 8005086:	f7ff fcd5 	bl	8004a34 <_Balloc>
 800508a:	4604      	mov	r4, r0
 800508c:	b930      	cbnz	r0, 800509c <__d2b+0x24>
 800508e:	4602      	mov	r2, r0
 8005090:	4b24      	ldr	r3, [pc, #144]	; (8005124 <__d2b+0xac>)
 8005092:	4825      	ldr	r0, [pc, #148]	; (8005128 <__d2b+0xb0>)
 8005094:	f240 310f 	movw	r1, #783	; 0x30f
 8005098:	f7fe fd32 	bl	8003b00 <__assert_func>
 800509c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80050a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80050a4:	bb2d      	cbnz	r5, 80050f2 <__d2b+0x7a>
 80050a6:	9301      	str	r3, [sp, #4]
 80050a8:	f1b8 0300 	subs.w	r3, r8, #0
 80050ac:	d026      	beq.n	80050fc <__d2b+0x84>
 80050ae:	4668      	mov	r0, sp
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	f7ff fd87 	bl	8004bc4 <__lo0bits>
 80050b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80050ba:	b1e8      	cbz	r0, 80050f8 <__d2b+0x80>
 80050bc:	f1c0 0320 	rsb	r3, r0, #32
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	430b      	orrs	r3, r1
 80050c6:	40c2      	lsrs	r2, r0
 80050c8:	6163      	str	r3, [r4, #20]
 80050ca:	9201      	str	r2, [sp, #4]
 80050cc:	9b01      	ldr	r3, [sp, #4]
 80050ce:	61a3      	str	r3, [r4, #24]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	bf14      	ite	ne
 80050d4:	2202      	movne	r2, #2
 80050d6:	2201      	moveq	r2, #1
 80050d8:	6122      	str	r2, [r4, #16]
 80050da:	b1bd      	cbz	r5, 800510c <__d2b+0x94>
 80050dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80050e0:	4405      	add	r5, r0
 80050e2:	603d      	str	r5, [r7, #0]
 80050e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80050e8:	6030      	str	r0, [r6, #0]
 80050ea:	4620      	mov	r0, r4
 80050ec:	b003      	add	sp, #12
 80050ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050f6:	e7d6      	b.n	80050a6 <__d2b+0x2e>
 80050f8:	6161      	str	r1, [r4, #20]
 80050fa:	e7e7      	b.n	80050cc <__d2b+0x54>
 80050fc:	a801      	add	r0, sp, #4
 80050fe:	f7ff fd61 	bl	8004bc4 <__lo0bits>
 8005102:	9b01      	ldr	r3, [sp, #4]
 8005104:	6163      	str	r3, [r4, #20]
 8005106:	3020      	adds	r0, #32
 8005108:	2201      	movs	r2, #1
 800510a:	e7e5      	b.n	80050d8 <__d2b+0x60>
 800510c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005110:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005114:	6038      	str	r0, [r7, #0]
 8005116:	6918      	ldr	r0, [r3, #16]
 8005118:	f7ff fd34 	bl	8004b84 <__hi0bits>
 800511c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005120:	e7e2      	b.n	80050e8 <__d2b+0x70>
 8005122:	bf00      	nop
 8005124:	0800594a 	.word	0x0800594a
 8005128:	0800595b 	.word	0x0800595b

0800512c <__sfputc_r>:
 800512c:	6893      	ldr	r3, [r2, #8]
 800512e:	3b01      	subs	r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	b410      	push	{r4}
 8005134:	6093      	str	r3, [r2, #8]
 8005136:	da08      	bge.n	800514a <__sfputc_r+0x1e>
 8005138:	6994      	ldr	r4, [r2, #24]
 800513a:	42a3      	cmp	r3, r4
 800513c:	db01      	blt.n	8005142 <__sfputc_r+0x16>
 800513e:	290a      	cmp	r1, #10
 8005140:	d103      	bne.n	800514a <__sfputc_r+0x1e>
 8005142:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005146:	f7fe bbba 	b.w	80038be <__swbuf_r>
 800514a:	6813      	ldr	r3, [r2, #0]
 800514c:	1c58      	adds	r0, r3, #1
 800514e:	6010      	str	r0, [r2, #0]
 8005150:	7019      	strb	r1, [r3, #0]
 8005152:	4608      	mov	r0, r1
 8005154:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005158:	4770      	bx	lr

0800515a <__sfputs_r>:
 800515a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515c:	4606      	mov	r6, r0
 800515e:	460f      	mov	r7, r1
 8005160:	4614      	mov	r4, r2
 8005162:	18d5      	adds	r5, r2, r3
 8005164:	42ac      	cmp	r4, r5
 8005166:	d101      	bne.n	800516c <__sfputs_r+0x12>
 8005168:	2000      	movs	r0, #0
 800516a:	e007      	b.n	800517c <__sfputs_r+0x22>
 800516c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005170:	463a      	mov	r2, r7
 8005172:	4630      	mov	r0, r6
 8005174:	f7ff ffda 	bl	800512c <__sfputc_r>
 8005178:	1c43      	adds	r3, r0, #1
 800517a:	d1f3      	bne.n	8005164 <__sfputs_r+0xa>
 800517c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005180 <_vfiprintf_r>:
 8005180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005184:	460d      	mov	r5, r1
 8005186:	b09d      	sub	sp, #116	; 0x74
 8005188:	4614      	mov	r4, r2
 800518a:	4698      	mov	r8, r3
 800518c:	4606      	mov	r6, r0
 800518e:	b118      	cbz	r0, 8005198 <_vfiprintf_r+0x18>
 8005190:	6a03      	ldr	r3, [r0, #32]
 8005192:	b90b      	cbnz	r3, 8005198 <_vfiprintf_r+0x18>
 8005194:	f7fe faac 	bl	80036f0 <__sinit>
 8005198:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800519a:	07d9      	lsls	r1, r3, #31
 800519c:	d405      	bmi.n	80051aa <_vfiprintf_r+0x2a>
 800519e:	89ab      	ldrh	r3, [r5, #12]
 80051a0:	059a      	lsls	r2, r3, #22
 80051a2:	d402      	bmi.n	80051aa <_vfiprintf_r+0x2a>
 80051a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051a6:	f7fe fc9b 	bl	8003ae0 <__retarget_lock_acquire_recursive>
 80051aa:	89ab      	ldrh	r3, [r5, #12]
 80051ac:	071b      	lsls	r3, r3, #28
 80051ae:	d501      	bpl.n	80051b4 <_vfiprintf_r+0x34>
 80051b0:	692b      	ldr	r3, [r5, #16]
 80051b2:	b99b      	cbnz	r3, 80051dc <_vfiprintf_r+0x5c>
 80051b4:	4629      	mov	r1, r5
 80051b6:	4630      	mov	r0, r6
 80051b8:	f7fe fbbe 	bl	8003938 <__swsetup_r>
 80051bc:	b170      	cbz	r0, 80051dc <_vfiprintf_r+0x5c>
 80051be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051c0:	07dc      	lsls	r4, r3, #31
 80051c2:	d504      	bpl.n	80051ce <_vfiprintf_r+0x4e>
 80051c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051c8:	b01d      	add	sp, #116	; 0x74
 80051ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ce:	89ab      	ldrh	r3, [r5, #12]
 80051d0:	0598      	lsls	r0, r3, #22
 80051d2:	d4f7      	bmi.n	80051c4 <_vfiprintf_r+0x44>
 80051d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051d6:	f7fe fc84 	bl	8003ae2 <__retarget_lock_release_recursive>
 80051da:	e7f3      	b.n	80051c4 <_vfiprintf_r+0x44>
 80051dc:	2300      	movs	r3, #0
 80051de:	9309      	str	r3, [sp, #36]	; 0x24
 80051e0:	2320      	movs	r3, #32
 80051e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80051ea:	2330      	movs	r3, #48	; 0x30
 80051ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80053a0 <_vfiprintf_r+0x220>
 80051f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051f4:	f04f 0901 	mov.w	r9, #1
 80051f8:	4623      	mov	r3, r4
 80051fa:	469a      	mov	sl, r3
 80051fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005200:	b10a      	cbz	r2, 8005206 <_vfiprintf_r+0x86>
 8005202:	2a25      	cmp	r2, #37	; 0x25
 8005204:	d1f9      	bne.n	80051fa <_vfiprintf_r+0x7a>
 8005206:	ebba 0b04 	subs.w	fp, sl, r4
 800520a:	d00b      	beq.n	8005224 <_vfiprintf_r+0xa4>
 800520c:	465b      	mov	r3, fp
 800520e:	4622      	mov	r2, r4
 8005210:	4629      	mov	r1, r5
 8005212:	4630      	mov	r0, r6
 8005214:	f7ff ffa1 	bl	800515a <__sfputs_r>
 8005218:	3001      	adds	r0, #1
 800521a:	f000 80a9 	beq.w	8005370 <_vfiprintf_r+0x1f0>
 800521e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005220:	445a      	add	r2, fp
 8005222:	9209      	str	r2, [sp, #36]	; 0x24
 8005224:	f89a 3000 	ldrb.w	r3, [sl]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 80a1 	beq.w	8005370 <_vfiprintf_r+0x1f0>
 800522e:	2300      	movs	r3, #0
 8005230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005238:	f10a 0a01 	add.w	sl, sl, #1
 800523c:	9304      	str	r3, [sp, #16]
 800523e:	9307      	str	r3, [sp, #28]
 8005240:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005244:	931a      	str	r3, [sp, #104]	; 0x68
 8005246:	4654      	mov	r4, sl
 8005248:	2205      	movs	r2, #5
 800524a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800524e:	4854      	ldr	r0, [pc, #336]	; (80053a0 <_vfiprintf_r+0x220>)
 8005250:	f7fa ffbe 	bl	80001d0 <memchr>
 8005254:	9a04      	ldr	r2, [sp, #16]
 8005256:	b9d8      	cbnz	r0, 8005290 <_vfiprintf_r+0x110>
 8005258:	06d1      	lsls	r1, r2, #27
 800525a:	bf44      	itt	mi
 800525c:	2320      	movmi	r3, #32
 800525e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005262:	0713      	lsls	r3, r2, #28
 8005264:	bf44      	itt	mi
 8005266:	232b      	movmi	r3, #43	; 0x2b
 8005268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800526c:	f89a 3000 	ldrb.w	r3, [sl]
 8005270:	2b2a      	cmp	r3, #42	; 0x2a
 8005272:	d015      	beq.n	80052a0 <_vfiprintf_r+0x120>
 8005274:	9a07      	ldr	r2, [sp, #28]
 8005276:	4654      	mov	r4, sl
 8005278:	2000      	movs	r0, #0
 800527a:	f04f 0c0a 	mov.w	ip, #10
 800527e:	4621      	mov	r1, r4
 8005280:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005284:	3b30      	subs	r3, #48	; 0x30
 8005286:	2b09      	cmp	r3, #9
 8005288:	d94d      	bls.n	8005326 <_vfiprintf_r+0x1a6>
 800528a:	b1b0      	cbz	r0, 80052ba <_vfiprintf_r+0x13a>
 800528c:	9207      	str	r2, [sp, #28]
 800528e:	e014      	b.n	80052ba <_vfiprintf_r+0x13a>
 8005290:	eba0 0308 	sub.w	r3, r0, r8
 8005294:	fa09 f303 	lsl.w	r3, r9, r3
 8005298:	4313      	orrs	r3, r2
 800529a:	9304      	str	r3, [sp, #16]
 800529c:	46a2      	mov	sl, r4
 800529e:	e7d2      	b.n	8005246 <_vfiprintf_r+0xc6>
 80052a0:	9b03      	ldr	r3, [sp, #12]
 80052a2:	1d19      	adds	r1, r3, #4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	9103      	str	r1, [sp, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	bfbb      	ittet	lt
 80052ac:	425b      	neglt	r3, r3
 80052ae:	f042 0202 	orrlt.w	r2, r2, #2
 80052b2:	9307      	strge	r3, [sp, #28]
 80052b4:	9307      	strlt	r3, [sp, #28]
 80052b6:	bfb8      	it	lt
 80052b8:	9204      	strlt	r2, [sp, #16]
 80052ba:	7823      	ldrb	r3, [r4, #0]
 80052bc:	2b2e      	cmp	r3, #46	; 0x2e
 80052be:	d10c      	bne.n	80052da <_vfiprintf_r+0x15a>
 80052c0:	7863      	ldrb	r3, [r4, #1]
 80052c2:	2b2a      	cmp	r3, #42	; 0x2a
 80052c4:	d134      	bne.n	8005330 <_vfiprintf_r+0x1b0>
 80052c6:	9b03      	ldr	r3, [sp, #12]
 80052c8:	1d1a      	adds	r2, r3, #4
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	9203      	str	r2, [sp, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	bfb8      	it	lt
 80052d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80052d6:	3402      	adds	r4, #2
 80052d8:	9305      	str	r3, [sp, #20]
 80052da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80053b0 <_vfiprintf_r+0x230>
 80052de:	7821      	ldrb	r1, [r4, #0]
 80052e0:	2203      	movs	r2, #3
 80052e2:	4650      	mov	r0, sl
 80052e4:	f7fa ff74 	bl	80001d0 <memchr>
 80052e8:	b138      	cbz	r0, 80052fa <_vfiprintf_r+0x17a>
 80052ea:	9b04      	ldr	r3, [sp, #16]
 80052ec:	eba0 000a 	sub.w	r0, r0, sl
 80052f0:	2240      	movs	r2, #64	; 0x40
 80052f2:	4082      	lsls	r2, r0
 80052f4:	4313      	orrs	r3, r2
 80052f6:	3401      	adds	r4, #1
 80052f8:	9304      	str	r3, [sp, #16]
 80052fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052fe:	4829      	ldr	r0, [pc, #164]	; (80053a4 <_vfiprintf_r+0x224>)
 8005300:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005304:	2206      	movs	r2, #6
 8005306:	f7fa ff63 	bl	80001d0 <memchr>
 800530a:	2800      	cmp	r0, #0
 800530c:	d03f      	beq.n	800538e <_vfiprintf_r+0x20e>
 800530e:	4b26      	ldr	r3, [pc, #152]	; (80053a8 <_vfiprintf_r+0x228>)
 8005310:	bb1b      	cbnz	r3, 800535a <_vfiprintf_r+0x1da>
 8005312:	9b03      	ldr	r3, [sp, #12]
 8005314:	3307      	adds	r3, #7
 8005316:	f023 0307 	bic.w	r3, r3, #7
 800531a:	3308      	adds	r3, #8
 800531c:	9303      	str	r3, [sp, #12]
 800531e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005320:	443b      	add	r3, r7
 8005322:	9309      	str	r3, [sp, #36]	; 0x24
 8005324:	e768      	b.n	80051f8 <_vfiprintf_r+0x78>
 8005326:	fb0c 3202 	mla	r2, ip, r2, r3
 800532a:	460c      	mov	r4, r1
 800532c:	2001      	movs	r0, #1
 800532e:	e7a6      	b.n	800527e <_vfiprintf_r+0xfe>
 8005330:	2300      	movs	r3, #0
 8005332:	3401      	adds	r4, #1
 8005334:	9305      	str	r3, [sp, #20]
 8005336:	4619      	mov	r1, r3
 8005338:	f04f 0c0a 	mov.w	ip, #10
 800533c:	4620      	mov	r0, r4
 800533e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005342:	3a30      	subs	r2, #48	; 0x30
 8005344:	2a09      	cmp	r2, #9
 8005346:	d903      	bls.n	8005350 <_vfiprintf_r+0x1d0>
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0c6      	beq.n	80052da <_vfiprintf_r+0x15a>
 800534c:	9105      	str	r1, [sp, #20]
 800534e:	e7c4      	b.n	80052da <_vfiprintf_r+0x15a>
 8005350:	fb0c 2101 	mla	r1, ip, r1, r2
 8005354:	4604      	mov	r4, r0
 8005356:	2301      	movs	r3, #1
 8005358:	e7f0      	b.n	800533c <_vfiprintf_r+0x1bc>
 800535a:	ab03      	add	r3, sp, #12
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	462a      	mov	r2, r5
 8005360:	4b12      	ldr	r3, [pc, #72]	; (80053ac <_vfiprintf_r+0x22c>)
 8005362:	a904      	add	r1, sp, #16
 8005364:	4630      	mov	r0, r6
 8005366:	f7fd fd83 	bl	8002e70 <_printf_float>
 800536a:	4607      	mov	r7, r0
 800536c:	1c78      	adds	r0, r7, #1
 800536e:	d1d6      	bne.n	800531e <_vfiprintf_r+0x19e>
 8005370:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005372:	07d9      	lsls	r1, r3, #31
 8005374:	d405      	bmi.n	8005382 <_vfiprintf_r+0x202>
 8005376:	89ab      	ldrh	r3, [r5, #12]
 8005378:	059a      	lsls	r2, r3, #22
 800537a:	d402      	bmi.n	8005382 <_vfiprintf_r+0x202>
 800537c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800537e:	f7fe fbb0 	bl	8003ae2 <__retarget_lock_release_recursive>
 8005382:	89ab      	ldrh	r3, [r5, #12]
 8005384:	065b      	lsls	r3, r3, #25
 8005386:	f53f af1d 	bmi.w	80051c4 <_vfiprintf_r+0x44>
 800538a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800538c:	e71c      	b.n	80051c8 <_vfiprintf_r+0x48>
 800538e:	ab03      	add	r3, sp, #12
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	462a      	mov	r2, r5
 8005394:	4b05      	ldr	r3, [pc, #20]	; (80053ac <_vfiprintf_r+0x22c>)
 8005396:	a904      	add	r1, sp, #16
 8005398:	4630      	mov	r0, r6
 800539a:	f7fe f80d 	bl	80033b8 <_printf_i>
 800539e:	e7e4      	b.n	800536a <_vfiprintf_r+0x1ea>
 80053a0:	08005ab4 	.word	0x08005ab4
 80053a4:	08005abe 	.word	0x08005abe
 80053a8:	08002e71 	.word	0x08002e71
 80053ac:	0800515b 	.word	0x0800515b
 80053b0:	08005aba 	.word	0x08005aba

080053b4 <__sflush_r>:
 80053b4:	898a      	ldrh	r2, [r1, #12]
 80053b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ba:	4605      	mov	r5, r0
 80053bc:	0710      	lsls	r0, r2, #28
 80053be:	460c      	mov	r4, r1
 80053c0:	d458      	bmi.n	8005474 <__sflush_r+0xc0>
 80053c2:	684b      	ldr	r3, [r1, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	dc05      	bgt.n	80053d4 <__sflush_r+0x20>
 80053c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	dc02      	bgt.n	80053d4 <__sflush_r+0x20>
 80053ce:	2000      	movs	r0, #0
 80053d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053d6:	2e00      	cmp	r6, #0
 80053d8:	d0f9      	beq.n	80053ce <__sflush_r+0x1a>
 80053da:	2300      	movs	r3, #0
 80053dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80053e0:	682f      	ldr	r7, [r5, #0]
 80053e2:	6a21      	ldr	r1, [r4, #32]
 80053e4:	602b      	str	r3, [r5, #0]
 80053e6:	d032      	beq.n	800544e <__sflush_r+0x9a>
 80053e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053ea:	89a3      	ldrh	r3, [r4, #12]
 80053ec:	075a      	lsls	r2, r3, #29
 80053ee:	d505      	bpl.n	80053fc <__sflush_r+0x48>
 80053f0:	6863      	ldr	r3, [r4, #4]
 80053f2:	1ac0      	subs	r0, r0, r3
 80053f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053f6:	b10b      	cbz	r3, 80053fc <__sflush_r+0x48>
 80053f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053fa:	1ac0      	subs	r0, r0, r3
 80053fc:	2300      	movs	r3, #0
 80053fe:	4602      	mov	r2, r0
 8005400:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005402:	6a21      	ldr	r1, [r4, #32]
 8005404:	4628      	mov	r0, r5
 8005406:	47b0      	blx	r6
 8005408:	1c43      	adds	r3, r0, #1
 800540a:	89a3      	ldrh	r3, [r4, #12]
 800540c:	d106      	bne.n	800541c <__sflush_r+0x68>
 800540e:	6829      	ldr	r1, [r5, #0]
 8005410:	291d      	cmp	r1, #29
 8005412:	d82b      	bhi.n	800546c <__sflush_r+0xb8>
 8005414:	4a29      	ldr	r2, [pc, #164]	; (80054bc <__sflush_r+0x108>)
 8005416:	410a      	asrs	r2, r1
 8005418:	07d6      	lsls	r6, r2, #31
 800541a:	d427      	bmi.n	800546c <__sflush_r+0xb8>
 800541c:	2200      	movs	r2, #0
 800541e:	6062      	str	r2, [r4, #4]
 8005420:	04d9      	lsls	r1, r3, #19
 8005422:	6922      	ldr	r2, [r4, #16]
 8005424:	6022      	str	r2, [r4, #0]
 8005426:	d504      	bpl.n	8005432 <__sflush_r+0x7e>
 8005428:	1c42      	adds	r2, r0, #1
 800542a:	d101      	bne.n	8005430 <__sflush_r+0x7c>
 800542c:	682b      	ldr	r3, [r5, #0]
 800542e:	b903      	cbnz	r3, 8005432 <__sflush_r+0x7e>
 8005430:	6560      	str	r0, [r4, #84]	; 0x54
 8005432:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005434:	602f      	str	r7, [r5, #0]
 8005436:	2900      	cmp	r1, #0
 8005438:	d0c9      	beq.n	80053ce <__sflush_r+0x1a>
 800543a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800543e:	4299      	cmp	r1, r3
 8005440:	d002      	beq.n	8005448 <__sflush_r+0x94>
 8005442:	4628      	mov	r0, r5
 8005444:	f7ff f9f6 	bl	8004834 <_free_r>
 8005448:	2000      	movs	r0, #0
 800544a:	6360      	str	r0, [r4, #52]	; 0x34
 800544c:	e7c0      	b.n	80053d0 <__sflush_r+0x1c>
 800544e:	2301      	movs	r3, #1
 8005450:	4628      	mov	r0, r5
 8005452:	47b0      	blx	r6
 8005454:	1c41      	adds	r1, r0, #1
 8005456:	d1c8      	bne.n	80053ea <__sflush_r+0x36>
 8005458:	682b      	ldr	r3, [r5, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0c5      	beq.n	80053ea <__sflush_r+0x36>
 800545e:	2b1d      	cmp	r3, #29
 8005460:	d001      	beq.n	8005466 <__sflush_r+0xb2>
 8005462:	2b16      	cmp	r3, #22
 8005464:	d101      	bne.n	800546a <__sflush_r+0xb6>
 8005466:	602f      	str	r7, [r5, #0]
 8005468:	e7b1      	b.n	80053ce <__sflush_r+0x1a>
 800546a:	89a3      	ldrh	r3, [r4, #12]
 800546c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005470:	81a3      	strh	r3, [r4, #12]
 8005472:	e7ad      	b.n	80053d0 <__sflush_r+0x1c>
 8005474:	690f      	ldr	r7, [r1, #16]
 8005476:	2f00      	cmp	r7, #0
 8005478:	d0a9      	beq.n	80053ce <__sflush_r+0x1a>
 800547a:	0793      	lsls	r3, r2, #30
 800547c:	680e      	ldr	r6, [r1, #0]
 800547e:	bf08      	it	eq
 8005480:	694b      	ldreq	r3, [r1, #20]
 8005482:	600f      	str	r7, [r1, #0]
 8005484:	bf18      	it	ne
 8005486:	2300      	movne	r3, #0
 8005488:	eba6 0807 	sub.w	r8, r6, r7
 800548c:	608b      	str	r3, [r1, #8]
 800548e:	f1b8 0f00 	cmp.w	r8, #0
 8005492:	dd9c      	ble.n	80053ce <__sflush_r+0x1a>
 8005494:	6a21      	ldr	r1, [r4, #32]
 8005496:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005498:	4643      	mov	r3, r8
 800549a:	463a      	mov	r2, r7
 800549c:	4628      	mov	r0, r5
 800549e:	47b0      	blx	r6
 80054a0:	2800      	cmp	r0, #0
 80054a2:	dc06      	bgt.n	80054b2 <__sflush_r+0xfe>
 80054a4:	89a3      	ldrh	r3, [r4, #12]
 80054a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054aa:	81a3      	strh	r3, [r4, #12]
 80054ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054b0:	e78e      	b.n	80053d0 <__sflush_r+0x1c>
 80054b2:	4407      	add	r7, r0
 80054b4:	eba8 0800 	sub.w	r8, r8, r0
 80054b8:	e7e9      	b.n	800548e <__sflush_r+0xda>
 80054ba:	bf00      	nop
 80054bc:	dfbffffe 	.word	0xdfbffffe

080054c0 <_fflush_r>:
 80054c0:	b538      	push	{r3, r4, r5, lr}
 80054c2:	690b      	ldr	r3, [r1, #16]
 80054c4:	4605      	mov	r5, r0
 80054c6:	460c      	mov	r4, r1
 80054c8:	b913      	cbnz	r3, 80054d0 <_fflush_r+0x10>
 80054ca:	2500      	movs	r5, #0
 80054cc:	4628      	mov	r0, r5
 80054ce:	bd38      	pop	{r3, r4, r5, pc}
 80054d0:	b118      	cbz	r0, 80054da <_fflush_r+0x1a>
 80054d2:	6a03      	ldr	r3, [r0, #32]
 80054d4:	b90b      	cbnz	r3, 80054da <_fflush_r+0x1a>
 80054d6:	f7fe f90b 	bl	80036f0 <__sinit>
 80054da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d0f3      	beq.n	80054ca <_fflush_r+0xa>
 80054e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054e4:	07d0      	lsls	r0, r2, #31
 80054e6:	d404      	bmi.n	80054f2 <_fflush_r+0x32>
 80054e8:	0599      	lsls	r1, r3, #22
 80054ea:	d402      	bmi.n	80054f2 <_fflush_r+0x32>
 80054ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054ee:	f7fe faf7 	bl	8003ae0 <__retarget_lock_acquire_recursive>
 80054f2:	4628      	mov	r0, r5
 80054f4:	4621      	mov	r1, r4
 80054f6:	f7ff ff5d 	bl	80053b4 <__sflush_r>
 80054fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054fc:	07da      	lsls	r2, r3, #31
 80054fe:	4605      	mov	r5, r0
 8005500:	d4e4      	bmi.n	80054cc <_fflush_r+0xc>
 8005502:	89a3      	ldrh	r3, [r4, #12]
 8005504:	059b      	lsls	r3, r3, #22
 8005506:	d4e1      	bmi.n	80054cc <_fflush_r+0xc>
 8005508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800550a:	f7fe faea 	bl	8003ae2 <__retarget_lock_release_recursive>
 800550e:	e7dd      	b.n	80054cc <_fflush_r+0xc>

08005510 <fiprintf>:
 8005510:	b40e      	push	{r1, r2, r3}
 8005512:	b503      	push	{r0, r1, lr}
 8005514:	4601      	mov	r1, r0
 8005516:	ab03      	add	r3, sp, #12
 8005518:	4805      	ldr	r0, [pc, #20]	; (8005530 <fiprintf+0x20>)
 800551a:	f853 2b04 	ldr.w	r2, [r3], #4
 800551e:	6800      	ldr	r0, [r0, #0]
 8005520:	9301      	str	r3, [sp, #4]
 8005522:	f7ff fe2d 	bl	8005180 <_vfiprintf_r>
 8005526:	b002      	add	sp, #8
 8005528:	f85d eb04 	ldr.w	lr, [sp], #4
 800552c:	b003      	add	sp, #12
 800552e:	4770      	bx	lr
 8005530:	2000006c 	.word	0x2000006c

08005534 <__swhatbuf_r>:
 8005534:	b570      	push	{r4, r5, r6, lr}
 8005536:	460c      	mov	r4, r1
 8005538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800553c:	2900      	cmp	r1, #0
 800553e:	b096      	sub	sp, #88	; 0x58
 8005540:	4615      	mov	r5, r2
 8005542:	461e      	mov	r6, r3
 8005544:	da0d      	bge.n	8005562 <__swhatbuf_r+0x2e>
 8005546:	89a3      	ldrh	r3, [r4, #12]
 8005548:	f013 0f80 	tst.w	r3, #128	; 0x80
 800554c:	f04f 0100 	mov.w	r1, #0
 8005550:	bf0c      	ite	eq
 8005552:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005556:	2340      	movne	r3, #64	; 0x40
 8005558:	2000      	movs	r0, #0
 800555a:	6031      	str	r1, [r6, #0]
 800555c:	602b      	str	r3, [r5, #0]
 800555e:	b016      	add	sp, #88	; 0x58
 8005560:	bd70      	pop	{r4, r5, r6, pc}
 8005562:	466a      	mov	r2, sp
 8005564:	f000 f848 	bl	80055f8 <_fstat_r>
 8005568:	2800      	cmp	r0, #0
 800556a:	dbec      	blt.n	8005546 <__swhatbuf_r+0x12>
 800556c:	9901      	ldr	r1, [sp, #4]
 800556e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005572:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005576:	4259      	negs	r1, r3
 8005578:	4159      	adcs	r1, r3
 800557a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800557e:	e7eb      	b.n	8005558 <__swhatbuf_r+0x24>

08005580 <__smakebuf_r>:
 8005580:	898b      	ldrh	r3, [r1, #12]
 8005582:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005584:	079d      	lsls	r5, r3, #30
 8005586:	4606      	mov	r6, r0
 8005588:	460c      	mov	r4, r1
 800558a:	d507      	bpl.n	800559c <__smakebuf_r+0x1c>
 800558c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005590:	6023      	str	r3, [r4, #0]
 8005592:	6123      	str	r3, [r4, #16]
 8005594:	2301      	movs	r3, #1
 8005596:	6163      	str	r3, [r4, #20]
 8005598:	b002      	add	sp, #8
 800559a:	bd70      	pop	{r4, r5, r6, pc}
 800559c:	ab01      	add	r3, sp, #4
 800559e:	466a      	mov	r2, sp
 80055a0:	f7ff ffc8 	bl	8005534 <__swhatbuf_r>
 80055a4:	9900      	ldr	r1, [sp, #0]
 80055a6:	4605      	mov	r5, r0
 80055a8:	4630      	mov	r0, r6
 80055aa:	f7ff f9b7 	bl	800491c <_malloc_r>
 80055ae:	b948      	cbnz	r0, 80055c4 <__smakebuf_r+0x44>
 80055b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055b4:	059a      	lsls	r2, r3, #22
 80055b6:	d4ef      	bmi.n	8005598 <__smakebuf_r+0x18>
 80055b8:	f023 0303 	bic.w	r3, r3, #3
 80055bc:	f043 0302 	orr.w	r3, r3, #2
 80055c0:	81a3      	strh	r3, [r4, #12]
 80055c2:	e7e3      	b.n	800558c <__smakebuf_r+0xc>
 80055c4:	89a3      	ldrh	r3, [r4, #12]
 80055c6:	6020      	str	r0, [r4, #0]
 80055c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055cc:	81a3      	strh	r3, [r4, #12]
 80055ce:	9b00      	ldr	r3, [sp, #0]
 80055d0:	6163      	str	r3, [r4, #20]
 80055d2:	9b01      	ldr	r3, [sp, #4]
 80055d4:	6120      	str	r0, [r4, #16]
 80055d6:	b15b      	cbz	r3, 80055f0 <__smakebuf_r+0x70>
 80055d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055dc:	4630      	mov	r0, r6
 80055de:	f000 f81d 	bl	800561c <_isatty_r>
 80055e2:	b128      	cbz	r0, 80055f0 <__smakebuf_r+0x70>
 80055e4:	89a3      	ldrh	r3, [r4, #12]
 80055e6:	f023 0303 	bic.w	r3, r3, #3
 80055ea:	f043 0301 	orr.w	r3, r3, #1
 80055ee:	81a3      	strh	r3, [r4, #12]
 80055f0:	89a3      	ldrh	r3, [r4, #12]
 80055f2:	431d      	orrs	r5, r3
 80055f4:	81a5      	strh	r5, [r4, #12]
 80055f6:	e7cf      	b.n	8005598 <__smakebuf_r+0x18>

080055f8 <_fstat_r>:
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	4d07      	ldr	r5, [pc, #28]	; (8005618 <_fstat_r+0x20>)
 80055fc:	2300      	movs	r3, #0
 80055fe:	4604      	mov	r4, r0
 8005600:	4608      	mov	r0, r1
 8005602:	4611      	mov	r1, r2
 8005604:	602b      	str	r3, [r5, #0]
 8005606:	f7fd fa10 	bl	8002a2a <_fstat>
 800560a:	1c43      	adds	r3, r0, #1
 800560c:	d102      	bne.n	8005614 <_fstat_r+0x1c>
 800560e:	682b      	ldr	r3, [r5, #0]
 8005610:	b103      	cbz	r3, 8005614 <_fstat_r+0x1c>
 8005612:	6023      	str	r3, [r4, #0]
 8005614:	bd38      	pop	{r3, r4, r5, pc}
 8005616:	bf00      	nop
 8005618:	20000478 	.word	0x20000478

0800561c <_isatty_r>:
 800561c:	b538      	push	{r3, r4, r5, lr}
 800561e:	4d06      	ldr	r5, [pc, #24]	; (8005638 <_isatty_r+0x1c>)
 8005620:	2300      	movs	r3, #0
 8005622:	4604      	mov	r4, r0
 8005624:	4608      	mov	r0, r1
 8005626:	602b      	str	r3, [r5, #0]
 8005628:	f7fd fb66 	bl	8002cf8 <_isatty>
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	d102      	bne.n	8005636 <_isatty_r+0x1a>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	b103      	cbz	r3, 8005636 <_isatty_r+0x1a>
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	20000478 	.word	0x20000478

0800563c <_sbrk_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	4d06      	ldr	r5, [pc, #24]	; (8005658 <_sbrk_r+0x1c>)
 8005640:	2300      	movs	r3, #0
 8005642:	4604      	mov	r4, r0
 8005644:	4608      	mov	r0, r1
 8005646:	602b      	str	r3, [r5, #0]
 8005648:	f7fb fe56 	bl	80012f8 <_sbrk>
 800564c:	1c43      	adds	r3, r0, #1
 800564e:	d102      	bne.n	8005656 <_sbrk_r+0x1a>
 8005650:	682b      	ldr	r3, [r5, #0]
 8005652:	b103      	cbz	r3, 8005656 <_sbrk_r+0x1a>
 8005654:	6023      	str	r3, [r4, #0]
 8005656:	bd38      	pop	{r3, r4, r5, pc}
 8005658:	20000478 	.word	0x20000478

0800565c <abort>:
 800565c:	b508      	push	{r3, lr}
 800565e:	2006      	movs	r0, #6
 8005660:	f000 f860 	bl	8005724 <raise>
 8005664:	2001      	movs	r0, #1
 8005666:	f000 f881 	bl	800576c <_exit>

0800566a <_calloc_r>:
 800566a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800566c:	fba1 2402 	umull	r2, r4, r1, r2
 8005670:	b94c      	cbnz	r4, 8005686 <_calloc_r+0x1c>
 8005672:	4611      	mov	r1, r2
 8005674:	9201      	str	r2, [sp, #4]
 8005676:	f7ff f951 	bl	800491c <_malloc_r>
 800567a:	9a01      	ldr	r2, [sp, #4]
 800567c:	4605      	mov	r5, r0
 800567e:	b930      	cbnz	r0, 800568e <_calloc_r+0x24>
 8005680:	4628      	mov	r0, r5
 8005682:	b003      	add	sp, #12
 8005684:	bd30      	pop	{r4, r5, pc}
 8005686:	220c      	movs	r2, #12
 8005688:	6002      	str	r2, [r0, #0]
 800568a:	2500      	movs	r5, #0
 800568c:	e7f8      	b.n	8005680 <_calloc_r+0x16>
 800568e:	4621      	mov	r1, r4
 8005690:	f7fe f9aa 	bl	80039e8 <memset>
 8005694:	e7f4      	b.n	8005680 <_calloc_r+0x16>

08005696 <__ascii_mbtowc>:
 8005696:	b082      	sub	sp, #8
 8005698:	b901      	cbnz	r1, 800569c <__ascii_mbtowc+0x6>
 800569a:	a901      	add	r1, sp, #4
 800569c:	b142      	cbz	r2, 80056b0 <__ascii_mbtowc+0x1a>
 800569e:	b14b      	cbz	r3, 80056b4 <__ascii_mbtowc+0x1e>
 80056a0:	7813      	ldrb	r3, [r2, #0]
 80056a2:	600b      	str	r3, [r1, #0]
 80056a4:	7812      	ldrb	r2, [r2, #0]
 80056a6:	1e10      	subs	r0, r2, #0
 80056a8:	bf18      	it	ne
 80056aa:	2001      	movne	r0, #1
 80056ac:	b002      	add	sp, #8
 80056ae:	4770      	bx	lr
 80056b0:	4610      	mov	r0, r2
 80056b2:	e7fb      	b.n	80056ac <__ascii_mbtowc+0x16>
 80056b4:	f06f 0001 	mvn.w	r0, #1
 80056b8:	e7f8      	b.n	80056ac <__ascii_mbtowc+0x16>

080056ba <__ascii_wctomb>:
 80056ba:	b149      	cbz	r1, 80056d0 <__ascii_wctomb+0x16>
 80056bc:	2aff      	cmp	r2, #255	; 0xff
 80056be:	bf85      	ittet	hi
 80056c0:	238a      	movhi	r3, #138	; 0x8a
 80056c2:	6003      	strhi	r3, [r0, #0]
 80056c4:	700a      	strbls	r2, [r1, #0]
 80056c6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80056ca:	bf98      	it	ls
 80056cc:	2001      	movls	r0, #1
 80056ce:	4770      	bx	lr
 80056d0:	4608      	mov	r0, r1
 80056d2:	4770      	bx	lr

080056d4 <_raise_r>:
 80056d4:	291f      	cmp	r1, #31
 80056d6:	b538      	push	{r3, r4, r5, lr}
 80056d8:	4604      	mov	r4, r0
 80056da:	460d      	mov	r5, r1
 80056dc:	d904      	bls.n	80056e8 <_raise_r+0x14>
 80056de:	2316      	movs	r3, #22
 80056e0:	6003      	str	r3, [r0, #0]
 80056e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056e6:	bd38      	pop	{r3, r4, r5, pc}
 80056e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80056ea:	b112      	cbz	r2, 80056f2 <_raise_r+0x1e>
 80056ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80056f0:	b94b      	cbnz	r3, 8005706 <_raise_r+0x32>
 80056f2:	4620      	mov	r0, r4
 80056f4:	f000 f830 	bl	8005758 <_getpid_r>
 80056f8:	462a      	mov	r2, r5
 80056fa:	4601      	mov	r1, r0
 80056fc:	4620      	mov	r0, r4
 80056fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005702:	f000 b817 	b.w	8005734 <_kill_r>
 8005706:	2b01      	cmp	r3, #1
 8005708:	d00a      	beq.n	8005720 <_raise_r+0x4c>
 800570a:	1c59      	adds	r1, r3, #1
 800570c:	d103      	bne.n	8005716 <_raise_r+0x42>
 800570e:	2316      	movs	r3, #22
 8005710:	6003      	str	r3, [r0, #0]
 8005712:	2001      	movs	r0, #1
 8005714:	e7e7      	b.n	80056e6 <_raise_r+0x12>
 8005716:	2400      	movs	r4, #0
 8005718:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800571c:	4628      	mov	r0, r5
 800571e:	4798      	blx	r3
 8005720:	2000      	movs	r0, #0
 8005722:	e7e0      	b.n	80056e6 <_raise_r+0x12>

08005724 <raise>:
 8005724:	4b02      	ldr	r3, [pc, #8]	; (8005730 <raise+0xc>)
 8005726:	4601      	mov	r1, r0
 8005728:	6818      	ldr	r0, [r3, #0]
 800572a:	f7ff bfd3 	b.w	80056d4 <_raise_r>
 800572e:	bf00      	nop
 8005730:	2000006c 	.word	0x2000006c

08005734 <_kill_r>:
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	4d07      	ldr	r5, [pc, #28]	; (8005754 <_kill_r+0x20>)
 8005738:	2300      	movs	r3, #0
 800573a:	4604      	mov	r4, r0
 800573c:	4608      	mov	r0, r1
 800573e:	4611      	mov	r1, r2
 8005740:	602b      	str	r3, [r5, #0]
 8005742:	f000 f80b 	bl	800575c <_kill>
 8005746:	1c43      	adds	r3, r0, #1
 8005748:	d102      	bne.n	8005750 <_kill_r+0x1c>
 800574a:	682b      	ldr	r3, [r5, #0]
 800574c:	b103      	cbz	r3, 8005750 <_kill_r+0x1c>
 800574e:	6023      	str	r3, [r4, #0]
 8005750:	bd38      	pop	{r3, r4, r5, pc}
 8005752:	bf00      	nop
 8005754:	20000478 	.word	0x20000478

08005758 <_getpid_r>:
 8005758:	f7fd b944 	b.w	80029e4 <_getpid>

0800575c <_kill>:
 800575c:	4b02      	ldr	r3, [pc, #8]	; (8005768 <_kill+0xc>)
 800575e:	2258      	movs	r2, #88	; 0x58
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005766:	4770      	bx	lr
 8005768:	20000478 	.word	0x20000478

0800576c <_exit>:
 800576c:	e7fe      	b.n	800576c <_exit>
	...

08005770 <_init>:
 8005770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005772:	bf00      	nop
 8005774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005776:	bc08      	pop	{r3}
 8005778:	469e      	mov	lr, r3
 800577a:	4770      	bx	lr

0800577c <_fini>:
 800577c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577e:	bf00      	nop
 8005780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005782:	bc08      	pop	{r3}
 8005784:	469e      	mov	lr, r3
 8005786:	4770      	bx	lr
