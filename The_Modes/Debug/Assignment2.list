
Assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007484  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08007618  08007618  00017618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a70  08007a70  00020268  2**0
                  CONTENTS
  4 .ARM          00000008  08007a70  08007a70  00017a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a78  08007a78  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a78  08007a78  00017a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a7c  08007a7c  00017a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  08007a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000268  08007ce8  00020268  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  08007ce8  00020570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d27b  00000000  00000000  000202db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002488  00000000  00000000  0002d556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c88  00000000  00000000  0002f9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000969  00000000  00000000  00030668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028589  00000000  00000000  00030fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f80e  00000000  00000000  0005955a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3772  00000000  00000000  00068d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004714  00000000  00000000  0015c4dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00160bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000268 	.word	0x20000268
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080075fc 	.word	0x080075fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000026c 	.word	0x2000026c
 80001cc:	080075fc 	.word	0x080075fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <HAL_GPIO_EXTI_Callback>:
int curr_mode = 0;
int mode = 1;
int last_stand = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f44:	b5b0      	push	{r4, r5, r7, lr}
 8000f46:	b09c      	sub	sp, #112	; 0x70
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BUTTON_EXTI13_Pin)
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f54:	f040 80bb 	bne.w	80010ce <HAL_GPIO_EXTI_Callback+0x18a>
  {
   currentTime = HAL_GetTick(); //sample current time for comparison, if button is pressed
 8000f58:	f001 fa3e 	bl	80023d8 <HAL_GetTick>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4a5e      	ldr	r2, [pc, #376]	; (80010d8 <HAL_GPIO_EXTI_Callback+0x194>)
 8000f60:	6013      	str	r3, [r2, #0]
   buttonPressCount++;
 8000f62:	4b5e      	ldr	r3, [pc, #376]	; (80010dc <HAL_GPIO_EXTI_Callback+0x198>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	3301      	adds	r3, #1
 8000f68:	4a5c      	ldr	r2, [pc, #368]	; (80010dc <HAL_GPIO_EXTI_Callback+0x198>)
 8000f6a:	6013      	str	r3, [r2, #0]
    // Check if the time elapsed since the last button press is less than your threshold (e.g., 500 ms)
    if (buttonPressCount == 2)
 8000f6c:	4b5b      	ldr	r3, [pc, #364]	; (80010dc <HAL_GPIO_EXTI_Callback+0x198>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	f040 8091 	bne.w	8001098 <HAL_GPIO_EXTI_Callback+0x154>
    { //500ms threshold

      if ((currentTime - lastButtonPressTime) < 1000)
 8000f76:	4b58      	ldr	r3, [pc, #352]	; (80010d8 <HAL_GPIO_EXTI_Callback+0x194>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	4b59      	ldr	r3, [pc, #356]	; (80010e0 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f84:	d269      	bcs.n	800105a <HAL_GPIO_EXTI_Callback+0x116>
      {
     //printf("%d, %d, %d", currentTime, lastButtonPressTime, buttonPressCount);//seems to be in seconds
        //printf("\t Double press detected. \n");
          char dPress[] = "Double Press\r\n"; //It works!!
 8000f86:	4b57      	ldr	r3, [pc, #348]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000f88:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000f8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f8e:	c407      	stmia	r4!, {r0, r1, r2}
 8000f90:	8023      	strh	r3, [r4, #0]
 8000f92:	3402      	adds	r4, #2
 8000f94:	0c1b      	lsrs	r3, r3, #16
 8000f96:	7023      	strb	r3, [r4, #0]
          HAL_UART_Transmit(&huart1, (uint8_t*)dPress, strlen(dPress), 0xFFFF);
 8000f98:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff f967 	bl	8000270 <strlen>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000faa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fae:	484e      	ldr	r0, [pc, #312]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000fb0:	f002 fc6e 	bl	8003890 <HAL_UART_Transmit>
            
          if (mode ==2 && last_stand==0) {
 8000fb4:	4b4d      	ldr	r3, [pc, #308]	; (80010ec <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d11f      	bne.n	8000ffc <HAL_GPIO_EXTI_Callback+0xb8>
 8000fbc:	4b4c      	ldr	r3, [pc, #304]	; (80010f0 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d11b      	bne.n	8000ffc <HAL_GPIO_EXTI_Callback+0xb8>
               //standby mode =1
               mode = 1;
 8000fc4:	4b49      	ldr	r3, [pc, #292]	; (80010ec <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]
              char standbyChar[] = "StandbyMode Triggered\r\n"; //It works!!
 8000fca:	4b4a      	ldr	r3, [pc, #296]	; (80010f4 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000fcc:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000fd0:	461d      	mov	r5, r3
 8000fd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fda:	e884 0003 	stmia.w	r4, {r0, r1}
              HAL_UART_Transmit(&huart1, (uint8_t*)standbyChar, strlen(dPress), 0xFFFF);
 8000fde:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff f944 	bl	8000270 <strlen>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ff4:	483c      	ldr	r0, [pc, #240]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000ff6:	f002 fc4b 	bl	8003890 <HAL_UART_Transmit>
          if (mode ==2 && last_stand==0) {
 8000ffa:	e025      	b.n	8001048 <HAL_GPIO_EXTI_Callback+0x104>
            } else if (mode == 1 && last_stand==0) {
 8000ffc:	4b3b      	ldr	r3, [pc, #236]	; (80010ec <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d121      	bne.n	8001048 <HAL_GPIO_EXTI_Callback+0x104>
 8001004:	4b3a      	ldr	r3, [pc, #232]	; (80010f0 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d11d      	bne.n	8001048 <HAL_GPIO_EXTI_Callback+0x104>
               mode=2;
 800100c:	4b37      	ldr	r3, [pc, #220]	; (80010ec <HAL_GPIO_EXTI_Callback+0x1a8>)
 800100e:	2202      	movs	r2, #2
 8001010:	601a      	str	r2, [r3, #0]
              char battleChar[] = "battleMode Engaged!! Pew pew\r\n"; //It works!!
 8001012:	4b39      	ldr	r3, [pc, #228]	; (80010f8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001014:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001018:	461d      	mov	r5, r3
 800101a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800101c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800101e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001022:	c407      	stmia	r4!, {r0, r1, r2}
 8001024:	8023      	strh	r3, [r4, #0]
 8001026:	3402      	adds	r4, #2
 8001028:	0c1b      	lsrs	r3, r3, #16
 800102a:	7023      	strb	r3, [r4, #0]
              HAL_UART_Transmit(&huart1, (uint8_t*)battleChar, strlen(dPress), 0xFFFF);
 800102c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff f91d 	bl	8000270 <strlen>
 8001036:	4603      	mov	r3, r0
 8001038:	b29a      	uxth	r2, r3
 800103a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800103e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001042:	4829      	ldr	r0, [pc, #164]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001044:	f002 fc24 	bl	8003890 <HAL_UART_Transmit>
            }

        // Execute your action for the double press here
        // Reset the count for the next detection
        // set a variable called 'switcher' to TRUE
        buttonPressCount = 0;
 8001048:	4b24      	ldr	r3, [pc, #144]	; (80010dc <HAL_GPIO_EXTI_Callback+0x198>)
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
        //lastButtonPressTime = 0;
        lastButtonPressTime = HAL_GetTick();
 800104e:	f001 f9c3 	bl	80023d8 <HAL_GetTick>
 8001052:	4603      	mov	r3, r0
 8001054:	4a22      	ldr	r2, [pc, #136]	; (80010e0 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001056:	6013      	str	r3, [r2, #0]
      //but will happen if the previous was a double press
    }


  }//GPIO_Pin == thing
}
 8001058:	e039      	b.n	80010ce <HAL_GPIO_EXTI_Callback+0x18a>
       buttonPressCount = 1;
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <HAL_GPIO_EXTI_Callback+0x198>)
 800105c:	2201      	movs	r2, #1
 800105e:	601a      	str	r2, [r3, #0]
       lastButtonPressTime = currentTime; //increment here
 8001060:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <HAL_GPIO_EXTI_Callback+0x194>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a1e      	ldr	r2, [pc, #120]	; (80010e0 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001066:	6013      	str	r3, [r2, #0]
      char sPress[] = "Single Press\r\n"; //It works!!
 8001068:	4b24      	ldr	r3, [pc, #144]	; (80010fc <HAL_GPIO_EXTI_Callback+0x1b8>)
 800106a:	f107 0418 	add.w	r4, r7, #24
 800106e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001070:	c407      	stmia	r4!, {r0, r1, r2}
 8001072:	8023      	strh	r3, [r4, #0]
 8001074:	3402      	adds	r4, #2
 8001076:	0c1b      	lsrs	r3, r3, #16
 8001078:	7023      	strb	r3, [r4, #0]
      HAL_UART_Transmit(&huart1, (uint8_t*)sPress, strlen(sPress), 0xFFFF);
 800107a:	f107 0318 	add.w	r3, r7, #24
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff f8f6 	bl	8000270 <strlen>
 8001084:	4603      	mov	r3, r0
 8001086:	b29a      	uxth	r2, r3
 8001088:	f107 0118 	add.w	r1, r7, #24
 800108c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001090:	4815      	ldr	r0, [pc, #84]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001092:	f002 fbfd 	bl	8003890 <HAL_UART_Transmit>
}
 8001096:	e01a      	b.n	80010ce <HAL_GPIO_EXTI_Callback+0x18a>
      buttonPressCount = 1;
 8001098:	4b10      	ldr	r3, [pc, #64]	; (80010dc <HAL_GPIO_EXTI_Callback+0x198>)
 800109a:	2201      	movs	r2, #1
 800109c:	601a      	str	r2, [r3, #0]
      lastButtonPressTime = currentTime; //increment here
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_GPIO_EXTI_Callback+0x194>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <HAL_GPIO_EXTI_Callback+0x19c>)
 80010a4:	6013      	str	r3, [r2, #0]
      char promptSingle[] = "Single Mingle\r\n"; //It works!!
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80010a8:	f107 0408 	add.w	r4, r7, #8
 80010ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      HAL_UART_Transmit(&huart1, (uint8_t*)promptSingle, strlen(promptSingle), 0xFFFF);
 80010b2:	f107 0308 	add.w	r3, r7, #8
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff f8da 	bl	8000270 <strlen>
 80010bc:	4603      	mov	r3, r0
 80010be:	b29a      	uxth	r2, r3
 80010c0:	f107 0108 	add.w	r1, r7, #8
 80010c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c8:	4807      	ldr	r0, [pc, #28]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80010ca:	f002 fbe1 	bl	8003890 <HAL_UART_Transmit>
}
 80010ce:	bf00      	nop
 80010d0:	3770      	adds	r7, #112	; 0x70
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bdb0      	pop	{r4, r5, r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000304 	.word	0x20000304
 80010dc:	2000030c 	.word	0x2000030c
 80010e0:	20000308 	.word	0x20000308
 80010e4:	08007618 	.word	0x08007618
 80010e8:	20000284 	.word	0x20000284
 80010ec:	20000000 	.word	0x20000000
 80010f0:	20000310 	.word	0x20000310
 80010f4:	08007628 	.word	0x08007628
 80010f8:	08007640 	.word	0x08007640
 80010fc:	08007660 	.word	0x08007660
 8001100:	08007670 	.word	0x08007670
 8001104:	00000000 	.word	0x00000000

08001108 <main>:

int main(void)
{
 8001108:	b5b0      	push	{r4, r5, r7, lr}
 800110a:	b098      	sub	sp, #96	; 0x60
 800110c:	af00      	add	r7, sp, #0
 initialise_monitor_handles();
 800110e:	f003 fb7d 	bl	800480c <initialise_monitor_handles>
 HAL_Init();
 8001112:	f001 f8fd 	bl	8002310 <HAL_Init>

 UART1_Init();
 8001116:	f000 f8d5 	bl	80012c4 <UART1_Init>
 MX_GPIO_Init();
 800111a:	f000 f8a3 	bl	8001264 <MX_GPIO_Init>

 //sensors and LED
 BSP_ACCELERO_Init();
 800111e:	f000 fc89 	bl	8001a34 <BSP_ACCELERO_Init>
 BSP_TSENSOR_Init();
 8001122:	f000 fd29 	bl	8001b78 <BSP_TSENSOR_Init>
 BSP_LED_Init(LED2);
 8001126:	2000      	movs	r0, #0
 8001128:	f000 fb04 	bl	8001734 <BSP_LED_Init>
 BSP_HSENSOR_Init();
 800112c:	f000 fcd8 	bl	8001ae0 <BSP_HSENSOR_Init>
 BSP_MAGNETO_Init();
 8001130:	f000 fcf6 	bl	8001b20 <BSP_MAGNETO_Init>


 while (1)
 {
  currentTime = HAL_GetTick(); //it is in seconds!! wth!!
 8001134:	f001 f950 	bl	80023d8 <HAL_GetTick>
 8001138:	4603      	mov	r3, r0
 800113a:	4a45      	ldr	r2, [pc, #276]	; (8001250 <main+0x148>)
 800113c:	6013      	str	r3, [r2, #0]
  
  char prompt[] = "Testing Terminal\r\n"; //It works!!
 800113e:	4b45      	ldr	r3, [pc, #276]	; (8001254 <main+0x14c>)
 8001140:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001144:	461d      	mov	r5, r3
 8001146:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800114a:	682b      	ldr	r3, [r5, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	8022      	strh	r2, [r4, #0]
 8001150:	3402      	adds	r4, #2
 8001152:	0c1b      	lsrs	r3, r3, #16
 8001154:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)prompt, strlen(prompt), 0xFFFF);
 8001156:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f888 	bl	8000270 <strlen>
 8001160:	4603      	mov	r3, r0
 8001162:	b29a      	uxth	r2, r3
 8001164:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001168:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800116c:	483a      	ldr	r0, [pc, #232]	; (8001258 <main+0x150>)
 800116e:	f002 fb8f 	bl	8003890 <HAL_UART_Transmit>

    char theMode[50]; // Define a character array to store the formatted string

    // Use sprintf to format the string with the mode value
    sprintf(theMode, "the mode number is: %d\r\n", mode); //format it
 8001172:	4b3a      	ldr	r3, [pc, #232]	; (800125c <main+0x154>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	463b      	mov	r3, r7
 8001178:	4939      	ldr	r1, [pc, #228]	; (8001260 <main+0x158>)
 800117a:	4618      	mov	r0, r3
 800117c:	f004 f8d8 	bl	8005330 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)theMode, strlen(theMode), 0xFFFF);
 8001180:	463b      	mov	r3, r7
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f874 	bl	8000270 <strlen>
 8001188:	4603      	mov	r3, r0
 800118a:	b29a      	uxth	r2, r3
 800118c:	4639      	mov	r1, r7
 800118e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001192:	4831      	ldr	r0, [pc, #196]	; (8001258 <main+0x150>)
 8001194:	f002 fb7c 	bl	8003890 <HAL_UART_Transmit>


  //mode 1, Standby, add if statement here

    float accel_data[3];
    int16_t accel_data_i16[3] = { 0 };			// array to store the x, y and z readings.
 8001198:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	809a      	strh	r2, [r3, #4]
    BSP_ACCELERO_AccGetXYZ(accel_data_i16);		// read accelerometer
 80011a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 fc82 	bl	8001ab0 <BSP_ACCELERO_AccGetXYZ>
    // the function above returns 16 bit integers which are acceleration in mg (9.8/1000 m/s^2).
    // Converting to float to print the actual acceleration.
    accel_data[0] = (float)accel_data_i16[0] * (9.8/1000.0f);
 80011ac:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80011b0:	ee07 3a90 	vmov	s15, r3
 80011b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b8:	ee17 0a90 	vmov	r0, s15
 80011bc:	f7ff f9c4 	bl	8000548 <__aeabi_f2d>
 80011c0:	a321      	add	r3, pc, #132	; (adr r3, 8001248 <main+0x140>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff fa17 	bl	80005f8 <__aeabi_dmul>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f7ff fce9 	bl	8000ba8 <__aeabi_d2f>
 80011d6:	4603      	mov	r3, r0
 80011d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    accel_data[1] = (float)accel_data_i16[1] * (9.8/1000.0f);
 80011da:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80011de:	ee07 3a90 	vmov	s15, r3
 80011e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e6:	ee17 0a90 	vmov	r0, s15
 80011ea:	f7ff f9ad 	bl	8000548 <__aeabi_f2d>
 80011ee:	a316      	add	r3, pc, #88	; (adr r3, 8001248 <main+0x140>)
 80011f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f4:	f7ff fa00 	bl	80005f8 <__aeabi_dmul>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	f7ff fcd2 	bl	8000ba8 <__aeabi_d2f>
 8001204:	4603      	mov	r3, r0
 8001206:	643b      	str	r3, [r7, #64]	; 0x40
    accel_data[2] = (float)accel_data_i16[2] * (9.8/1000.0f);
 8001208:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001214:	ee17 0a90 	vmov	r0, s15
 8001218:	f7ff f996 	bl	8000548 <__aeabi_f2d>
 800121c:	a30a      	add	r3, pc, #40	; (adr r3, 8001248 <main+0x140>)
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	f7ff f9e9 	bl	80005f8 <__aeabi_dmul>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f7ff fcbb 	bl	8000ba8 <__aeabi_d2f>
 8001232:	4603      	mov	r3, r0
 8001234:	647b      	str	r3, [r7, #68]	; 0x44

    float temp_data;
    temp_data = BSP_TSENSOR_ReadTemp();			// read temperature sensor
 8001236:	f000 fcbb 	bl	8001bb0 <BSP_TSENSOR_ReadTemp>
 800123a:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c

    //printf("Accel X : %f; Accel Y : %f; Accel Z : %f; Temperature : %f\n", accel_data[0], accel_data[1], accel_data[2], temp_data);

    HAL_Delay(1000);	// read once a ~second.
 800123e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001242:	f001 f8d5 	bl	80023f0 <HAL_Delay>
 {
 8001246:	e775      	b.n	8001134 <main+0x2c>
 8001248:	bc01a36f 	.word	0xbc01a36f
 800124c:	3f841205 	.word	0x3f841205
 8001250:	20000304 	.word	0x20000304
 8001254:	0800769c 	.word	0x0800769c
 8001258:	20000284 	.word	0x20000284
 800125c:	20000000 	.word	0x20000000
 8001260:	08007680 	.word	0x08007680

08001264 <MX_GPIO_Init>:
 }//while (1)

}

static void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 __HAL_RCC_GPIOC_CLK_ENABLE(); // Enable AHB2 Bus for GPIOC
 800126a:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <MX_GPIO_Init+0x54>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <MX_GPIO_Init+0x54>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <MX_GPIO_Init+0x54>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]

 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]

 // Configuration of BUTTON_EXTI13_Pin (GPIO-C Pin-13) as AF,
 GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001290:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001294:	607b      	str	r3, [r7, #4]
 GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <MX_GPIO_Init+0x58>)
 8001298:	60bb      	str	r3, [r7, #8]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	4619      	mov	r1, r3
 80012a2:	4807      	ldr	r0, [pc, #28]	; (80012c0 <MX_GPIO_Init+0x5c>)
 80012a4:	f001 f9d8 	bl	8002658 <HAL_GPIO_Init>

 // Enable NVIC EXTI line 13
 HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012a8:	2028      	movs	r0, #40	; 0x28
 80012aa:	f001 f9ba 	bl	8002622 <HAL_NVIC_EnableIRQ>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000
 80012bc:	10210000 	.word	0x10210000
 80012c0:	48000800 	.word	0x48000800

080012c4 <UART1_Init>:

static void UART1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
    /* Pin configuration for UART. BSP_COM_Init() can do this automatically */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	4b26      	ldr	r3, [pc, #152]	; (8001364 <UART1_Init+0xa0>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	4a25      	ldr	r2, [pc, #148]	; (8001364 <UART1_Init+0xa0>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d6:	4b23      	ldr	r3, [pc, #140]	; (8001364 <UART1_Init+0xa0>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012f0:	2307      	movs	r3, #7
 80012f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80012f4:	23c0      	movs	r3, #192	; 0xc0
 80012f6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	4619      	mov	r1, r3
 8001308:	4817      	ldr	r0, [pc, #92]	; (8001368 <UART1_Init+0xa4>)
 800130a:	f001 f9a5 	bl	8002658 <HAL_GPIO_Init>

    /* Configuring UART1 */
    huart1.Instance = USART1;
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <UART1_Init+0xa8>)
 8001310:	4a17      	ldr	r2, [pc, #92]	; (8001370 <UART1_Init+0xac>)
 8001312:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <UART1_Init+0xa8>)
 8001316:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800131a:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <UART1_Init+0xa8>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <UART1_Init+0xa8>)
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8001328:	4b10      	ldr	r3, [pc, #64]	; (800136c <UART1_Init+0xa8>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <UART1_Init+0xa8>)
 8001330:	220c      	movs	r2, #12
 8001332:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001334:	4b0d      	ldr	r3, [pc, #52]	; (800136c <UART1_Init+0xa8>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <UART1_Init+0xa8>)
 800133c:	2200      	movs	r2, #0
 800133e:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001340:	4b0a      	ldr	r3, [pc, #40]	; (800136c <UART1_Init+0xa8>)
 8001342:	2200      	movs	r2, #0
 8001344:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <UART1_Init+0xa8>)
 8001348:	2200      	movs	r2, #0
 800134a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK)
 800134c:	4807      	ldr	r0, [pc, #28]	; (800136c <UART1_Init+0xa8>)
 800134e:	f002 fa51 	bl	80037f4 <HAL_UART_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d000      	beq.n	800135a <UART1_Init+0x96>
    {
      while(1);
 8001358:	e7fe      	b.n	8001358 <UART1_Init+0x94>
    }
}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000
 8001368:	48000400 	.word	0x48000400
 800136c:	20000284 	.word	0x20000284
 8001370:	40013800 	.word	0x40013800

08001374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <HAL_MspInit+0x44>)
 800137c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137e:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <HAL_MspInit+0x44>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6613      	str	r3, [r2, #96]	; 0x60
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <HAL_MspInit+0x44>)
 8001388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <HAL_MspInit+0x44>)
 8001394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001396:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <HAL_MspInit+0x44>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139c:	6593      	str	r3, [r2, #88]	; 0x58
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_MspInit+0x44>)
 80013a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000

080013bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a17      	ldr	r2, [pc, #92]	; (8001438 <HAL_I2C_MspInit+0x7c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d128      	bne.n	8001430 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	4b17      	ldr	r3, [pc, #92]	; (800143c <HAL_I2C_MspInit+0x80>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	4a16      	ldr	r2, [pc, #88]	; (800143c <HAL_I2C_MspInit+0x80>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <HAL_I2C_MspInit+0x80>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80013f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013fc:	2312      	movs	r3, #18
 80013fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001400:	2301      	movs	r3, #1
 8001402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001408:	2304      	movs	r3, #4
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4619      	mov	r1, r3
 8001412:	480b      	ldr	r0, [pc, #44]	; (8001440 <HAL_I2C_MspInit+0x84>)
 8001414:	f001 f920 	bl	8002658 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <HAL_I2C_MspInit+0x80>)
 800141a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141c:	4a07      	ldr	r2, [pc, #28]	; (800143c <HAL_I2C_MspInit+0x80>)
 800141e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001422:	6593      	str	r3, [r2, #88]	; 0x58
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <HAL_I2C_MspInit+0x80>)
 8001426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001430:	bf00      	nop
 8001432:	3728      	adds	r7, #40	; 0x28
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40005800 	.word	0x40005800
 800143c:	40021000 	.word	0x40021000
 8001440:	48000400 	.word	0x48000400

08001444 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a08      	ldr	r2, [pc, #32]	; (8001474 <HAL_I2C_MspDeInit+0x30>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d10a      	bne.n	800146c <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <HAL_I2C_MspDeInit+0x34>)
 8001458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145a:	4a07      	ldr	r2, [pc, #28]	; (8001478 <HAL_I2C_MspDeInit+0x34>)
 800145c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001460:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8001462:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <HAL_I2C_MspDeInit+0x38>)
 8001468:	f001 faa0 	bl	80029ac <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40005800 	.word	0x40005800
 8001478:	40021000 	.word	0x40021000
 800147c:	48000400 	.word	0x48000400

08001480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	; 0x30
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a2e      	ldr	r2, [pc, #184]	; (8001558 <HAL_UART_MspInit+0xd8>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d128      	bne.n	80014f4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014a2:	4b2e      	ldr	r3, [pc, #184]	; (800155c <HAL_UART_MspInit+0xdc>)
 80014a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a6:	4a2d      	ldr	r2, [pc, #180]	; (800155c <HAL_UART_MspInit+0xdc>)
 80014a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ac:	6613      	str	r3, [r2, #96]	; 0x60
 80014ae:	4b2b      	ldr	r3, [pc, #172]	; (800155c <HAL_UART_MspInit+0xdc>)
 80014b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b6:	61bb      	str	r3, [r7, #24]
 80014b8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	4b28      	ldr	r3, [pc, #160]	; (800155c <HAL_UART_MspInit+0xdc>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	4a27      	ldr	r2, [pc, #156]	; (800155c <HAL_UART_MspInit+0xdc>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c6:	4b25      	ldr	r3, [pc, #148]	; (800155c <HAL_UART_MspInit+0xdc>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80014d2:	23c0      	movs	r3, #192	; 0xc0
 80014d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014e2:	2307      	movs	r3, #7
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4619      	mov	r1, r3
 80014ec:	481c      	ldr	r0, [pc, #112]	; (8001560 <HAL_UART_MspInit+0xe0>)
 80014ee:	f001 f8b3 	bl	8002658 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014f2:	e02d      	b.n	8001550 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a1a      	ldr	r2, [pc, #104]	; (8001564 <HAL_UART_MspInit+0xe4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d128      	bne.n	8001550 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <HAL_UART_MspInit+0xdc>)
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	4a16      	ldr	r2, [pc, #88]	; (800155c <HAL_UART_MspInit+0xdc>)
 8001504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001508:	6593      	str	r3, [r2, #88]	; 0x58
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <HAL_UART_MspInit+0xdc>)
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <HAL_UART_MspInit+0xdc>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	4a10      	ldr	r2, [pc, #64]	; (800155c <HAL_UART_MspInit+0xdc>)
 800151c:	f043 0308 	orr.w	r3, r3, #8
 8001520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_UART_MspInit+0xdc>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800152e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001540:	2307      	movs	r3, #7
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	4807      	ldr	r0, [pc, #28]	; (8001568 <HAL_UART_MspInit+0xe8>)
 800154c:	f001 f884 	bl	8002658 <HAL_GPIO_Init>
}
 8001550:	bf00      	nop
 8001552:	3730      	adds	r7, #48	; 0x30
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40013800 	.word	0x40013800
 800155c:	40021000 	.word	0x40021000
 8001560:	48000400 	.word	0x48000400
 8001564:	40004800 	.word	0x40004800
 8001568:	48000c00 	.word	0x48000c00

0800156c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <MemManage_Handler+0x4>

08001586 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <UsageFault_Handler+0x4>

08001592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c0:	f000 fef8 	bl	80023b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80015cc:	2020      	movs	r0, #32
 80015ce:	f001 fae1 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80015d2:	2040      	movs	r0, #64	; 0x40
 80015d4:	f001 fade 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80015d8:	2080      	movs	r0, #128	; 0x80
 80015da:	f001 fadb 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80015de:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015e2:	f001 fad7 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}

080015ea <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80015ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015f2:	f001 facf 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80015f6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80015fa:	f001 facb 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80015fe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001602:	f001 fac7 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001606:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800160a:	f001 fac3 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800160e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001612:	f001 fabf 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void* _sbrk(int incr)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
    extern char end asm("end");
    static char *heap_end = 0;
    char *prev_heap_end;

    if (heap_end == 0)
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <_sbrk+0x50>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d102      	bne.n	8001632 <_sbrk+0x16>
        heap_end = &end;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <_sbrk+0x50>)
 800162e:	4a10      	ldr	r2, [pc, #64]	; (8001670 <_sbrk+0x54>)
 8001630:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <_sbrk+0x50>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	60fb      	str	r3, [r7, #12]
    if (heap_end + incr > stack_ptr)
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <_sbrk+0x50>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4413      	add	r3, r2
 8001640:	466a      	mov	r2, sp
 8001642:	4293      	cmp	r3, r2
 8001644:	d907      	bls.n	8001656 <_sbrk+0x3a>
    {
        errno = ENOMEM;
 8001646:	f003 ffbd 	bl	80055c4 <__errno>
 800164a:	4603      	mov	r3, r0
 800164c:	220c      	movs	r2, #12
 800164e:	601a      	str	r2, [r3, #0]
        return (void*)-1;
 8001650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001654:	e006      	b.n	8001664 <_sbrk+0x48>
    }

    heap_end += incr;
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <_sbrk+0x50>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	4a03      	ldr	r2, [pc, #12]	; (800166c <_sbrk+0x50>)
 8001660:	6013      	str	r3, [r2, #0]

    return (void*)prev_heap_end;
 8001662:	68fb      	ldr	r3, [r7, #12]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000314 	.word	0x20000314
 8001670:	20000570 	.word	0x20000570

08001674 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001678:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <SystemInit+0x64>)
 800167a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167e:	4a16      	ldr	r2, [pc, #88]	; (80016d8 <SystemInit+0x64>)
 8001680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001688:	4b14      	ldr	r3, [pc, #80]	; (80016dc <SystemInit+0x68>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a13      	ldr	r2, [pc, #76]	; (80016dc <SystemInit+0x68>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <SystemInit+0x68>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <SystemInit+0x68>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a0f      	ldr	r2, [pc, #60]	; (80016dc <SystemInit+0x68>)
 80016a0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80016a4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80016a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <SystemInit+0x68>)
 80016ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016b0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <SystemInit+0x68>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a09      	ldr	r2, [pc, #36]	; (80016dc <SystemInit+0x68>)
 80016b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <SystemInit+0x68>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <SystemInit+0x64>)
 80016c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ca:	609a      	str	r2, [r3, #8]
#endif
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000ed00 	.word	0xe000ed00
 80016dc:	40021000 	.word	0x40021000

080016e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001718 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016e6:	e003      	b.n	80016f0 <LoopCopyDataInit>

080016e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016ee:	3104      	adds	r1, #4

080016f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016f0:	480b      	ldr	r0, [pc, #44]	; (8001720 <LoopForever+0xa>)
	ldr	r3, =_edata
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <LoopForever+0xe>)
	adds	r2, r0, r1
 80016f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016f8:	d3f6      	bcc.n	80016e8 <CopyDataInit>
	ldr	r2, =_sbss
 80016fa:	4a0b      	ldr	r2, [pc, #44]	; (8001728 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016fc:	e002      	b.n	8001704 <LoopFillZerobss>

080016fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001700:	f842 3b04 	str.w	r3, [r2], #4

08001704 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <LoopForever+0x16>)
	cmp	r2, r3
 8001706:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001708:	d3f9      	bcc.n	80016fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800170a:	f7ff ffb3 	bl	8001674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800170e:	f003 ff5f 	bl	80055d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001712:	f7ff fcf9 	bl	8001108 <main>

08001716 <LoopForever>:

LoopForever:
    b LoopForever
 8001716:	e7fe      	b.n	8001716 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001718:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800171c:	08007a80 	.word	0x08007a80
	ldr	r0, =_sdata
 8001720:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001724:	20000268 	.word	0x20000268
	ldr	r2, =_sbss
 8001728:	20000268 	.word	0x20000268
	ldr	r3, = _ebss
 800172c:	20000570 	.word	0x20000570

08001730 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001730:	e7fe      	b.n	8001730 <ADC1_2_IRQHandler>
	...

08001734 <BSP_LED_Init>:
  * @param  Led: LED to be configured. 
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10b      	bne.n	800175c <BSP_LED_Init+0x28>
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <BSP_LED_Init+0x58>)
 8001746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001748:	4a10      	ldr	r2, [pc, #64]	; (800178c <BSP_LED_Init+0x58>)
 800174a:	f043 0302 	orr.w	r3, r3, #2
 800174e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <BSP_LED_Init+0x58>)
 8001752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 800175c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001760:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001762:	2301      	movs	r3, #1
 8001764:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800176a:	2302      	movs	r3, #2
 800176c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	4a07      	ldr	r2, [pc, #28]	; (8001790 <BSP_LED_Init+0x5c>)
 8001772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001776:	f107 020c 	add.w	r2, r7, #12
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f000 ff6b 	bl	8002658 <HAL_GPIO_Init>
}
 8001782:	bf00      	nop
 8001784:	3720      	adds	r7, #32
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000
 8001790:	20000008 	.word	0x20000008

08001794 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800179c:	4b27      	ldr	r3, [pc, #156]	; (800183c <I2Cx_MspInit+0xa8>)
 800179e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a0:	4a26      	ldr	r2, [pc, #152]	; (800183c <I2Cx_MspInit+0xa8>)
 80017a2:	f043 0302 	orr.w	r3, r3, #2
 80017a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <I2Cx_MspInit+0xa8>)
 80017aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80017b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017b8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80017ba:	2312      	movs	r3, #18
 80017bc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80017be:	2301      	movs	r3, #1
 80017c0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c2:	2303      	movs	r3, #3
 80017c4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80017c6:	2304      	movs	r3, #4
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	481b      	ldr	r0, [pc, #108]	; (8001840 <I2Cx_MspInit+0xac>)
 80017d2:	f000 ff41 	bl	8002658 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	4818      	ldr	r0, [pc, #96]	; (8001840 <I2Cx_MspInit+0xac>)
 80017de:	f000 ff3b 	bl	8002658 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80017e2:	4b16      	ldr	r3, [pc, #88]	; (800183c <I2Cx_MspInit+0xa8>)
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	4a15      	ldr	r2, [pc, #84]	; (800183c <I2Cx_MspInit+0xa8>)
 80017e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017ec:	6593      	str	r3, [r2, #88]	; 0x58
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <I2Cx_MspInit+0xa8>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <I2Cx_MspInit+0xa8>)
 80017fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fe:	4a0f      	ldr	r2, [pc, #60]	; (800183c <I2Cx_MspInit+0xa8>)
 8001800:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001804:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <I2Cx_MspInit+0xa8>)
 8001808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180a:	4a0c      	ldr	r2, [pc, #48]	; (800183c <I2Cx_MspInit+0xa8>)
 800180c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001810:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	210f      	movs	r1, #15
 8001816:	2021      	movs	r0, #33	; 0x21
 8001818:	f000 fee7 	bl	80025ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800181c:	2021      	movs	r0, #33	; 0x21
 800181e:	f000 ff00 	bl	8002622 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	210f      	movs	r1, #15
 8001826:	2022      	movs	r0, #34	; 0x22
 8001828:	f000 fedf 	bl	80025ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800182c:	2022      	movs	r0, #34	; 0x22
 800182e:	f000 fef8 	bl	8002622 <HAL_NVIC_EnableIRQ>
}
 8001832:	bf00      	nop
 8001834:	3728      	adds	r7, #40	; 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000
 8001840:	48000400 	.word	0x48000400

08001844 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a12      	ldr	r2, [pc, #72]	; (8001898 <I2Cx_Init+0x54>)
 8001850:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a11      	ldr	r2, [pc, #68]	; (800189c <I2Cx_Init+0x58>)
 8001856:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ff89 	bl	8001794 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f001 f99e 	bl	8002bc4 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001888:	2100      	movs	r1, #0
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f001 fea2 	bl	80035d4 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40005800 	.word	0x40005800
 800189c:	00702681 	.word	0x00702681

080018a0 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af04      	add	r7, sp, #16
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	4608      	mov	r0, r1
 80018aa:	4611      	mov	r1, r2
 80018ac:	461a      	mov	r2, r3
 80018ae:	4603      	mov	r3, r0
 80018b0:	72fb      	strb	r3, [r7, #11]
 80018b2:	460b      	mov	r3, r1
 80018b4:	813b      	strh	r3, [r7, #8]
 80018b6:	4613      	mov	r3, r2
 80018b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80018be:	7afb      	ldrb	r3, [r7, #11]
 80018c0:	b299      	uxth	r1, r3
 80018c2:	88f8      	ldrh	r0, [r7, #6]
 80018c4:	893a      	ldrh	r2, [r7, #8]
 80018c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ca:	9302      	str	r3, [sp, #8]
 80018cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	4603      	mov	r3, r0
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f001 fb46 	bl	8002f68 <HAL_I2C_Mem_Read>
 80018dc:	4603      	mov	r3, r0
 80018de:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80018e0:	7dfb      	ldrb	r3, [r7, #23]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d004      	beq.n	80018f0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80018e6:	7afb      	ldrb	r3, [r7, #11]
 80018e8:	4619      	mov	r1, r3
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f000 f832 	bl	8001954 <I2Cx_Error>
  }
  return status;
 80018f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b08a      	sub	sp, #40	; 0x28
 80018fe:	af04      	add	r7, sp, #16
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	4608      	mov	r0, r1
 8001904:	4611      	mov	r1, r2
 8001906:	461a      	mov	r2, r3
 8001908:	4603      	mov	r3, r0
 800190a:	72fb      	strb	r3, [r7, #11]
 800190c:	460b      	mov	r3, r1
 800190e:	813b      	strh	r3, [r7, #8]
 8001910:	4613      	mov	r3, r2
 8001912:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001918:	7afb      	ldrb	r3, [r7, #11]
 800191a:	b299      	uxth	r1, r3
 800191c:	88f8      	ldrh	r0, [r7, #6]
 800191e:	893a      	ldrh	r2, [r7, #8]
 8001920:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001924:	9302      	str	r3, [sp, #8]
 8001926:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001928:	9301      	str	r3, [sp, #4]
 800192a:	6a3b      	ldr	r3, [r7, #32]
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	4603      	mov	r3, r0
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f001 fa05 	bl	8002d40 <HAL_I2C_Mem_Write>
 8001936:	4603      	mov	r3, r0
 8001938:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800193a:	7dfb      	ldrb	r3, [r7, #23]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d004      	beq.n	800194a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001940:	7afb      	ldrb	r3, [r7, #11]
 8001942:	4619      	mov	r1, r3
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f000 f805 	bl	8001954 <I2Cx_Error>
  }
  return status;
 800194a:	7dfb      	ldrb	r3, [r7, #23]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f001 f9be 	bl	8002ce2 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ff6c 	bl	8001844 <I2Cx_Init>
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <SENSOR_IO_Init+0x10>)
 800197a:	f7ff ff63 	bl	8001844 <I2Cx_Init>
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000318 	.word	0x20000318

08001988 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af02      	add	r7, sp, #8
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
 8001992:	460b      	mov	r3, r1
 8001994:	71bb      	strb	r3, [r7, #6]
 8001996:	4613      	mov	r3, r2
 8001998:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800199a:	79bb      	ldrb	r3, [r7, #6]
 800199c:	b29a      	uxth	r2, r3
 800199e:	79f9      	ldrb	r1, [r7, #7]
 80019a0:	2301      	movs	r3, #1
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	1d7b      	adds	r3, r7, #5
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	2301      	movs	r3, #1
 80019aa:	4803      	ldr	r0, [pc, #12]	; (80019b8 <SENSOR_IO_Write+0x30>)
 80019ac:	f7ff ffa5 	bl	80018fa <I2Cx_WriteMultiple>
}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000318 	.word	0x20000318

080019bc <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	4603      	mov	r3, r0
 80019c4:	460a      	mov	r2, r1
 80019c6:	71fb      	strb	r3, [r7, #7]
 80019c8:	4613      	mov	r3, r2
 80019ca:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80019d0:	79bb      	ldrb	r3, [r7, #6]
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	79f9      	ldrb	r1, [r7, #7]
 80019d6:	2301      	movs	r3, #1
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	f107 030f 	add.w	r3, r7, #15
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	2301      	movs	r3, #1
 80019e2:	4804      	ldr	r0, [pc, #16]	; (80019f4 <SENSOR_IO_Read+0x38>)
 80019e4:	f7ff ff5c 	bl	80018a0 <I2Cx_ReadMultiple>

  return read_value;
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000318 	.word	0x20000318

080019f8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	603a      	str	r2, [r7, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
 8001a06:	460b      	mov	r3, r1
 8001a08:	71bb      	strb	r3, [r7, #6]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001a0e:	79bb      	ldrb	r3, [r7, #6]
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	79f9      	ldrb	r1, [r7, #7]
 8001a14:	88bb      	ldrh	r3, [r7, #4]
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	4804      	ldr	r0, [pc, #16]	; (8001a30 <SENSOR_IO_ReadMultiple+0x38>)
 8001a20:	f7ff ff3e 	bl	80018a0 <I2Cx_ReadMultiple>
 8001a24:	4603      	mov	r3, r0
 8001a26:	b29b      	uxth	r3, r3
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000318 	.word	0x20000318

08001a34 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001a42:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <BSP_ACCELERO_Init+0x74>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	4798      	blx	r3
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b6a      	cmp	r3, #106	; 0x6a
 8001a4c:	d002      	beq.n	8001a54 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	73fb      	strb	r3, [r7, #15]
 8001a52:	e024      	b.n	8001a9e <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001a54:	4b15      	ldr	r3, [pc, #84]	; (8001aac <BSP_ACCELERO_Init+0x78>)
 8001a56:	4a14      	ldr	r2, [pc, #80]	; (8001aa8 <BSP_ACCELERO_Init+0x74>)
 8001a58:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001a5a:	2330      	movs	r3, #48	; 0x30
 8001a5c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001a62:	2300      	movs	r3, #0
 8001a64:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001a66:	2340      	movs	r3, #64	; 0x40
 8001a68:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001a72:	797a      	ldrb	r2, [r7, #5]
 8001a74:	7abb      	ldrb	r3, [r7, #10]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001a7c:	7a3b      	ldrb	r3, [r7, #8]
 8001a7e:	f043 0304 	orr.w	r3, r3, #4
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	021b      	lsls	r3, r3, #8
 8001a86:	b21a      	sxth	r2, r3
 8001a88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <BSP_ACCELERO_Init+0x78>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	89ba      	ldrh	r2, [r7, #12]
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4798      	blx	r3
  }  

  return ret;
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	2000005c 	.word	0x2000005c
 8001aac:	20000364 	.word	0x20000364

08001ab0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d009      	beq.n	8001ad4 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d004      	beq.n	8001ad4 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	4798      	blx	r3
    }
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000364 	.word	0x20000364

08001ae0 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <BSP_HSENSOR_Init+0x38>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	20be      	movs	r0, #190	; 0xbe
 8001aec:	4798      	blx	r3
 8001aee:	4603      	mov	r3, r0
 8001af0:	2bbc      	cmp	r3, #188	; 0xbc
 8001af2:	d002      	beq.n	8001afa <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	e009      	b.n	8001b0e <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <BSP_HSENSOR_Init+0x3c>)
 8001afc:	4a06      	ldr	r2, [pc, #24]	; (8001b18 <BSP_HSENSOR_Init+0x38>)
 8001afe:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <BSP_HSENSOR_Init+0x3c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	20be      	movs	r0, #190	; 0xbe
 8001b08:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001b0e:	687b      	ldr	r3, [r7, #4]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	2000000c 	.word	0x2000000c
 8001b1c:	20000368 	.word	0x20000368

08001b20 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <BSP_MAGNETO_Init+0x50>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	4798      	blx	r3
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b3d      	cmp	r3, #61	; 0x3d
 8001b34:	d002      	beq.n	8001b3c <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	71fb      	strb	r3, [r7, #7]
 8001b3a:	e013      	b.n	8001b64 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8001b3c:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <BSP_MAGNETO_Init+0x54>)
 8001b3e:	4a0c      	ldr	r2, [pc, #48]	; (8001b70 <BSP_MAGNETO_Init+0x50>)
 8001b40:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8001b42:	2358      	movs	r3, #88	; 0x58
 8001b44:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8001b46:	2300      	movs	r3, #0
 8001b48:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8001b4e:	2308      	movs	r3, #8
 8001b50:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8001b52:	2340      	movs	r3, #64	; 0x40
 8001b54:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <BSP_MAGNETO_Init+0x54>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	463a      	mov	r2, r7
 8001b5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b62:	4798      	blx	r3
  } 

  return ret;  
 8001b64:	79fb      	ldrb	r3, [r7, #7]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000028 	.word	0x20000028
 8001b74:	2000036c 	.word	0x2000036c

08001b78 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <BSP_TSENSOR_Init+0x30>)
 8001b84:	4a09      	ldr	r2, [pc, #36]	; (8001bac <BSP_TSENSOR_Init+0x34>)
 8001b86:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001b88:	f7ff fef4 	bl	8001974 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <BSP_TSENSOR_Init+0x30>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2100      	movs	r1, #0
 8001b94:	20be      	movs	r0, #190	; 0xbe
 8001b96:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000370 	.word	0x20000370
 8001bac:	20000018 	.word	0x20000018

08001bb0 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <BSP_TSENSOR_ReadTemp+0x18>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	20be      	movs	r0, #190	; 0xbe
 8001bbc:	4798      	blx	r3
 8001bbe:	eef0 7a40 	vmov.f32	s15, s0
}
 8001bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000370 	.word	0x20000370

08001bcc <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001bd6:	88fb      	ldrh	r3, [r7, #6]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2120      	movs	r1, #32
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff feed 	bl	80019bc <SENSOR_IO_Read>
 8001be2:	4603      	mov	r3, r0
 8001be4:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	f023 0304 	bic.w	r3, r3, #4
 8001bec:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	f023 0303 	bic.w	r3, r3, #3
 8001bfc:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c0c:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	7bfa      	ldrb	r2, [r7, #15]
 8001c14:	2120      	movs	r1, #32
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff feb6 	bl	8001988 <SENSOR_IO_Write>
}
 8001c1c:	bf00      	nop
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8001c32:	f7ff fe9f 	bl	8001974 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001c36:	88fb      	ldrh	r3, [r7, #6]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	210f      	movs	r1, #15
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff febd 	bl	80019bc <SENSOR_IO_Read>
 8001c42:	4603      	mov	r3, r0
 8001c44:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	b2d8      	uxtb	r0, r3
 8001c5e:	f107 020c 	add.w	r2, r7, #12
 8001c62:	2302      	movs	r3, #2
 8001c64:	21b0      	movs	r1, #176	; 0xb0
 8001c66:	f7ff fec7 	bl	80019f8 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8001c6a:	7b3b      	ldrb	r3, [r7, #12]
 8001c6c:	085b      	lsrs	r3, r3, #1
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8001c72:	7b7b      	ldrb	r3, [r7, #13]
 8001c74:	085b      	lsrs	r3, r3, #1
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	b2d8      	uxtb	r0, r3
 8001c7e:	f107 020c 	add.w	r2, r7, #12
 8001c82:	2302      	movs	r3, #2
 8001c84:	21b6      	movs	r1, #182	; 0xb6
 8001c86:	f7ff feb7 	bl	80019f8 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001c8a:	7b7b      	ldrb	r3, [r7, #13]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	b21a      	sxth	r2, r3
 8001c90:	7b3b      	ldrb	r3, [r7, #12]
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	4313      	orrs	r3, r2
 8001c96:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	b2d8      	uxtb	r0, r3
 8001c9c:	f107 020c 	add.w	r2, r7, #12
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	21ba      	movs	r1, #186	; 0xba
 8001ca4:	f7ff fea8 	bl	80019f8 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001ca8:	7b7b      	ldrb	r3, [r7, #13]
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	b21a      	sxth	r2, r3
 8001cae:	7b3b      	ldrb	r3, [r7, #12]
 8001cb0:	b21b      	sxth	r3, r3
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	b2d8      	uxtb	r0, r3
 8001cba:	f107 020c 	add.w	r2, r7, #12
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	21a8      	movs	r1, #168	; 0xa8
 8001cc2:	f7ff fe99 	bl	80019f8 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001cc6:	7b7b      	ldrb	r3, [r7, #13]
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	b21a      	sxth	r2, r3
 8001ccc:	7b3b      	ldrb	r3, [r7, #12]
 8001cce:	b21b      	sxth	r3, r3
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001cd4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001cd8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	ee07 3a90 	vmov	s15, r3
 8001ce2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ce6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001cea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	ee07 3a90 	vmov	s15, r3
 8001cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001cfc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001d00:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	ee07 3a90 	vmov	s15, r3
 8001d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d12:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001d16:	ee07 3a90 	vmov	s15, r3
 8001d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d22:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001d26:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d2a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d32:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001d36:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d3a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001d80 <HTS221_H_ReadHumidity+0x130>
 8001d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d46:	dd01      	ble.n	8001d4c <HTS221_H_ReadHumidity+0xfc>
 8001d48:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <HTS221_H_ReadHumidity+0x134>)
 8001d4a:	e00a      	b.n	8001d62 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8001d4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d58:	d502      	bpl.n	8001d60 <HTS221_H_ReadHumidity+0x110>
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	e000      	b.n	8001d62 <HTS221_H_ReadHumidity+0x112>
 8001d60:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001d62:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001d64:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d68:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d70:	eef0 7a66 	vmov.f32	s15, s13
}
 8001d74:	eeb0 0a67 	vmov.f32	s0, s15
 8001d78:	3720      	adds	r7, #32
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	447a0000 	.word	0x447a0000
 8001d84:	447a0000 	.word	0x447a0000

08001d88 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	6039      	str	r1, [r7, #0]
 8001d92:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001d94:	88fb      	ldrh	r3, [r7, #6]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2120      	movs	r1, #32
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fe0e 	bl	80019bc <SENSOR_IO_Read>
 8001da0:	4603      	mov	r3, r0
 8001da2:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	f023 0304 	bic.w	r3, r3, #4
 8001daa:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	f043 0304 	orr.w	r3, r3, #4
 8001db2:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	f023 0303 	bic.w	r3, r3, #3
 8001dba:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dca:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	7bfa      	ldrb	r2, [r7, #15]
 8001dd2:	2120      	movs	r1, #32
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fdd7 	bl	8001988 <SENSOR_IO_Write>
}
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b088      	sub	sp, #32
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	4603      	mov	r3, r0
 8001dea:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001dec:	88fb      	ldrh	r3, [r7, #6]
 8001dee:	b2d8      	uxtb	r0, r3
 8001df0:	f107 0208 	add.w	r2, r7, #8
 8001df4:	2302      	movs	r3, #2
 8001df6:	21b2      	movs	r1, #178	; 0xb2
 8001df8:	f7ff fdfe 	bl	80019f8 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001dfc:	88fb      	ldrh	r3, [r7, #6]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2135      	movs	r1, #53	; 0x35
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fdda 	bl	80019bc <SENSOR_IO_Read>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001e0c:	7ffb      	ldrb	r3, [r7, #31]
 8001e0e:	021b      	lsls	r3, r3, #8
 8001e10:	b21b      	sxth	r3, r3
 8001e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e16:	b21a      	sxth	r2, r3
 8001e18:	7a3b      	ldrb	r3, [r7, #8]
 8001e1a:	b21b      	sxth	r3, r3
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001e20:	7ffb      	ldrb	r3, [r7, #31]
 8001e22:	019b      	lsls	r3, r3, #6
 8001e24:	b21b      	sxth	r3, r3
 8001e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e2a:	b21a      	sxth	r2, r3
 8001e2c:	7a7b      	ldrb	r3, [r7, #9]
 8001e2e:	b21b      	sxth	r3, r3
 8001e30:	4313      	orrs	r3, r2
 8001e32:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001e34:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e38:	10db      	asrs	r3, r3, #3
 8001e3a:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001e3c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001e40:	10db      	asrs	r3, r3, #3
 8001e42:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001e44:	88fb      	ldrh	r3, [r7, #6]
 8001e46:	b2d8      	uxtb	r0, r3
 8001e48:	f107 0208 	add.w	r2, r7, #8
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	21bc      	movs	r1, #188	; 0xbc
 8001e50:	f7ff fdd2 	bl	80019f8 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001e54:	7a7b      	ldrb	r3, [r7, #9]
 8001e56:	021b      	lsls	r3, r3, #8
 8001e58:	b21a      	sxth	r2, r3
 8001e5a:	7a3b      	ldrb	r3, [r7, #8]
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001e62:	7afb      	ldrb	r3, [r7, #11]
 8001e64:	021b      	lsls	r3, r3, #8
 8001e66:	b21a      	sxth	r2, r3
 8001e68:	7abb      	ldrb	r3, [r7, #10]
 8001e6a:	b21b      	sxth	r3, r3
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001e70:	88fb      	ldrh	r3, [r7, #6]
 8001e72:	b2d8      	uxtb	r0, r3
 8001e74:	f107 0208 	add.w	r2, r7, #8
 8001e78:	2302      	movs	r3, #2
 8001e7a:	21aa      	movs	r1, #170	; 0xaa
 8001e7c:	f7ff fdbc 	bl	80019f8 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001e80:	7a7b      	ldrb	r3, [r7, #9]
 8001e82:	021b      	lsls	r3, r3, #8
 8001e84:	b21a      	sxth	r2, r3
 8001e86:	7a3b      	ldrb	r3, [r7, #8]
 8001e88:	b21b      	sxth	r3, r3
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001e8e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001e92:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	ee07 3a90 	vmov	s15, r3
 8001e9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ea0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ea4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	ee07 3a90 	vmov	s15, r3
 8001eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001eb6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001eba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	ee07 3a90 	vmov	s15, r3
 8001ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ecc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001ed0:	ee07 3a90 	vmov	s15, r3
 8001ed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001edc:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	ee07 3a90 	vmov	s15, r3
}
 8001ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eea:	3720      	adds	r7, #32
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	463b      	mov	r3, r7
 8001ef8:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8001efc:	783b      	ldrb	r3, [r7, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	2120      	movs	r1, #32
 8001f02:	203c      	movs	r0, #60	; 0x3c
 8001f04:	f7ff fd40 	bl	8001988 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8001f08:	787b      	ldrb	r3, [r7, #1]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	2121      	movs	r1, #33	; 0x21
 8001f0e:	203c      	movs	r0, #60	; 0x3c
 8001f10:	f7ff fd3a 	bl	8001988 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8001f14:	78bb      	ldrb	r3, [r7, #2]
 8001f16:	461a      	mov	r2, r3
 8001f18:	2122      	movs	r1, #34	; 0x22
 8001f1a:	203c      	movs	r0, #60	; 0x3c
 8001f1c:	f7ff fd34 	bl	8001988 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	461a      	mov	r2, r3
 8001f24:	2123      	movs	r1, #35	; 0x23
 8001f26:	203c      	movs	r0, #60	; 0x3c
 8001f28:	f7ff fd2e 	bl	8001988 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8001f2c:	793b      	ldrb	r3, [r7, #4]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2124      	movs	r1, #36	; 0x24
 8001f32:	203c      	movs	r0, #60	; 0x3c
 8001f34:	f7ff fd28 	bl	8001988 <SENSOR_IO_Write>
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001f46:	2300      	movs	r3, #0
 8001f48:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001f4a:	2122      	movs	r1, #34	; 0x22
 8001f4c:	203c      	movs	r0, #60	; 0x3c
 8001f4e:	f7ff fd35 	bl	80019bc <SENSOR_IO_Read>
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	f023 0303 	bic.w	r3, r3, #3
 8001f5c:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	f043 0303 	orr.w	r3, r3, #3
 8001f64:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	2122      	movs	r1, #34	; 0x22
 8001f6c:	203c      	movs	r0, #60	; 0x3c
 8001f6e:	f7ff fd0b 	bl	8001988 <SENSOR_IO_Write>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001f7e:	f7ff fcf9 	bl	8001974 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8001f82:	210f      	movs	r1, #15
 8001f84:	203c      	movs	r0, #60	; 0x3c
 8001f86:	f7ff fd19 	bl	80019bc <SENSOR_IO_Read>
 8001f8a:	4603      	mov	r3, r0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001f9e:	2122      	movs	r1, #34	; 0x22
 8001fa0:	203c      	movs	r0, #60	; 0x3c
 8001fa2:	f7ff fd0b 	bl	80019bc <SENSOR_IO_Read>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	f023 0320 	bic.w	r3, r3, #32
 8001fb0:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	f043 0320 	orr.w	r3, r3, #32
 8001fbe:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2122      	movs	r1, #34	; 0x22
 8001fc6:	203c      	movs	r0, #60	; 0x3c
 8001fc8:	f7ff fcde 	bl	8001988 <SENSOR_IO_Write>
}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001fe4:	f04f 0300 	mov.w	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8001fea:	2121      	movs	r1, #33	; 0x21
 8001fec:	203c      	movs	r0, #60	; 0x3c
 8001fee:	f7ff fce5 	bl	80019bc <SENSOR_IO_Read>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8001ff6:	f107 0208 	add.w	r2, r7, #8
 8001ffa:	2306      	movs	r3, #6
 8001ffc:	21a8      	movs	r1, #168	; 0xa8
 8001ffe:	203c      	movs	r0, #60	; 0x3c
 8002000:	f7ff fcfa 	bl	80019f8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002004:	2300      	movs	r3, #0
 8002006:	77fb      	strb	r3, [r7, #31]
 8002008:	e01c      	b.n	8002044 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800200a:	7ffb      	ldrb	r3, [r7, #31]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	3301      	adds	r3, #1
 8002010:	3320      	adds	r3, #32
 8002012:	443b      	add	r3, r7
 8002014:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002018:	b29b      	uxth	r3, r3
 800201a:	021b      	lsls	r3, r3, #8
 800201c:	b29a      	uxth	r2, r3
 800201e:	7ffb      	ldrb	r3, [r7, #31]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	3320      	adds	r3, #32
 8002024:	443b      	add	r3, r7
 8002026:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800202a:	b29b      	uxth	r3, r3
 800202c:	4413      	add	r3, r2
 800202e:	b29a      	uxth	r2, r3
 8002030:	7ffb      	ldrb	r3, [r7, #31]
 8002032:	b212      	sxth	r2, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	3320      	adds	r3, #32
 8002038:	443b      	add	r3, r7
 800203a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800203e:	7ffb      	ldrb	r3, [r7, #31]
 8002040:	3301      	adds	r3, #1
 8002042:	77fb      	strb	r3, [r7, #31]
 8002044:	7ffb      	ldrb	r3, [r7, #31]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d9df      	bls.n	800200a <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 800204a:	7dfb      	ldrb	r3, [r7, #23]
 800204c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002050:	2b60      	cmp	r3, #96	; 0x60
 8002052:	d013      	beq.n	800207c <LIS3MDL_MagReadXYZ+0xa8>
 8002054:	2b60      	cmp	r3, #96	; 0x60
 8002056:	dc14      	bgt.n	8002082 <LIS3MDL_MagReadXYZ+0xae>
 8002058:	2b40      	cmp	r3, #64	; 0x40
 800205a:	d00c      	beq.n	8002076 <LIS3MDL_MagReadXYZ+0xa2>
 800205c:	2b40      	cmp	r3, #64	; 0x40
 800205e:	dc10      	bgt.n	8002082 <LIS3MDL_MagReadXYZ+0xae>
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <LIS3MDL_MagReadXYZ+0x96>
 8002064:	2b20      	cmp	r3, #32
 8002066:	d003      	beq.n	8002070 <LIS3MDL_MagReadXYZ+0x9c>
 8002068:	e00b      	b.n	8002082 <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 800206a:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <LIS3MDL_MagReadXYZ+0xfc>)
 800206c:	61bb      	str	r3, [r7, #24]
    break;
 800206e:	e008      	b.n	8002082 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8002070:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <LIS3MDL_MagReadXYZ+0x100>)
 8002072:	61bb      	str	r3, [r7, #24]
    break;
 8002074:	e005      	b.n	8002082 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8002076:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <LIS3MDL_MagReadXYZ+0x104>)
 8002078:	61bb      	str	r3, [r7, #24]
    break;
 800207a:	e002      	b.n	8002082 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 800207c:	4b17      	ldr	r3, [pc, #92]	; (80020dc <LIS3MDL_MagReadXYZ+0x108>)
 800207e:	61bb      	str	r3, [r7, #24]
    break;    
 8002080:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8002082:	2300      	movs	r3, #0
 8002084:	77fb      	strb	r3, [r7, #31]
 8002086:	e01a      	b.n	80020be <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002088:	7ffb      	ldrb	r3, [r7, #31]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	3320      	adds	r3, #32
 800208e:	443b      	add	r3, r7
 8002090:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002094:	ee07 3a90 	vmov	s15, r3
 8002098:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800209c:	edd7 7a06 	vldr	s15, [r7, #24]
 80020a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a4:	7ffb      	ldrb	r3, [r7, #31]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	4413      	add	r3, r2
 80020ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020b0:	ee17 2a90 	vmov	r2, s15
 80020b4:	b212      	sxth	r2, r2
 80020b6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80020b8:	7ffb      	ldrb	r3, [r7, #31]
 80020ba:	3301      	adds	r3, #1
 80020bc:	77fb      	strb	r3, [r7, #31]
 80020be:	7ffb      	ldrb	r3, [r7, #31]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d9e1      	bls.n	8002088 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 80020c4:	bf00      	nop
 80020c6:	bf00      	nop
 80020c8:	3720      	adds	r7, #32
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	3e0f5c29 	.word	0x3e0f5c29
 80020d4:	3e947ae1 	.word	0x3e947ae1
 80020d8:	3edc28f6 	.word	0x3edc28f6
 80020dc:	3f147ae1 	.word	0x3f147ae1

080020e0 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80020ee:	2110      	movs	r1, #16
 80020f0:	20d4      	movs	r0, #212	; 0xd4
 80020f2:	f7ff fc63 	bl	80019bc <SENSOR_IO_Read>
 80020f6:	4603      	mov	r3, r0
 80020f8:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80020fe:	7bbb      	ldrb	r3, [r7, #14]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002106:	7bba      	ldrb	r2, [r7, #14]
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	4313      	orrs	r3, r2
 800210c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800210e:	7bbb      	ldrb	r3, [r7, #14]
 8002110:	461a      	mov	r2, r3
 8002112:	2110      	movs	r1, #16
 8002114:	20d4      	movs	r0, #212	; 0xd4
 8002116:	f7ff fc37 	bl	8001988 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800211a:	2112      	movs	r1, #18
 800211c:	20d4      	movs	r0, #212	; 0xd4
 800211e:	f7ff fc4d 	bl	80019bc <SENSOR_IO_Read>
 8002122:	4603      	mov	r3, r0
 8002124:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	b29b      	uxth	r3, r3
 800212c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800212e:	7bbb      	ldrb	r3, [r7, #14]
 8002130:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002134:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002136:	7bba      	ldrb	r2, [r7, #14]
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	4313      	orrs	r3, r2
 800213c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800213e:	7bbb      	ldrb	r3, [r7, #14]
 8002140:	461a      	mov	r2, r3
 8002142:	2112      	movs	r1, #18
 8002144:	20d4      	movs	r0, #212	; 0xd4
 8002146:	f7ff fc1f 	bl	8001988 <SENSOR_IO_Write>
}
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002158:	2300      	movs	r3, #0
 800215a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800215c:	2110      	movs	r1, #16
 800215e:	20d4      	movs	r0, #212	; 0xd4
 8002160:	f7ff fc2c 	bl	80019bc <SENSOR_IO_Read>
 8002164:	4603      	mov	r3, r0
 8002166:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	461a      	mov	r2, r3
 8002174:	2110      	movs	r1, #16
 8002176:	20d4      	movs	r0, #212	; 0xd4
 8002178:	f7ff fc06 	bl	8001988 <SENSOR_IO_Write>
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8002188:	f7ff fbf4 	bl	8001974 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800218c:	210f      	movs	r1, #15
 800218e:	20d4      	movs	r0, #212	; 0xd4
 8002190:	f7ff fc14 	bl	80019bc <SENSOR_IO_Read>
 8002194:	4603      	mov	r3, r0
}
 8002196:	4618      	mov	r0, r3
 8002198:	bd80      	pop	{r7, pc}

0800219a <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80021a4:	2300      	movs	r3, #0
 80021a6:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80021a8:	2115      	movs	r1, #21
 80021aa:	20d4      	movs	r0, #212	; 0xd4
 80021ac:	f7ff fc06 	bl	80019bc <SENSOR_IO_Read>
 80021b0:	4603      	mov	r3, r0
 80021b2:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	f023 0310 	bic.w	r3, r3, #16
 80021ba:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80021bc:	88fb      	ldrh	r3, [r7, #6]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	f043 0310 	orr.w	r3, r3, #16
 80021c8:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	461a      	mov	r2, r3
 80021ce:	2115      	movs	r1, #21
 80021d0:	20d4      	movs	r0, #212	; 0xd4
 80021d2:	f7ff fbd9 	bl	8001988 <SENSOR_IO_Write>
}
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80021f6:	2110      	movs	r1, #16
 80021f8:	20d4      	movs	r0, #212	; 0xd4
 80021fa:	f7ff fbdf 	bl	80019bc <SENSOR_IO_Read>
 80021fe:	4603      	mov	r3, r0
 8002200:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002202:	f107 0208 	add.w	r2, r7, #8
 8002206:	2306      	movs	r3, #6
 8002208:	2128      	movs	r1, #40	; 0x28
 800220a:	20d4      	movs	r0, #212	; 0xd4
 800220c:	f7ff fbf4 	bl	80019f8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002210:	2300      	movs	r3, #0
 8002212:	77fb      	strb	r3, [r7, #31]
 8002214:	e01c      	b.n	8002250 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002216:	7ffb      	ldrb	r3, [r7, #31]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	3301      	adds	r3, #1
 800221c:	3320      	adds	r3, #32
 800221e:	443b      	add	r3, r7
 8002220:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002224:	b29b      	uxth	r3, r3
 8002226:	021b      	lsls	r3, r3, #8
 8002228:	b29a      	uxth	r2, r3
 800222a:	7ffb      	ldrb	r3, [r7, #31]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	3320      	adds	r3, #32
 8002230:	443b      	add	r3, r7
 8002232:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002236:	b29b      	uxth	r3, r3
 8002238:	4413      	add	r3, r2
 800223a:	b29a      	uxth	r2, r3
 800223c:	7ffb      	ldrb	r3, [r7, #31]
 800223e:	b212      	sxth	r2, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	3320      	adds	r3, #32
 8002244:	443b      	add	r3, r7
 8002246:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800224a:	7ffb      	ldrb	r3, [r7, #31]
 800224c:	3301      	adds	r3, #1
 800224e:	77fb      	strb	r3, [r7, #31]
 8002250:	7ffb      	ldrb	r3, [r7, #31]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d9df      	bls.n	8002216 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002256:	7dfb      	ldrb	r3, [r7, #23]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b0c      	cmp	r3, #12
 800225e:	d829      	bhi.n	80022b4 <LSM6DSL_AccReadXYZ+0xd4>
 8002260:	a201      	add	r2, pc, #4	; (adr r2, 8002268 <LSM6DSL_AccReadXYZ+0x88>)
 8002262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002266:	bf00      	nop
 8002268:	0800229d 	.word	0x0800229d
 800226c:	080022b5 	.word	0x080022b5
 8002270:	080022b5 	.word	0x080022b5
 8002274:	080022b5 	.word	0x080022b5
 8002278:	080022af 	.word	0x080022af
 800227c:	080022b5 	.word	0x080022b5
 8002280:	080022b5 	.word	0x080022b5
 8002284:	080022b5 	.word	0x080022b5
 8002288:	080022a3 	.word	0x080022a3
 800228c:	080022b5 	.word	0x080022b5
 8002290:	080022b5 	.word	0x080022b5
 8002294:	080022b5 	.word	0x080022b5
 8002298:	080022a9 	.word	0x080022a9
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800229c:	4b18      	ldr	r3, [pc, #96]	; (8002300 <LSM6DSL_AccReadXYZ+0x120>)
 800229e:	61bb      	str	r3, [r7, #24]
    break;
 80022a0:	e008      	b.n	80022b4 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80022a2:	4b18      	ldr	r3, [pc, #96]	; (8002304 <LSM6DSL_AccReadXYZ+0x124>)
 80022a4:	61bb      	str	r3, [r7, #24]
    break;
 80022a6:	e005      	b.n	80022b4 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80022a8:	4b17      	ldr	r3, [pc, #92]	; (8002308 <LSM6DSL_AccReadXYZ+0x128>)
 80022aa:	61bb      	str	r3, [r7, #24]
    break;
 80022ac:	e002      	b.n	80022b4 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80022ae:	4b17      	ldr	r3, [pc, #92]	; (800230c <LSM6DSL_AccReadXYZ+0x12c>)
 80022b0:	61bb      	str	r3, [r7, #24]
    break;    
 80022b2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80022b4:	2300      	movs	r3, #0
 80022b6:	77fb      	strb	r3, [r7, #31]
 80022b8:	e01a      	b.n	80022f0 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80022ba:	7ffb      	ldrb	r3, [r7, #31]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	3320      	adds	r3, #32
 80022c0:	443b      	add	r3, r7
 80022c2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80022c6:	ee07 3a90 	vmov	s15, r3
 80022ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80022d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d6:	7ffb      	ldrb	r3, [r7, #31]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022e2:	ee17 2a90 	vmov	r2, s15
 80022e6:	b212      	sxth	r2, r2
 80022e8:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80022ea:	7ffb      	ldrb	r3, [r7, #31]
 80022ec:	3301      	adds	r3, #1
 80022ee:	77fb      	strb	r3, [r7, #31]
 80022f0:	7ffb      	ldrb	r3, [r7, #31]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d9e1      	bls.n	80022ba <LSM6DSL_AccReadXYZ+0xda>
  }
}
 80022f6:	bf00      	nop
 80022f8:	bf00      	nop
 80022fa:	3720      	adds	r7, #32
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	3d79db23 	.word	0x3d79db23
 8002304:	3df9db23 	.word	0x3df9db23
 8002308:	3e79db23 	.word	0x3e79db23
 800230c:	3ef9db23 	.word	0x3ef9db23

08002310 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800231a:	2003      	movs	r0, #3
 800231c:	f000 f95a 	bl	80025d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002320:	2000      	movs	r0, #0
 8002322:	f000 f80d 	bl	8002340 <HAL_InitTick>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	71fb      	strb	r3, [r7, #7]
 8002330:	e001      	b.n	8002336 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002332:	f7ff f81f 	bl	8001374 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002336:	79fb      	ldrb	r3, [r7, #7]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800234c:	4b16      	ldr	r3, [pc, #88]	; (80023a8 <HAL_InitTick+0x68>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d022      	beq.n	800239a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002354:	4b15      	ldr	r3, [pc, #84]	; (80023ac <HAL_InitTick+0x6c>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <HAL_InitTick+0x68>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002360:	fbb1 f3f3 	udiv	r3, r1, r3
 8002364:	fbb2 f3f3 	udiv	r3, r2, r3
 8002368:	4618      	mov	r0, r3
 800236a:	f000 f968 	bl	800263e <HAL_SYSTICK_Config>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10f      	bne.n	8002394 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b0f      	cmp	r3, #15
 8002378:	d809      	bhi.n	800238e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800237a:	2200      	movs	r2, #0
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002382:	f000 f932 	bl	80025ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002386:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <HAL_InitTick+0x70>)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	e007      	b.n	800239e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	73fb      	strb	r3, [r7, #15]
 8002392:	e004      	b.n	800239e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
 8002398:	e001      	b.n	800239e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800239e:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000094 	.word	0x20000094
 80023ac:	20000004 	.word	0x20000004
 80023b0:	20000090 	.word	0x20000090

080023b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <HAL_IncTick+0x1c>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_IncTick+0x20>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4413      	add	r3, r2
 80023c2:	4a03      	ldr	r2, [pc, #12]	; (80023d0 <HAL_IncTick+0x1c>)
 80023c4:	6013      	str	r3, [r2, #0]
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	20000374 	.word	0x20000374
 80023d4:	20000094 	.word	0x20000094

080023d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return uwTick;
 80023dc:	4b03      	ldr	r3, [pc, #12]	; (80023ec <HAL_GetTick+0x14>)
 80023de:	681b      	ldr	r3, [r3, #0]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000374 	.word	0x20000374

080023f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f8:	f7ff ffee 	bl	80023d8 <HAL_GetTick>
 80023fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002408:	d004      	beq.n	8002414 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_Delay+0x40>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	4413      	add	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002414:	bf00      	nop
 8002416:	f7ff ffdf 	bl	80023d8 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	429a      	cmp	r2, r3
 8002424:	d8f7      	bhi.n	8002416 <HAL_Delay+0x26>
  {
  }
}
 8002426:	bf00      	nop
 8002428:	bf00      	nop
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000094 	.word	0x20000094

08002434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <__NVIC_SetPriorityGrouping+0x44>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002450:	4013      	ands	r3, r2
 8002452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800245c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002466:	4a04      	ldr	r2, [pc, #16]	; (8002478 <__NVIC_SetPriorityGrouping+0x44>)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	60d3      	str	r3, [r2, #12]
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <__NVIC_GetPriorityGrouping+0x18>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	0a1b      	lsrs	r3, r3, #8
 8002486:	f003 0307 	and.w	r3, r3, #7
}
 800248a:	4618      	mov	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	db0b      	blt.n	80024c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	f003 021f 	and.w	r2, r3, #31
 80024b0:	4907      	ldr	r1, [pc, #28]	; (80024d0 <__NVIC_EnableIRQ+0x38>)
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	2001      	movs	r0, #1
 80024ba:	fa00 f202 	lsl.w	r2, r0, r2
 80024be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000e100 	.word	0xe000e100

080024d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	6039      	str	r1, [r7, #0]
 80024de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	db0a      	blt.n	80024fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	490c      	ldr	r1, [pc, #48]	; (8002520 <__NVIC_SetPriority+0x4c>)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	0112      	lsls	r2, r2, #4
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	440b      	add	r3, r1
 80024f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024fc:	e00a      	b.n	8002514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4908      	ldr	r1, [pc, #32]	; (8002524 <__NVIC_SetPriority+0x50>)
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	3b04      	subs	r3, #4
 800250c:	0112      	lsls	r2, r2, #4
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	440b      	add	r3, r1
 8002512:	761a      	strb	r2, [r3, #24]
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000e100 	.word	0xe000e100
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	; 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f1c3 0307 	rsb	r3, r3, #7
 8002542:	2b04      	cmp	r3, #4
 8002544:	bf28      	it	cs
 8002546:	2304      	movcs	r3, #4
 8002548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3304      	adds	r3, #4
 800254e:	2b06      	cmp	r3, #6
 8002550:	d902      	bls.n	8002558 <NVIC_EncodePriority+0x30>
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3b03      	subs	r3, #3
 8002556:	e000      	b.n	800255a <NVIC_EncodePriority+0x32>
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43da      	mvns	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	401a      	ands	r2, r3
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002570:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	43d9      	mvns	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	4313      	orrs	r3, r2
         );
}
 8002582:	4618      	mov	r0, r3
 8002584:	3724      	adds	r7, #36	; 0x24
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
	...

08002590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3b01      	subs	r3, #1
 800259c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025a0:	d301      	bcc.n	80025a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025a2:	2301      	movs	r3, #1
 80025a4:	e00f      	b.n	80025c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025a6:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <SysTick_Config+0x40>)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ae:	210f      	movs	r1, #15
 80025b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025b4:	f7ff ff8e 	bl	80024d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <SysTick_Config+0x40>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025be:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <SysTick_Config+0x40>)
 80025c0:	2207      	movs	r2, #7
 80025c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	e000e010 	.word	0xe000e010

080025d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff ff29 	bl	8002434 <__NVIC_SetPriorityGrouping>
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b086      	sub	sp, #24
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	4603      	mov	r3, r0
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025fc:	f7ff ff3e 	bl	800247c <__NVIC_GetPriorityGrouping>
 8002600:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	6978      	ldr	r0, [r7, #20]
 8002608:	f7ff ff8e 	bl	8002528 <NVIC_EncodePriority>
 800260c:	4602      	mov	r2, r0
 800260e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff5d 	bl	80024d4 <__NVIC_SetPriority>
}
 800261a:	bf00      	nop
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff31 	bl	8002498 <__NVIC_EnableIRQ>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff ffa2 	bl	8002590 <SysTick_Config>
 800264c:	4603      	mov	r3, r0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002666:	e17f      	b.n	8002968 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	2101      	movs	r1, #1
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	fa01 f303 	lsl.w	r3, r1, r3
 8002674:	4013      	ands	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 8171 	beq.w	8002962 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d00b      	beq.n	80026a0 <HAL_GPIO_Init+0x48>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b02      	cmp	r3, #2
 800268e:	d007      	beq.n	80026a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002694:	2b11      	cmp	r3, #17
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b12      	cmp	r3, #18
 800269e:	d130      	bne.n	8002702 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	2203      	movs	r2, #3
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026d6:	2201      	movs	r2, #1
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4013      	ands	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	091b      	lsrs	r3, r3, #4
 80026ec:	f003 0201 	and.w	r2, r3, #1
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b03      	cmp	r3, #3
 800270c:	d118      	bne.n	8002740 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002712:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002714:	2201      	movs	r2, #1
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4013      	ands	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	08db      	lsrs	r3, r3, #3
 800272a:	f003 0201 	and.w	r2, r3, #1
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	2203      	movs	r2, #3
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x128>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b12      	cmp	r3, #18
 800277e:	d123      	bne.n	80027c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	08da      	lsrs	r2, r3, #3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3208      	adds	r2, #8
 8002788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800278c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	220f      	movs	r2, #15
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	08da      	lsrs	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3208      	adds	r2, #8
 80027c2:	6939      	ldr	r1, [r7, #16]
 80027c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	2203      	movs	r2, #3
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4013      	ands	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0203 	and.w	r2, r3, #3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80ac 	beq.w	8002962 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280a:	4b5f      	ldr	r3, [pc, #380]	; (8002988 <HAL_GPIO_Init+0x330>)
 800280c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800280e:	4a5e      	ldr	r2, [pc, #376]	; (8002988 <HAL_GPIO_Init+0x330>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	6613      	str	r3, [r2, #96]	; 0x60
 8002816:	4b5c      	ldr	r3, [pc, #368]	; (8002988 <HAL_GPIO_Init+0x330>)
 8002818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002822:	4a5a      	ldr	r2, [pc, #360]	; (800298c <HAL_GPIO_Init+0x334>)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	089b      	lsrs	r3, r3, #2
 8002828:	3302      	adds	r3, #2
 800282a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	220f      	movs	r2, #15
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43db      	mvns	r3, r3
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4013      	ands	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800284c:	d025      	beq.n	800289a <HAL_GPIO_Init+0x242>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4f      	ldr	r2, [pc, #316]	; (8002990 <HAL_GPIO_Init+0x338>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d01f      	beq.n	8002896 <HAL_GPIO_Init+0x23e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a4e      	ldr	r2, [pc, #312]	; (8002994 <HAL_GPIO_Init+0x33c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d019      	beq.n	8002892 <HAL_GPIO_Init+0x23a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a4d      	ldr	r2, [pc, #308]	; (8002998 <HAL_GPIO_Init+0x340>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d013      	beq.n	800288e <HAL_GPIO_Init+0x236>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a4c      	ldr	r2, [pc, #304]	; (800299c <HAL_GPIO_Init+0x344>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d00d      	beq.n	800288a <HAL_GPIO_Init+0x232>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a4b      	ldr	r2, [pc, #300]	; (80029a0 <HAL_GPIO_Init+0x348>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d007      	beq.n	8002886 <HAL_GPIO_Init+0x22e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a4a      	ldr	r2, [pc, #296]	; (80029a4 <HAL_GPIO_Init+0x34c>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d101      	bne.n	8002882 <HAL_GPIO_Init+0x22a>
 800287e:	2306      	movs	r3, #6
 8002880:	e00c      	b.n	800289c <HAL_GPIO_Init+0x244>
 8002882:	2307      	movs	r3, #7
 8002884:	e00a      	b.n	800289c <HAL_GPIO_Init+0x244>
 8002886:	2305      	movs	r3, #5
 8002888:	e008      	b.n	800289c <HAL_GPIO_Init+0x244>
 800288a:	2304      	movs	r3, #4
 800288c:	e006      	b.n	800289c <HAL_GPIO_Init+0x244>
 800288e:	2303      	movs	r3, #3
 8002890:	e004      	b.n	800289c <HAL_GPIO_Init+0x244>
 8002892:	2302      	movs	r3, #2
 8002894:	e002      	b.n	800289c <HAL_GPIO_Init+0x244>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <HAL_GPIO_Init+0x244>
 800289a:	2300      	movs	r3, #0
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	f002 0203 	and.w	r2, r2, #3
 80028a2:	0092      	lsls	r2, r2, #2
 80028a4:	4093      	lsls	r3, r2
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028ac:	4937      	ldr	r1, [pc, #220]	; (800298c <HAL_GPIO_Init+0x334>)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	3302      	adds	r3, #2
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028ba:	4b3b      	ldr	r3, [pc, #236]	; (80029a8 <HAL_GPIO_Init+0x350>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028de:	4a32      	ldr	r2, [pc, #200]	; (80029a8 <HAL_GPIO_Init+0x350>)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80028e4:	4b30      	ldr	r3, [pc, #192]	; (80029a8 <HAL_GPIO_Init+0x350>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4013      	ands	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002908:	4a27      	ldr	r2, [pc, #156]	; (80029a8 <HAL_GPIO_Init+0x350>)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800290e:	4b26      	ldr	r3, [pc, #152]	; (80029a8 <HAL_GPIO_Init+0x350>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	43db      	mvns	r3, r3
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4013      	ands	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002932:	4a1d      	ldr	r2, [pc, #116]	; (80029a8 <HAL_GPIO_Init+0x350>)
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002938:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <HAL_GPIO_Init+0x350>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	43db      	mvns	r3, r3
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4013      	ands	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800295c:	4a12      	ldr	r2, [pc, #72]	; (80029a8 <HAL_GPIO_Init+0x350>)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	3301      	adds	r3, #1
 8002966:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	fa22 f303 	lsr.w	r3, r2, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	f47f ae78 	bne.w	8002668 <HAL_GPIO_Init+0x10>
  }
}
 8002978:	bf00      	nop
 800297a:	bf00      	nop
 800297c:	371c      	adds	r7, #28
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000
 800298c:	40010000 	.word	0x40010000
 8002990:	48000400 	.word	0x48000400
 8002994:	48000800 	.word	0x48000800
 8002998:	48000c00 	.word	0x48000c00
 800299c:	48001000 	.word	0x48001000
 80029a0:	48001400 	.word	0x48001400
 80029a4:	48001800 	.word	0x48001800
 80029a8:	40010400 	.word	0x40010400

080029ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80029ba:	e0cd      	b.n	8002b58 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80029bc:	2201      	movs	r2, #1
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	4013      	ands	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80c0 	beq.w	8002b52 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80029d2:	4a68      	ldr	r2, [pc, #416]	; (8002b74 <HAL_GPIO_DeInit+0x1c8>)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	089b      	lsrs	r3, r3, #2
 80029d8:	3302      	adds	r3, #2
 80029da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029de:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	220f      	movs	r2, #15
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4013      	ands	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029fa:	d025      	beq.n	8002a48 <HAL_GPIO_DeInit+0x9c>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a5e      	ldr	r2, [pc, #376]	; (8002b78 <HAL_GPIO_DeInit+0x1cc>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d01f      	beq.n	8002a44 <HAL_GPIO_DeInit+0x98>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a5d      	ldr	r2, [pc, #372]	; (8002b7c <HAL_GPIO_DeInit+0x1d0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d019      	beq.n	8002a40 <HAL_GPIO_DeInit+0x94>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a5c      	ldr	r2, [pc, #368]	; (8002b80 <HAL_GPIO_DeInit+0x1d4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d013      	beq.n	8002a3c <HAL_GPIO_DeInit+0x90>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a5b      	ldr	r2, [pc, #364]	; (8002b84 <HAL_GPIO_DeInit+0x1d8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00d      	beq.n	8002a38 <HAL_GPIO_DeInit+0x8c>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a5a      	ldr	r2, [pc, #360]	; (8002b88 <HAL_GPIO_DeInit+0x1dc>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d007      	beq.n	8002a34 <HAL_GPIO_DeInit+0x88>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a59      	ldr	r2, [pc, #356]	; (8002b8c <HAL_GPIO_DeInit+0x1e0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d101      	bne.n	8002a30 <HAL_GPIO_DeInit+0x84>
 8002a2c:	2306      	movs	r3, #6
 8002a2e:	e00c      	b.n	8002a4a <HAL_GPIO_DeInit+0x9e>
 8002a30:	2307      	movs	r3, #7
 8002a32:	e00a      	b.n	8002a4a <HAL_GPIO_DeInit+0x9e>
 8002a34:	2305      	movs	r3, #5
 8002a36:	e008      	b.n	8002a4a <HAL_GPIO_DeInit+0x9e>
 8002a38:	2304      	movs	r3, #4
 8002a3a:	e006      	b.n	8002a4a <HAL_GPIO_DeInit+0x9e>
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e004      	b.n	8002a4a <HAL_GPIO_DeInit+0x9e>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e002      	b.n	8002a4a <HAL_GPIO_DeInit+0x9e>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_GPIO_DeInit+0x9e>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	f002 0203 	and.w	r2, r2, #3
 8002a50:	0092      	lsls	r2, r2, #2
 8002a52:	4093      	lsls	r3, r2
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d132      	bne.n	8002ac0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002a5a:	4b4d      	ldr	r3, [pc, #308]	; (8002b90 <HAL_GPIO_DeInit+0x1e4>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	494b      	ldr	r1, [pc, #300]	; (8002b90 <HAL_GPIO_DeInit+0x1e4>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002a68:	4b49      	ldr	r3, [pc, #292]	; (8002b90 <HAL_GPIO_DeInit+0x1e4>)
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	4947      	ldr	r1, [pc, #284]	; (8002b90 <HAL_GPIO_DeInit+0x1e4>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002a76:	4b46      	ldr	r3, [pc, #280]	; (8002b90 <HAL_GPIO_DeInit+0x1e4>)
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	4944      	ldr	r1, [pc, #272]	; (8002b90 <HAL_GPIO_DeInit+0x1e4>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8002a84:	4b42      	ldr	r3, [pc, #264]	; (8002b90 <HAL_GPIO_DeInit+0x1e4>)
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	4940      	ldr	r1, [pc, #256]	; (8002b90 <HAL_GPIO_DeInit+0x1e4>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	220f      	movs	r2, #15
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002aa2:	4a34      	ldr	r2, [pc, #208]	; (8002b74 <HAL_GPIO_DeInit+0x1c8>)
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	089b      	lsrs	r3, r3, #2
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	43da      	mvns	r2, r3
 8002ab2:	4830      	ldr	r0, [pc, #192]	; (8002b74 <HAL_GPIO_DeInit+0x1c8>)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	089b      	lsrs	r3, r3, #2
 8002ab8:	400a      	ands	r2, r1
 8002aba:	3302      	adds	r3, #2
 8002abc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	2103      	movs	r1, #3
 8002aca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	08da      	lsrs	r2, r3, #3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3208      	adds	r2, #8
 8002adc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	220f      	movs	r2, #15
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	08d2      	lsrs	r2, r2, #3
 8002af4:	4019      	ands	r1, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3208      	adds	r2, #8
 8002afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2103      	movs	r1, #3
 8002b08:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	401a      	ands	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	2101      	movs	r1, #1
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	401a      	ands	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	2103      	movs	r1, #3
 8002b32:	fa01 f303 	lsl.w	r3, r1, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	401a      	ands	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b42:	2101      	movs	r1, #1
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	401a      	ands	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	3301      	adds	r3, #1
 8002b56:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f47f af2b 	bne.w	80029bc <HAL_GPIO_DeInit+0x10>
  }
}
 8002b66:	bf00      	nop
 8002b68:	bf00      	nop
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	40010000 	.word	0x40010000
 8002b78:	48000400 	.word	0x48000400
 8002b7c:	48000800 	.word	0x48000800
 8002b80:	48000c00 	.word	0x48000c00
 8002b84:	48001000 	.word	0x48001000
 8002b88:	48001400 	.word	0x48001400
 8002b8c:	48001800 	.word	0x48001800
 8002b90:	40010400 	.word	0x40010400

08002b94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b9e:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d006      	beq.n	8002bb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002baa:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bac:	88fb      	ldrh	r3, [r7, #6]
 8002bae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fe f9c6 	bl	8000f44 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40010400 	.word	0x40010400

08002bc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e081      	b.n	8002cda <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fe fbe6 	bl	80013bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2224      	movs	r2, #36	; 0x24
 8002bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0201 	bic.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d107      	bne.n	8002c3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	e006      	b.n	8002c4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d104      	bne.n	8002c5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691a      	ldr	r2, [r3, #16]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	ea42 0103 	orr.w	r1, r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	021a      	lsls	r2, r3, #8
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69d9      	ldr	r1, [r3, #28]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a1a      	ldr	r2, [r3, #32]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0201 	orr.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e021      	b.n	8002d38 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2224      	movs	r2, #36	; 0x24
 8002cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7fe fb99 	bl	8001444 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af02      	add	r7, sp, #8
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	4608      	mov	r0, r1
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4603      	mov	r3, r0
 8002d50:	817b      	strh	r3, [r7, #10]
 8002d52:	460b      	mov	r3, r1
 8002d54:	813b      	strh	r3, [r7, #8]
 8002d56:	4613      	mov	r3, r2
 8002d58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b20      	cmp	r3, #32
 8002d64:	f040 80f9 	bne.w	8002f5a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <HAL_I2C_Mem_Write+0x34>
 8002d6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d105      	bne.n	8002d80 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d7a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0ed      	b.n	8002f5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_I2C_Mem_Write+0x4e>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e0e6      	b.n	8002f5c <HAL_I2C_Mem_Write+0x21c>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d96:	f7ff fb1f 	bl	80023d8 <HAL_GetTick>
 8002d9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	2319      	movs	r3, #25
 8002da2:	2201      	movs	r2, #1
 8002da4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 fac3 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0d1      	b.n	8002f5c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2221      	movs	r2, #33	; 0x21
 8002dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2240      	movs	r2, #64	; 0x40
 8002dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a3a      	ldr	r2, [r7, #32]
 8002dd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002de0:	88f8      	ldrh	r0, [r7, #6]
 8002de2:	893a      	ldrh	r2, [r7, #8]
 8002de4:	8979      	ldrh	r1, [r7, #10]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	9301      	str	r3, [sp, #4]
 8002dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	4603      	mov	r3, r0
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f9d3 	bl	800319c <I2C_RequestMemoryWrite>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0a9      	b.n	8002f5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2bff      	cmp	r3, #255	; 0xff
 8002e10:	d90e      	bls.n	8002e30 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	22ff      	movs	r2, #255	; 0xff
 8002e16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	8979      	ldrh	r1, [r7, #10]
 8002e20:	2300      	movs	r3, #0
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 fba5 	bl	8003578 <I2C_TransferConfig>
 8002e2e:	e00f      	b.n	8002e50 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	8979      	ldrh	r1, [r7, #10]
 8002e42:	2300      	movs	r3, #0
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 fb94 	bl	8003578 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 faad 	bl	80033b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e07b      	b.n	8002f5c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	781a      	ldrb	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d034      	beq.n	8002f08 <HAL_I2C_Mem_Write+0x1c8>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d130      	bne.n	8002f08 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eac:	2200      	movs	r2, #0
 8002eae:	2180      	movs	r1, #128	; 0x80
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 fa3f 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e04d      	b.n	8002f5c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2bff      	cmp	r3, #255	; 0xff
 8002ec8:	d90e      	bls.n	8002ee8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	22ff      	movs	r2, #255	; 0xff
 8002ece:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	8979      	ldrh	r1, [r7, #10]
 8002ed8:	2300      	movs	r3, #0
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 fb49 	bl	8003578 <I2C_TransferConfig>
 8002ee6:	e00f      	b.n	8002f08 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	8979      	ldrh	r1, [r7, #10]
 8002efa:	2300      	movs	r3, #0
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 fb38 	bl	8003578 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d19e      	bne.n	8002e50 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 fa8c 	bl	8003434 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e01a      	b.n	8002f5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6859      	ldr	r1, [r3, #4]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <HAL_I2C_Mem_Write+0x224>)
 8002f3a:	400b      	ands	r3, r1
 8002f3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	e000      	b.n	8002f5c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002f5a:	2302      	movs	r3, #2
  }
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	fe00e800 	.word	0xfe00e800

08002f68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	4608      	mov	r0, r1
 8002f72:	4611      	mov	r1, r2
 8002f74:	461a      	mov	r2, r3
 8002f76:	4603      	mov	r3, r0
 8002f78:	817b      	strh	r3, [r7, #10]
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	813b      	strh	r3, [r7, #8]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	f040 80fd 	bne.w	800318a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <HAL_I2C_Mem_Read+0x34>
 8002f96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d105      	bne.n	8002fa8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fa2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0f1      	b.n	800318c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_I2C_Mem_Read+0x4e>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e0ea      	b.n	800318c <HAL_I2C_Mem_Read+0x224>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fbe:	f7ff fa0b 	bl	80023d8 <HAL_GetTick>
 8002fc2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	2319      	movs	r3, #25
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f9af 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0d5      	b.n	800318c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2222      	movs	r2, #34	; 0x22
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2240      	movs	r2, #64	; 0x40
 8002fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a3a      	ldr	r2, [r7, #32]
 8002ffa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003000:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003008:	88f8      	ldrh	r0, [r7, #6]
 800300a:	893a      	ldrh	r2, [r7, #8]
 800300c:	8979      	ldrh	r1, [r7, #10]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	9301      	str	r3, [sp, #4]
 8003012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	4603      	mov	r3, r0
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f913 	bl	8003244 <I2C_RequestMemoryRead>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0ad      	b.n	800318c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003034:	b29b      	uxth	r3, r3
 8003036:	2bff      	cmp	r3, #255	; 0xff
 8003038:	d90e      	bls.n	8003058 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	22ff      	movs	r2, #255	; 0xff
 800303e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003044:	b2da      	uxtb	r2, r3
 8003046:	8979      	ldrh	r1, [r7, #10]
 8003048:	4b52      	ldr	r3, [pc, #328]	; (8003194 <HAL_I2C_Mem_Read+0x22c>)
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 fa91 	bl	8003578 <I2C_TransferConfig>
 8003056:	e00f      	b.n	8003078 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003066:	b2da      	uxtb	r2, r3
 8003068:	8979      	ldrh	r1, [r7, #10]
 800306a:	4b4a      	ldr	r3, [pc, #296]	; (8003194 <HAL_I2C_Mem_Read+0x22c>)
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 fa80 	bl	8003578 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307e:	2200      	movs	r2, #0
 8003080:	2104      	movs	r1, #4
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 f956 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e07c      	b.n	800318c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d034      	beq.n	8003138 <HAL_I2C_Mem_Read+0x1d0>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d130      	bne.n	8003138 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030dc:	2200      	movs	r2, #0
 80030de:	2180      	movs	r1, #128	; 0x80
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f927 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e04d      	b.n	800318c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2bff      	cmp	r3, #255	; 0xff
 80030f8:	d90e      	bls.n	8003118 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	22ff      	movs	r2, #255	; 0xff
 80030fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003104:	b2da      	uxtb	r2, r3
 8003106:	8979      	ldrh	r1, [r7, #10]
 8003108:	2300      	movs	r3, #0
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 fa31 	bl	8003578 <I2C_TransferConfig>
 8003116:	e00f      	b.n	8003138 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003126:	b2da      	uxtb	r2, r3
 8003128:	8979      	ldrh	r1, [r7, #10]
 800312a:	2300      	movs	r3, #0
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 fa20 	bl	8003578 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d19a      	bne.n	8003078 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f974 	bl	8003434 <I2C_WaitOnSTOPFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e01a      	b.n	800318c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2220      	movs	r2, #32
 800315c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6859      	ldr	r1, [r3, #4]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_I2C_Mem_Read+0x230>)
 800316a:	400b      	ands	r3, r1
 800316c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	e000      	b.n	800318c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800318a:	2302      	movs	r3, #2
  }
}
 800318c:	4618      	mov	r0, r3
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	80002400 	.word	0x80002400
 8003198:	fe00e800 	.word	0xfe00e800

0800319c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	4608      	mov	r0, r1
 80031a6:	4611      	mov	r1, r2
 80031a8:	461a      	mov	r2, r3
 80031aa:	4603      	mov	r3, r0
 80031ac:	817b      	strh	r3, [r7, #10]
 80031ae:	460b      	mov	r3, r1
 80031b0:	813b      	strh	r3, [r7, #8]
 80031b2:	4613      	mov	r3, r2
 80031b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80031b6:	88fb      	ldrh	r3, [r7, #6]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	8979      	ldrh	r1, [r7, #10]
 80031bc:	4b20      	ldr	r3, [pc, #128]	; (8003240 <I2C_RequestMemoryWrite+0xa4>)
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f9d7 	bl	8003578 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ca:	69fa      	ldr	r2, [r7, #28]
 80031cc:	69b9      	ldr	r1, [r7, #24]
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 f8f0 	bl	80033b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e02c      	b.n	8003238 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d105      	bne.n	80031f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031e4:	893b      	ldrh	r3, [r7, #8]
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	629a      	str	r2, [r3, #40]	; 0x28
 80031ee:	e015      	b.n	800321c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031f0:	893b      	ldrh	r3, [r7, #8]
 80031f2:	0a1b      	lsrs	r3, r3, #8
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031fe:	69fa      	ldr	r2, [r7, #28]
 8003200:	69b9      	ldr	r1, [r7, #24]
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f8d6 	bl	80033b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e012      	b.n	8003238 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003212:	893b      	ldrh	r3, [r7, #8]
 8003214:	b2da      	uxtb	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	2200      	movs	r2, #0
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 f884 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	80002000 	.word	0x80002000

08003244 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af02      	add	r7, sp, #8
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	4608      	mov	r0, r1
 800324e:	4611      	mov	r1, r2
 8003250:	461a      	mov	r2, r3
 8003252:	4603      	mov	r3, r0
 8003254:	817b      	strh	r3, [r7, #10]
 8003256:	460b      	mov	r3, r1
 8003258:	813b      	strh	r3, [r7, #8]
 800325a:	4613      	mov	r3, r2
 800325c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800325e:	88fb      	ldrh	r3, [r7, #6]
 8003260:	b2da      	uxtb	r2, r3
 8003262:	8979      	ldrh	r1, [r7, #10]
 8003264:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <I2C_RequestMemoryRead+0xa4>)
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	2300      	movs	r3, #0
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f984 	bl	8003578 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003270:	69fa      	ldr	r2, [r7, #28]
 8003272:	69b9      	ldr	r1, [r7, #24]
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 f89d 	bl	80033b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e02c      	b.n	80032de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d105      	bne.n	8003296 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800328a:	893b      	ldrh	r3, [r7, #8]
 800328c:	b2da      	uxtb	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	629a      	str	r2, [r3, #40]	; 0x28
 8003294:	e015      	b.n	80032c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003296:	893b      	ldrh	r3, [r7, #8]
 8003298:	0a1b      	lsrs	r3, r3, #8
 800329a:	b29b      	uxth	r3, r3
 800329c:	b2da      	uxtb	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032a4:	69fa      	ldr	r2, [r7, #28]
 80032a6:	69b9      	ldr	r1, [r7, #24]
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 f883 	bl	80033b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e012      	b.n	80032de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032b8:	893b      	ldrh	r3, [r7, #8]
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	2200      	movs	r2, #0
 80032ca:	2140      	movs	r1, #64	; 0x40
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 f831 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	80002000 	.word	0x80002000

080032ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d103      	bne.n	800330a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2200      	movs	r2, #0
 8003308:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b01      	cmp	r3, #1
 8003316:	d007      	beq.n	8003328 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	619a      	str	r2, [r3, #24]
  }
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	4613      	mov	r3, r2
 8003342:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003344:	e022      	b.n	800338c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800334c:	d01e      	beq.n	800338c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334e:	f7ff f843 	bl	80023d8 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d302      	bcc.n	8003364 <I2C_WaitOnFlagUntilTimeout+0x30>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d113      	bne.n	800338c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003368:	f043 0220 	orr.w	r2, r3, #32
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e00f      	b.n	80033ac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	4013      	ands	r3, r2
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	429a      	cmp	r2, r3
 800339a:	bf0c      	ite	eq
 800339c:	2301      	moveq	r3, #1
 800339e:	2300      	movne	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d0cd      	beq.n	8003346 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033c0:	e02c      	b.n	800341c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f870 	bl	80034ac <I2C_IsAcknowledgeFailed>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e02a      	b.n	800342c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033dc:	d01e      	beq.n	800341c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033de:	f7fe fffb 	bl	80023d8 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d302      	bcc.n	80033f4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d113      	bne.n	800341c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f8:	f043 0220 	orr.w	r2, r3, #32
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e007      	b.n	800342c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b02      	cmp	r3, #2
 8003428:	d1cb      	bne.n	80033c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003440:	e028      	b.n	8003494 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68b9      	ldr	r1, [r7, #8]
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f830 	bl	80034ac <I2C_IsAcknowledgeFailed>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e026      	b.n	80034a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003456:	f7fe ffbf 	bl	80023d8 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	429a      	cmp	r2, r3
 8003464:	d302      	bcc.n	800346c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d113      	bne.n	8003494 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003470:	f043 0220 	orr.w	r2, r3, #32
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e007      	b.n	80034a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	f003 0320 	and.w	r3, r3, #32
 800349e:	2b20      	cmp	r3, #32
 80034a0:	d1cf      	bne.n	8003442 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	2b10      	cmp	r3, #16
 80034c4:	d151      	bne.n	800356a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034c6:	e022      	b.n	800350e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034ce:	d01e      	beq.n	800350e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d0:	f7fe ff82 	bl	80023d8 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d302      	bcc.n	80034e6 <I2C_IsAcknowledgeFailed+0x3a>
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d113      	bne.n	800350e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	f043 0220 	orr.w	r2, r3, #32
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e02e      	b.n	800356c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b20      	cmp	r3, #32
 800351a:	d1d5      	bne.n	80034c8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2210      	movs	r2, #16
 8003522:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2220      	movs	r2, #32
 800352a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f7ff fedd 	bl	80032ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6859      	ldr	r1, [r3, #4]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	4b0d      	ldr	r3, [pc, #52]	; (8003574 <I2C_IsAcknowledgeFailed+0xc8>)
 800353e:	400b      	ands	r3, r1
 8003540:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	f043 0204 	orr.w	r2, r3, #4
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	fe00e800 	.word	0xfe00e800

08003578 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	607b      	str	r3, [r7, #4]
 8003582:	460b      	mov	r3, r1
 8003584:	817b      	strh	r3, [r7, #10]
 8003586:	4613      	mov	r3, r2
 8003588:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	0d5b      	lsrs	r3, r3, #21
 8003594:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003598:	4b0d      	ldr	r3, [pc, #52]	; (80035d0 <I2C_TransferConfig+0x58>)
 800359a:	430b      	orrs	r3, r1
 800359c:	43db      	mvns	r3, r3
 800359e:	ea02 0103 	and.w	r1, r2, r3
 80035a2:	897b      	ldrh	r3, [r7, #10]
 80035a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035a8:	7a7b      	ldrb	r3, [r7, #9]
 80035aa:	041b      	lsls	r3, r3, #16
 80035ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	431a      	orrs	r2, r3
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	431a      	orrs	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80035c2:	bf00      	nop
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	03ff63ff 	.word	0x03ff63ff

080035d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d138      	bne.n	800365c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d101      	bne.n	80035f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035f4:	2302      	movs	r3, #2
 80035f6:	e032      	b.n	800365e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2224      	movs	r2, #36	; 0x24
 8003604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0201 	bic.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003626:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6819      	ldr	r1, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	e000      	b.n	800365e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800365c:	2302      	movs	r3, #2
  }
}
 800365e:	4618      	mov	r0, r3
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800366c:	b480      	push	{r7}
 800366e:	b089      	sub	sp, #36	; 0x24
 8003670:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	61fb      	str	r3, [r7, #28]
 8003676:	2300      	movs	r3, #0
 8003678:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800367a:	4b3e      	ldr	r3, [pc, #248]	; (8003774 <HAL_RCC_GetSysClockFreq+0x108>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 030c 	and.w	r3, r3, #12
 8003682:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003684:	4b3b      	ldr	r3, [pc, #236]	; (8003774 <HAL_RCC_GetSysClockFreq+0x108>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_RCC_GetSysClockFreq+0x34>
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	2b0c      	cmp	r3, #12
 8003698:	d121      	bne.n	80036de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d11e      	bne.n	80036de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036a0:	4b34      	ldr	r3, [pc, #208]	; (8003774 <HAL_RCC_GetSysClockFreq+0x108>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d107      	bne.n	80036bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036ac:	4b31      	ldr	r3, [pc, #196]	; (8003774 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036b2:	0a1b      	lsrs	r3, r3, #8
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	61fb      	str	r3, [r7, #28]
 80036ba:	e005      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036bc:	4b2d      	ldr	r3, [pc, #180]	; (8003774 <HAL_RCC_GetSysClockFreq+0x108>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036c8:	4a2b      	ldr	r2, [pc, #172]	; (8003778 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10d      	bne.n	80036f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036dc:	e00a      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d102      	bne.n	80036ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036e4:	4b25      	ldr	r3, [pc, #148]	; (800377c <HAL_RCC_GetSysClockFreq+0x110>)
 80036e6:	61bb      	str	r3, [r7, #24]
 80036e8:	e004      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d101      	bne.n	80036f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036f0:	4b23      	ldr	r3, [pc, #140]	; (8003780 <HAL_RCC_GetSysClockFreq+0x114>)
 80036f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	2b0c      	cmp	r3, #12
 80036f8:	d134      	bne.n	8003764 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036fa:	4b1e      	ldr	r3, [pc, #120]	; (8003774 <HAL_RCC_GetSysClockFreq+0x108>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d003      	beq.n	8003712 <HAL_RCC_GetSysClockFreq+0xa6>
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b03      	cmp	r3, #3
 800370e:	d003      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0xac>
 8003710:	e005      	b.n	800371e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003712:	4b1a      	ldr	r3, [pc, #104]	; (800377c <HAL_RCC_GetSysClockFreq+0x110>)
 8003714:	617b      	str	r3, [r7, #20]
      break;
 8003716:	e005      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003718:	4b19      	ldr	r3, [pc, #100]	; (8003780 <HAL_RCC_GetSysClockFreq+0x114>)
 800371a:	617b      	str	r3, [r7, #20]
      break;
 800371c:	e002      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	617b      	str	r3, [r7, #20]
      break;
 8003722:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003724:	4b13      	ldr	r3, [pc, #76]	; (8003774 <HAL_RCC_GetSysClockFreq+0x108>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	091b      	lsrs	r3, r3, #4
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	3301      	adds	r3, #1
 8003730:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <HAL_RCC_GetSysClockFreq+0x108>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	0a1b      	lsrs	r3, r3, #8
 8003738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	fb03 f202 	mul.w	r2, r3, r2
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	fbb2 f3f3 	udiv	r3, r2, r3
 8003748:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800374a:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <HAL_RCC_GetSysClockFreq+0x108>)
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	0e5b      	lsrs	r3, r3, #25
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	3301      	adds	r3, #1
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003762:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003764:	69bb      	ldr	r3, [r7, #24]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3724      	adds	r7, #36	; 0x24
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40021000 	.word	0x40021000
 8003778:	080076b8 	.word	0x080076b8
 800377c:	00f42400 	.word	0x00f42400
 8003780:	007a1200 	.word	0x007a1200

08003784 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003788:	4b03      	ldr	r3, [pc, #12]	; (8003798 <HAL_RCC_GetHCLKFreq+0x14>)
 800378a:	681b      	ldr	r3, [r3, #0]
}
 800378c:	4618      	mov	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	20000004 	.word	0x20000004

0800379c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037a0:	f7ff fff0 	bl	8003784 <HAL_RCC_GetHCLKFreq>
 80037a4:	4602      	mov	r2, r0
 80037a6:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	0a1b      	lsrs	r3, r3, #8
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	4904      	ldr	r1, [pc, #16]	; (80037c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037b2:	5ccb      	ldrb	r3, [r1, r3]
 80037b4:	f003 031f 	and.w	r3, r3, #31
 80037b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037bc:	4618      	mov	r0, r3
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40021000 	.word	0x40021000
 80037c4:	080076b0 	.word	0x080076b0

080037c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037cc:	f7ff ffda 	bl	8003784 <HAL_RCC_GetHCLKFreq>
 80037d0:	4602      	mov	r2, r0
 80037d2:	4b06      	ldr	r3, [pc, #24]	; (80037ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	0adb      	lsrs	r3, r3, #11
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	4904      	ldr	r1, [pc, #16]	; (80037f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037de:	5ccb      	ldrb	r3, [r1, r3]
 80037e0:	f003 031f 	and.w	r3, r3, #31
 80037e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40021000 	.word	0x40021000
 80037f0:	080076b0 	.word	0x080076b0

080037f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e040      	b.n	8003888 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7fd fe32 	bl	8001480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2224      	movs	r2, #36	; 0x24
 8003820:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0201 	bic.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f8c0 	bl	80039b8 <UART_SetConfig>
 8003838:	4603      	mov	r3, r0
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e022      	b.n	8003888 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fc54 	bl	80040f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800385e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800386e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fcdb 	bl	800423c <UART_CheckIdleState>
 8003886:	4603      	mov	r3, r0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b08a      	sub	sp, #40	; 0x28
 8003894:	af02      	add	r7, sp, #8
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	603b      	str	r3, [r7, #0]
 800389c:	4613      	mov	r3, r2
 800389e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	f040 8081 	bne.w	80039ac <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <HAL_UART_Transmit+0x26>
 80038b0:	88fb      	ldrh	r3, [r7, #6]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e079      	b.n	80039ae <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_UART_Transmit+0x38>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e072      	b.n	80039ae <HAL_UART_Transmit+0x11e>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2221      	movs	r2, #33	; 0x21
 80038da:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80038dc:	f7fe fd7c 	bl	80023d8 <HAL_GetTick>
 80038e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	88fa      	ldrh	r2, [r7, #6]
 80038e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	88fa      	ldrh	r2, [r7, #6]
 80038ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fa:	d108      	bne.n	800390e <HAL_UART_Transmit+0x7e>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d104      	bne.n	800390e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003904:	2300      	movs	r3, #0
 8003906:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	61bb      	str	r3, [r7, #24]
 800390c:	e003      	b.n	8003916 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800391e:	e02d      	b.n	800397c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2200      	movs	r2, #0
 8003928:	2180      	movs	r1, #128	; 0x80
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 fccb 	bl	80042c6 <UART_WaitOnFlagUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e039      	b.n	80039ae <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10b      	bne.n	8003958 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	881a      	ldrh	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800394c:	b292      	uxth	r2, r2
 800394e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	3302      	adds	r3, #2
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	e008      	b.n	800396a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	781a      	ldrb	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	b292      	uxth	r2, r2
 8003962:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	3301      	adds	r3, #1
 8003968:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003982:	b29b      	uxth	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1cb      	bne.n	8003920 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2200      	movs	r2, #0
 8003990:	2140      	movs	r1, #64	; 0x40
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 fc97 	bl	80042c6 <UART_WaitOnFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e005      	b.n	80039ae <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2220      	movs	r2, #32
 80039a6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	e000      	b.n	80039ae <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80039ac:	2302      	movs	r3, #2
  }
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3720      	adds	r7, #32
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039bc:	b0a0      	sub	sp, #128	; 0x80
 80039be:	af00      	add	r7, sp, #0
 80039c0:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 80039c6:	2300      	movs	r3, #0
 80039c8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	431a      	orrs	r2, r3
 80039da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	431a      	orrs	r2, r3
 80039e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	67fb      	str	r3, [r7, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	49a4      	ldr	r1, [pc, #656]	; (8003c80 <UART_SetConfig+0x2c8>)
 80039f0:	4019      	ands	r1, r3
 80039f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039f8:	430b      	orrs	r3, r1
 80039fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a08:	68d9      	ldr	r1, [r3, #12]
 8003a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	ea40 0301 	orr.w	r3, r0, r1
 8003a12:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	4b99      	ldr	r3, [pc, #612]	; (8003c84 <UART_SetConfig+0x2cc>)
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d004      	beq.n	8003a2e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a26:	6a1a      	ldr	r2, [r3, #32]
 8003a28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a3e:	430b      	orrs	r3, r1
 8003a40:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4b90      	ldr	r3, [pc, #576]	; (8003c88 <UART_SetConfig+0x2d0>)
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d125      	bne.n	8003a98 <UART_SetConfig+0xe0>
 8003a4c:	4b8f      	ldr	r3, [pc, #572]	; (8003c8c <UART_SetConfig+0x2d4>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d81a      	bhi.n	8003a90 <UART_SetConfig+0xd8>
 8003a5a:	a201      	add	r2, pc, #4	; (adr r2, 8003a60 <UART_SetConfig+0xa8>)
 8003a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a60:	08003a71 	.word	0x08003a71
 8003a64:	08003a81 	.word	0x08003a81
 8003a68:	08003a79 	.word	0x08003a79
 8003a6c:	08003a89 	.word	0x08003a89
 8003a70:	2301      	movs	r3, #1
 8003a72:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003a76:	e116      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003a7e:	e112      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003a80:	2304      	movs	r3, #4
 8003a82:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003a86:	e10e      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003a88:	2308      	movs	r3, #8
 8003a8a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003a8e:	e10a      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003a90:	2310      	movs	r3, #16
 8003a92:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003a96:	e106      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	4b7c      	ldr	r3, [pc, #496]	; (8003c90 <UART_SetConfig+0x2d8>)
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d138      	bne.n	8003b14 <UART_SetConfig+0x15c>
 8003aa2:	4b7a      	ldr	r3, [pc, #488]	; (8003c8c <UART_SetConfig+0x2d4>)
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa8:	f003 030c 	and.w	r3, r3, #12
 8003aac:	2b0c      	cmp	r3, #12
 8003aae:	d82d      	bhi.n	8003b0c <UART_SetConfig+0x154>
 8003ab0:	a201      	add	r2, pc, #4	; (adr r2, 8003ab8 <UART_SetConfig+0x100>)
 8003ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab6:	bf00      	nop
 8003ab8:	08003aed 	.word	0x08003aed
 8003abc:	08003b0d 	.word	0x08003b0d
 8003ac0:	08003b0d 	.word	0x08003b0d
 8003ac4:	08003b0d 	.word	0x08003b0d
 8003ac8:	08003afd 	.word	0x08003afd
 8003acc:	08003b0d 	.word	0x08003b0d
 8003ad0:	08003b0d 	.word	0x08003b0d
 8003ad4:	08003b0d 	.word	0x08003b0d
 8003ad8:	08003af5 	.word	0x08003af5
 8003adc:	08003b0d 	.word	0x08003b0d
 8003ae0:	08003b0d 	.word	0x08003b0d
 8003ae4:	08003b0d 	.word	0x08003b0d
 8003ae8:	08003b05 	.word	0x08003b05
 8003aec:	2300      	movs	r3, #0
 8003aee:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003af2:	e0d8      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003af4:	2302      	movs	r3, #2
 8003af6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003afa:	e0d4      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003afc:	2304      	movs	r3, #4
 8003afe:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003b02:	e0d0      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003b04:	2308      	movs	r3, #8
 8003b06:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003b0a:	e0cc      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003b0c:	2310      	movs	r3, #16
 8003b0e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003b12:	e0c8      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	4b5e      	ldr	r3, [pc, #376]	; (8003c94 <UART_SetConfig+0x2dc>)
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d125      	bne.n	8003b6a <UART_SetConfig+0x1b2>
 8003b1e:	4b5b      	ldr	r3, [pc, #364]	; (8003c8c <UART_SetConfig+0x2d4>)
 8003b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b28:	2b30      	cmp	r3, #48	; 0x30
 8003b2a:	d016      	beq.n	8003b5a <UART_SetConfig+0x1a2>
 8003b2c:	2b30      	cmp	r3, #48	; 0x30
 8003b2e:	d818      	bhi.n	8003b62 <UART_SetConfig+0x1aa>
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d00a      	beq.n	8003b4a <UART_SetConfig+0x192>
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d814      	bhi.n	8003b62 <UART_SetConfig+0x1aa>
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <UART_SetConfig+0x18a>
 8003b3c:	2b10      	cmp	r3, #16
 8003b3e:	d008      	beq.n	8003b52 <UART_SetConfig+0x19a>
 8003b40:	e00f      	b.n	8003b62 <UART_SetConfig+0x1aa>
 8003b42:	2300      	movs	r3, #0
 8003b44:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003b48:	e0ad      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003b50:	e0a9      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003b52:	2304      	movs	r3, #4
 8003b54:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003b58:	e0a5      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003b5a:	2308      	movs	r3, #8
 8003b5c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003b60:	e0a1      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003b62:	2310      	movs	r3, #16
 8003b64:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003b68:	e09d      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	4b4a      	ldr	r3, [pc, #296]	; (8003c98 <UART_SetConfig+0x2e0>)
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d125      	bne.n	8003bc0 <UART_SetConfig+0x208>
 8003b74:	4b45      	ldr	r3, [pc, #276]	; (8003c8c <UART_SetConfig+0x2d4>)
 8003b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b7e:	2bc0      	cmp	r3, #192	; 0xc0
 8003b80:	d016      	beq.n	8003bb0 <UART_SetConfig+0x1f8>
 8003b82:	2bc0      	cmp	r3, #192	; 0xc0
 8003b84:	d818      	bhi.n	8003bb8 <UART_SetConfig+0x200>
 8003b86:	2b80      	cmp	r3, #128	; 0x80
 8003b88:	d00a      	beq.n	8003ba0 <UART_SetConfig+0x1e8>
 8003b8a:	2b80      	cmp	r3, #128	; 0x80
 8003b8c:	d814      	bhi.n	8003bb8 <UART_SetConfig+0x200>
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <UART_SetConfig+0x1e0>
 8003b92:	2b40      	cmp	r3, #64	; 0x40
 8003b94:	d008      	beq.n	8003ba8 <UART_SetConfig+0x1f0>
 8003b96:	e00f      	b.n	8003bb8 <UART_SetConfig+0x200>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003b9e:	e082      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003ba6:	e07e      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003ba8:	2304      	movs	r3, #4
 8003baa:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003bae:	e07a      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003bb0:	2308      	movs	r3, #8
 8003bb2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003bb6:	e076      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003bb8:	2310      	movs	r3, #16
 8003bba:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003bbe:	e072      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	4b35      	ldr	r3, [pc, #212]	; (8003c9c <UART_SetConfig+0x2e4>)
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d12a      	bne.n	8003c20 <UART_SetConfig+0x268>
 8003bca:	4b30      	ldr	r3, [pc, #192]	; (8003c8c <UART_SetConfig+0x2d4>)
 8003bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bd8:	d01a      	beq.n	8003c10 <UART_SetConfig+0x258>
 8003bda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bde:	d81b      	bhi.n	8003c18 <UART_SetConfig+0x260>
 8003be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be4:	d00c      	beq.n	8003c00 <UART_SetConfig+0x248>
 8003be6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bea:	d815      	bhi.n	8003c18 <UART_SetConfig+0x260>
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <UART_SetConfig+0x240>
 8003bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf4:	d008      	beq.n	8003c08 <UART_SetConfig+0x250>
 8003bf6:	e00f      	b.n	8003c18 <UART_SetConfig+0x260>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003bfe:	e052      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003c00:	2302      	movs	r3, #2
 8003c02:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003c06:	e04e      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003c08:	2304      	movs	r3, #4
 8003c0a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003c0e:	e04a      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003c10:	2308      	movs	r3, #8
 8003c12:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003c16:	e046      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003c18:	2310      	movs	r3, #16
 8003c1a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003c1e:	e042      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003c20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	4b17      	ldr	r3, [pc, #92]	; (8003c84 <UART_SetConfig+0x2cc>)
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d13a      	bne.n	8003ca0 <UART_SetConfig+0x2e8>
 8003c2a:	4b18      	ldr	r3, [pc, #96]	; (8003c8c <UART_SetConfig+0x2d4>)
 8003c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c38:	d01a      	beq.n	8003c70 <UART_SetConfig+0x2b8>
 8003c3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c3e:	d81b      	bhi.n	8003c78 <UART_SetConfig+0x2c0>
 8003c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c44:	d00c      	beq.n	8003c60 <UART_SetConfig+0x2a8>
 8003c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c4a:	d815      	bhi.n	8003c78 <UART_SetConfig+0x2c0>
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <UART_SetConfig+0x2a0>
 8003c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c54:	d008      	beq.n	8003c68 <UART_SetConfig+0x2b0>
 8003c56:	e00f      	b.n	8003c78 <UART_SetConfig+0x2c0>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003c5e:	e022      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003c60:	2302      	movs	r3, #2
 8003c62:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003c66:	e01e      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003c68:	2304      	movs	r3, #4
 8003c6a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003c6e:	e01a      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003c70:	2308      	movs	r3, #8
 8003c72:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003c76:	e016      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003c78:	2310      	movs	r3, #16
 8003c7a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003c7e:	e012      	b.n	8003ca6 <UART_SetConfig+0x2ee>
 8003c80:	efff69f3 	.word	0xefff69f3
 8003c84:	40008000 	.word	0x40008000
 8003c88:	40013800 	.word	0x40013800
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40004400 	.word	0x40004400
 8003c94:	40004800 	.word	0x40004800
 8003c98:	40004c00 	.word	0x40004c00
 8003c9c:	40005000 	.word	0x40005000
 8003ca0:	2310      	movs	r3, #16
 8003ca2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4bb6      	ldr	r3, [pc, #728]	; (8003f84 <UART_SetConfig+0x5cc>)
 8003cac:	429a      	cmp	r2, r3
 8003cae:	f040 810c 	bne.w	8003eca <UART_SetConfig+0x512>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cb2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d823      	bhi.n	8003d02 <UART_SetConfig+0x34a>
 8003cba:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <UART_SetConfig+0x308>)
 8003cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc0:	08003ce5 	.word	0x08003ce5
 8003cc4:	08003d03 	.word	0x08003d03
 8003cc8:	08003ced 	.word	0x08003ced
 8003ccc:	08003d03 	.word	0x08003d03
 8003cd0:	08003cf3 	.word	0x08003cf3
 8003cd4:	08003d03 	.word	0x08003d03
 8003cd8:	08003d03 	.word	0x08003d03
 8003cdc:	08003d03 	.word	0x08003d03
 8003ce0:	08003cfb 	.word	0x08003cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003ce4:	f7ff fd5a 	bl	800379c <HAL_RCC_GetPCLK1Freq>
 8003ce8:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8003cea:	e00e      	b.n	8003d0a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003cec:	4ba6      	ldr	r3, [pc, #664]	; (8003f88 <UART_SetConfig+0x5d0>)
 8003cee:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8003cf0:	e00b      	b.n	8003d0a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003cf2:	f7ff fcbb 	bl	800366c <HAL_RCC_GetSysClockFreq>
 8003cf6:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8003cf8:	e007      	b.n	8003d0a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d00:	e003      	b.n	8003d0a <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8003d08:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 81e5 	beq.w	80040dc <UART_SetConfig+0x724>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	441a      	add	r2, r3
 8003d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d305      	bcc.n	8003d2e <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d903      	bls.n	8003d36 <UART_SetConfig+0x37e>
      {
        ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003d34:	e1d2      	b.n	80040dc <UART_SetConfig+0x724>
      }
      else
      {
        switch (clocksource)
 8003d36:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	f200 80b0 	bhi.w	8003ea0 <UART_SetConfig+0x4e8>
 8003d40:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <UART_SetConfig+0x390>)
 8003d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d46:	bf00      	nop
 8003d48:	08003d6d 	.word	0x08003d6d
 8003d4c:	08003ea1 	.word	0x08003ea1
 8003d50:	08003dcd 	.word	0x08003dcd
 8003d54:	08003ea1 	.word	0x08003ea1
 8003d58:	08003e0d 	.word	0x08003e0d
 8003d5c:	08003ea1 	.word	0x08003ea1
 8003d60:	08003ea1 	.word	0x08003ea1
 8003d64:	08003ea1 	.word	0x08003ea1
 8003d68:	08003e69 	.word	0x08003e69
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003d6c:	f7ff fd16 	bl	800379c <HAL_RCC_GetPCLK1Freq>
 8003d70:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d74:	2200      	movs	r2, #0
 8003d76:	4698      	mov	r8, r3
 8003d78:	4691      	mov	r9, r2
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	f04f 0300 	mov.w	r3, #0
 8003d82:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8003d86:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8003d8a:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8003d8e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003d90:	6849      	ldr	r1, [r1, #4]
 8003d92:	0849      	lsrs	r1, r1, #1
 8003d94:	2000      	movs	r0, #0
 8003d96:	6539      	str	r1, [r7, #80]	; 0x50
 8003d98:	6578      	str	r0, [r7, #84]	; 0x54
 8003d9a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003d9e:	4621      	mov	r1, r4
 8003da0:	1851      	adds	r1, r2, r1
 8003da2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003da4:	4629      	mov	r1, r5
 8003da6:	eb43 0101 	adc.w	r1, r3, r1
 8003daa:	64f9      	str	r1, [r7, #76]	; 0x4c
 8003dac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	643b      	str	r3, [r7, #64]	; 0x40
 8003db4:	647a      	str	r2, [r7, #68]	; 0x44
 8003db6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003dba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003dbe:	f7fc ff43 	bl	8000c48 <__aeabi_uldivmod>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8003dca:	e06d      	b.n	8003ea8 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003dcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	085b      	lsrs	r3, r3, #1
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dd6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003dd8:	4b6c      	ldr	r3, [pc, #432]	; (8003f8c <UART_SetConfig+0x5d4>)
 8003dda:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003dde:	4602      	mov	r2, r0
 8003de0:	18d3      	adds	r3, r2, r3
 8003de2:	633b      	str	r3, [r7, #48]	; 0x30
 8003de4:	460b      	mov	r3, r1
 8003de6:	f143 0300 	adc.w	r3, r3, #0
 8003dea:	637b      	str	r3, [r7, #52]	; 0x34
 8003dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003df4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003df6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dfa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003dfe:	f7fc ff23 	bl	8000c48 <__aeabi_uldivmod>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4613      	mov	r3, r2
 8003e08:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8003e0a:	e04d      	b.n	8003ea8 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003e0c:	f7ff fc2e 	bl	800366c <HAL_RCC_GetSysClockFreq>
 8003e10:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e14:	2200      	movs	r2, #0
 8003e16:	461c      	mov	r4, r3
 8003e18:	4615      	mov	r5, r2
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	022b      	lsls	r3, r5, #8
 8003e24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e28:	0222      	lsls	r2, r4, #8
 8003e2a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003e2c:	6849      	ldr	r1, [r1, #4]
 8003e2e:	0849      	lsrs	r1, r1, #1
 8003e30:	2000      	movs	r0, #0
 8003e32:	6239      	str	r1, [r7, #32]
 8003e34:	6278      	str	r0, [r7, #36]	; 0x24
 8003e36:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003e3a:	4621      	mov	r1, r4
 8003e3c:	1851      	adds	r1, r2, r1
 8003e3e:	61b9      	str	r1, [r7, #24]
 8003e40:	4629      	mov	r1, r5
 8003e42:	eb43 0101 	adc.w	r1, r3, r1
 8003e46:	61f9      	str	r1, [r7, #28]
 8003e48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	613b      	str	r3, [r7, #16]
 8003e50:	617a      	str	r2, [r7, #20]
 8003e52:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e56:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003e5a:	f7fc fef5 	bl	8000c48 <__aeabi_uldivmod>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	4613      	mov	r3, r2
 8003e64:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8003e66:	e01f      	b.n	8003ea8 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	085b      	lsrs	r3, r3, #1
 8003e6e:	2200      	movs	r2, #0
 8003e70:	469a      	mov	sl, r3
 8003e72:	4693      	mov	fp, r2
 8003e74:	f51a 0300 	adds.w	r3, sl, #8388608	; 0x800000
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	f14b 0300 	adc.w	r3, fp, #0
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	607a      	str	r2, [r7, #4]
 8003e8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e92:	f7fc fed9 	bl	8000c48 <__aeabi_uldivmod>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8003e9e:	e003      	b.n	8003ea8 <UART_SetConfig+0x4f0>
          default:
            ret = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            break;
 8003ea6:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ea8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eae:	d308      	bcc.n	8003ec2 <UART_SetConfig+0x50a>
 8003eb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eb6:	d204      	bcs.n	8003ec2 <UART_SetConfig+0x50a>
        {
          huart->Instance->BRR = usartdiv;
 8003eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ebe:	60da      	str	r2, [r3, #12]
 8003ec0:	e10c      	b.n	80040dc <UART_SetConfig+0x724>
        }
        else
        {
          ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003ec8:	e108      	b.n	80040dc <UART_SetConfig+0x724>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed2:	f040 808f 	bne.w	8003ff4 <UART_SetConfig+0x63c>
  {
    switch (clocksource)
 8003ed6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d864      	bhi.n	8003fa8 <UART_SetConfig+0x5f0>
 8003ede:	a201      	add	r2, pc, #4	; (adr r2, 8003ee4 <UART_SetConfig+0x52c>)
 8003ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee4:	08003f09 	.word	0x08003f09
 8003ee8:	08003f29 	.word	0x08003f29
 8003eec:	08003f49 	.word	0x08003f49
 8003ef0:	08003fa9 	.word	0x08003fa9
 8003ef4:	08003f65 	.word	0x08003f65
 8003ef8:	08003fa9 	.word	0x08003fa9
 8003efc:	08003fa9 	.word	0x08003fa9
 8003f00:	08003fa9 	.word	0x08003fa9
 8003f04:	08003f91 	.word	0x08003f91
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f08:	f7ff fc48 	bl	800379c <HAL_RCC_GetPCLK1Freq>
 8003f0c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f10:	005a      	lsls	r2, r3, #1
 8003f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	085b      	lsrs	r3, r3, #1
 8003f18:	441a      	add	r2, r3
 8003f1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f26:	e043      	b.n	8003fb0 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f28:	f7ff fc4e 	bl	80037c8 <HAL_RCC_GetPCLK2Freq>
 8003f2c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f30:	005a      	lsls	r2, r3, #1
 8003f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	085b      	lsrs	r3, r3, #1
 8003f38:	441a      	add	r2, r3
 8003f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f46:	e033      	b.n	8003fb0 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	085b      	lsrs	r3, r3, #1
 8003f4e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003f52:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003f56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f58:	6852      	ldr	r2, [r2, #4]
 8003f5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f62:	e025      	b.n	8003fb0 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f64:	f7ff fb82 	bl	800366c <HAL_RCC_GetSysClockFreq>
 8003f68:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f6c:	005a      	lsls	r2, r3, #1
 8003f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	085b      	lsrs	r3, r3, #1
 8003f74:	441a      	add	r2, r3
 8003f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f82:	e015      	b.n	8003fb0 <UART_SetConfig+0x5f8>
 8003f84:	40008000 	.word	0x40008000
 8003f88:	00f42400 	.word	0x00f42400
 8003f8c:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003f90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	085b      	lsrs	r3, r3, #1
 8003f96:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003f9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8003fa6:	e003      	b.n	8003fb0 <UART_SetConfig+0x5f8>
      default:
        ret = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8003fae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fb2:	2b0f      	cmp	r3, #15
 8003fb4:	d91a      	bls.n	8003fec <UART_SetConfig+0x634>
 8003fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fbc:	d216      	bcs.n	8003fec <UART_SetConfig+0x634>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	f023 030f 	bic.w	r3, r3, #15
 8003fc6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fcc:	085b      	lsrs	r3, r3, #1
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      huart->Instance->BRR = brrtemp;
 8003fe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003fe8:	60da      	str	r2, [r3, #12]
 8003fea:	e077      	b.n	80040dc <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003ff2:	e073      	b.n	80040dc <UART_SetConfig+0x724>
    }
  }
  else
  {
    switch (clocksource)
 8003ff4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d85c      	bhi.n	80040b6 <UART_SetConfig+0x6fe>
 8003ffc:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <UART_SetConfig+0x64c>)
 8003ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004002:	bf00      	nop
 8004004:	08004029 	.word	0x08004029
 8004008:	08004047 	.word	0x08004047
 800400c:	08004065 	.word	0x08004065
 8004010:	080040b7 	.word	0x080040b7
 8004014:	08004081 	.word	0x08004081
 8004018:	080040b7 	.word	0x080040b7
 800401c:	080040b7 	.word	0x080040b7
 8004020:	080040b7 	.word	0x080040b7
 8004024:	0800409f 	.word	0x0800409f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004028:	f7ff fbb8 	bl	800379c <HAL_RCC_GetPCLK1Freq>
 800402c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800402e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	085a      	lsrs	r2, r3, #1
 8004034:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004036:	441a      	add	r2, r3
 8004038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004040:	b29b      	uxth	r3, r3
 8004042:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004044:	e03b      	b.n	80040be <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004046:	f7ff fbbf 	bl	80037c8 <HAL_RCC_GetPCLK2Freq>
 800404a:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800404c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	085a      	lsrs	r2, r3, #1
 8004052:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004054:	441a      	add	r2, r3
 8004056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	fbb2 f3f3 	udiv	r3, r2, r3
 800405e:	b29b      	uxth	r3, r3
 8004060:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8004062:	e02c      	b.n	80040be <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	085b      	lsrs	r3, r3, #1
 800406a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800406e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004072:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004074:	6852      	ldr	r2, [r2, #4]
 8004076:	fbb3 f3f2 	udiv	r3, r3, r2
 800407a:	b29b      	uxth	r3, r3
 800407c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800407e:	e01e      	b.n	80040be <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004080:	f7ff faf4 	bl	800366c <HAL_RCC_GetSysClockFreq>
 8004084:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	085a      	lsrs	r2, r3, #1
 800408c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800408e:	441a      	add	r2, r3
 8004090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	fbb2 f3f3 	udiv	r3, r2, r3
 8004098:	b29b      	uxth	r3, r3
 800409a:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800409c:	e00f      	b.n	80040be <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800409e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	085b      	lsrs	r3, r3, #1
 80040a4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80040a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80040b4:	e003      	b.n	80040be <UART_SetConfig+0x706>
      default:
        ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 80040bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040c0:	2b0f      	cmp	r3, #15
 80040c2:	d908      	bls.n	80040d6 <UART_SetConfig+0x71e>
 80040c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ca:	d204      	bcs.n	80040d6 <UART_SetConfig+0x71e>
    {
      huart->Instance->BRR = usartdiv;
 80040cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80040d2:	60da      	str	r2, [r3, #12]
 80040d4:	e002      	b.n	80040dc <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040de:	2200      	movs	r2, #0
 80040e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80040e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040e4:	2200      	movs	r2, #0
 80040e6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80040e8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3780      	adds	r7, #128	; 0x80
 80040f0:	46bd      	mov	sp, r7
 80040f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040f6:	bf00      	nop

080040f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d01a      	beq.n	800420e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041f6:	d10a      	bne.n	800420e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	605a      	str	r2, [r3, #4]
  }
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af02      	add	r7, sp, #8
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800424a:	f7fe f8c5 	bl	80023d8 <HAL_GetTick>
 800424e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b08      	cmp	r3, #8
 800425c:	d10e      	bne.n	800427c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800425e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f82a 	bl	80042c6 <UART_WaitOnFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e020      	b.n	80042be <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b04      	cmp	r3, #4
 8004288:	d10e      	bne.n	80042a8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800428a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f814 	bl	80042c6 <UART_WaitOnFlagUntilTimeout>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e00a      	b.n	80042be <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2220      	movs	r2, #32
 80042b2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b084      	sub	sp, #16
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	603b      	str	r3, [r7, #0]
 80042d2:	4613      	mov	r3, r2
 80042d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d6:	e05d      	b.n	8004394 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042de:	d059      	beq.n	8004394 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e0:	f7fe f87a 	bl	80023d8 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d302      	bcc.n	80042f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d11b      	bne.n	800432e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004304:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0201 	bic.w	r2, r2, #1
 8004314:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2220      	movs	r2, #32
 800431a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e042      	b.n	80043b4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d02b      	beq.n	8004394 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800434a:	d123      	bne.n	8004394 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004354:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004364:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0201 	bic.w	r2, r2, #1
 8004374:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2220      	movs	r2, #32
 800437a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e00f      	b.n	80043b4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	69da      	ldr	r2, [r3, #28]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	4013      	ands	r3, r2
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	bf0c      	ite	eq
 80043a4:	2301      	moveq	r3, #1
 80043a6:	2300      	movne	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	461a      	mov	r2, r3
 80043ac:	79fb      	ldrb	r3, [r7, #7]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d092      	beq.n	80042d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <findslot>:
 80043bc:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <findslot+0x2c>)
 80043be:	b510      	push	{r4, lr}
 80043c0:	4604      	mov	r4, r0
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	b118      	cbz	r0, 80043ce <findslot+0x12>
 80043c6:	6a03      	ldr	r3, [r0, #32]
 80043c8:	b90b      	cbnz	r3, 80043ce <findslot+0x12>
 80043ca:	f000 ff7b 	bl	80052c4 <__sinit>
 80043ce:	2c13      	cmp	r4, #19
 80043d0:	d807      	bhi.n	80043e2 <findslot+0x26>
 80043d2:	4806      	ldr	r0, [pc, #24]	; (80043ec <findslot+0x30>)
 80043d4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80043d8:	3201      	adds	r2, #1
 80043da:	d002      	beq.n	80043e2 <findslot+0x26>
 80043dc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80043e0:	bd10      	pop	{r4, pc}
 80043e2:	2000      	movs	r0, #0
 80043e4:	e7fc      	b.n	80043e0 <findslot+0x24>
 80043e6:	bf00      	nop
 80043e8:	200000f8 	.word	0x200000f8
 80043ec:	20000384 	.word	0x20000384

080043f0 <error>:
 80043f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f2:	4604      	mov	r4, r0
 80043f4:	f001 f8e6 	bl	80055c4 <__errno>
 80043f8:	2613      	movs	r6, #19
 80043fa:	4605      	mov	r5, r0
 80043fc:	2700      	movs	r7, #0
 80043fe:	4630      	mov	r0, r6
 8004400:	4639      	mov	r1, r7
 8004402:	beab      	bkpt	0x00ab
 8004404:	4606      	mov	r6, r0
 8004406:	602e      	str	r6, [r5, #0]
 8004408:	4620      	mov	r0, r4
 800440a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800440c <checkerror>:
 800440c:	1c43      	adds	r3, r0, #1
 800440e:	d101      	bne.n	8004414 <checkerror+0x8>
 8004410:	f7ff bfee 	b.w	80043f0 <error>
 8004414:	4770      	bx	lr

08004416 <_swiread>:
 8004416:	b530      	push	{r4, r5, lr}
 8004418:	b085      	sub	sp, #20
 800441a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800441e:	9203      	str	r2, [sp, #12]
 8004420:	2406      	movs	r4, #6
 8004422:	ad01      	add	r5, sp, #4
 8004424:	4620      	mov	r0, r4
 8004426:	4629      	mov	r1, r5
 8004428:	beab      	bkpt	0x00ab
 800442a:	4604      	mov	r4, r0
 800442c:	4620      	mov	r0, r4
 800442e:	f7ff ffed 	bl	800440c <checkerror>
 8004432:	b005      	add	sp, #20
 8004434:	bd30      	pop	{r4, r5, pc}

08004436 <_read>:
 8004436:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004438:	4615      	mov	r5, r2
 800443a:	9101      	str	r1, [sp, #4]
 800443c:	f7ff ffbe 	bl	80043bc <findslot>
 8004440:	9901      	ldr	r1, [sp, #4]
 8004442:	4604      	mov	r4, r0
 8004444:	b938      	cbnz	r0, 8004456 <_read+0x20>
 8004446:	f001 f8bd 	bl	80055c4 <__errno>
 800444a:	2309      	movs	r3, #9
 800444c:	6003      	str	r3, [r0, #0]
 800444e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004452:	b003      	add	sp, #12
 8004454:	bd30      	pop	{r4, r5, pc}
 8004456:	6800      	ldr	r0, [r0, #0]
 8004458:	462a      	mov	r2, r5
 800445a:	f7ff ffdc 	bl	8004416 <_swiread>
 800445e:	1c43      	adds	r3, r0, #1
 8004460:	d0f7      	beq.n	8004452 <_read+0x1c>
 8004462:	6863      	ldr	r3, [r4, #4]
 8004464:	1a2a      	subs	r2, r5, r0
 8004466:	4413      	add	r3, r2
 8004468:	6063      	str	r3, [r4, #4]
 800446a:	4610      	mov	r0, r2
 800446c:	e7f1      	b.n	8004452 <_read+0x1c>

0800446e <_swilseek>:
 800446e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004470:	460c      	mov	r4, r1
 8004472:	4616      	mov	r6, r2
 8004474:	f7ff ffa2 	bl	80043bc <findslot>
 8004478:	4605      	mov	r5, r0
 800447a:	b940      	cbnz	r0, 800448e <_swilseek+0x20>
 800447c:	f001 f8a2 	bl	80055c4 <__errno>
 8004480:	2309      	movs	r3, #9
 8004482:	6003      	str	r3, [r0, #0]
 8004484:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004488:	4620      	mov	r0, r4
 800448a:	b003      	add	sp, #12
 800448c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800448e:	2e02      	cmp	r6, #2
 8004490:	d903      	bls.n	800449a <_swilseek+0x2c>
 8004492:	f001 f897 	bl	80055c4 <__errno>
 8004496:	2316      	movs	r3, #22
 8004498:	e7f3      	b.n	8004482 <_swilseek+0x14>
 800449a:	2e01      	cmp	r6, #1
 800449c:	d112      	bne.n	80044c4 <_swilseek+0x56>
 800449e:	6843      	ldr	r3, [r0, #4]
 80044a0:	18e4      	adds	r4, r4, r3
 80044a2:	d4f6      	bmi.n	8004492 <_swilseek+0x24>
 80044a4:	682b      	ldr	r3, [r5, #0]
 80044a6:	260a      	movs	r6, #10
 80044a8:	e9cd 3400 	strd	r3, r4, [sp]
 80044ac:	466f      	mov	r7, sp
 80044ae:	4630      	mov	r0, r6
 80044b0:	4639      	mov	r1, r7
 80044b2:	beab      	bkpt	0x00ab
 80044b4:	4606      	mov	r6, r0
 80044b6:	4630      	mov	r0, r6
 80044b8:	f7ff ffa8 	bl	800440c <checkerror>
 80044bc:	2800      	cmp	r0, #0
 80044be:	dbe1      	blt.n	8004484 <_swilseek+0x16>
 80044c0:	606c      	str	r4, [r5, #4]
 80044c2:	e7e1      	b.n	8004488 <_swilseek+0x1a>
 80044c4:	2e02      	cmp	r6, #2
 80044c6:	6803      	ldr	r3, [r0, #0]
 80044c8:	d1ec      	bne.n	80044a4 <_swilseek+0x36>
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	260c      	movs	r6, #12
 80044ce:	466f      	mov	r7, sp
 80044d0:	4630      	mov	r0, r6
 80044d2:	4639      	mov	r1, r7
 80044d4:	beab      	bkpt	0x00ab
 80044d6:	4606      	mov	r6, r0
 80044d8:	4630      	mov	r0, r6
 80044da:	f7ff ff97 	bl	800440c <checkerror>
 80044de:	1c43      	adds	r3, r0, #1
 80044e0:	d0d0      	beq.n	8004484 <_swilseek+0x16>
 80044e2:	4404      	add	r4, r0
 80044e4:	e7de      	b.n	80044a4 <_swilseek+0x36>

080044e6 <_lseek>:
 80044e6:	f7ff bfc2 	b.w	800446e <_swilseek>

080044ea <_swiwrite>:
 80044ea:	b530      	push	{r4, r5, lr}
 80044ec:	b085      	sub	sp, #20
 80044ee:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80044f2:	9203      	str	r2, [sp, #12]
 80044f4:	2405      	movs	r4, #5
 80044f6:	ad01      	add	r5, sp, #4
 80044f8:	4620      	mov	r0, r4
 80044fa:	4629      	mov	r1, r5
 80044fc:	beab      	bkpt	0x00ab
 80044fe:	4604      	mov	r4, r0
 8004500:	4620      	mov	r0, r4
 8004502:	f7ff ff83 	bl	800440c <checkerror>
 8004506:	b005      	add	sp, #20
 8004508:	bd30      	pop	{r4, r5, pc}

0800450a <_write>:
 800450a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800450c:	4615      	mov	r5, r2
 800450e:	9101      	str	r1, [sp, #4]
 8004510:	f7ff ff54 	bl	80043bc <findslot>
 8004514:	9901      	ldr	r1, [sp, #4]
 8004516:	4604      	mov	r4, r0
 8004518:	b930      	cbnz	r0, 8004528 <_write+0x1e>
 800451a:	f001 f853 	bl	80055c4 <__errno>
 800451e:	2309      	movs	r3, #9
 8004520:	6003      	str	r3, [r0, #0]
 8004522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004526:	e012      	b.n	800454e <_write+0x44>
 8004528:	6800      	ldr	r0, [r0, #0]
 800452a:	462a      	mov	r2, r5
 800452c:	f7ff ffdd 	bl	80044ea <_swiwrite>
 8004530:	2800      	cmp	r0, #0
 8004532:	dbf6      	blt.n	8004522 <_write+0x18>
 8004534:	6862      	ldr	r2, [r4, #4]
 8004536:	1a2b      	subs	r3, r5, r0
 8004538:	441a      	add	r2, r3
 800453a:	42a8      	cmp	r0, r5
 800453c:	6062      	str	r2, [r4, #4]
 800453e:	d105      	bne.n	800454c <_write+0x42>
 8004540:	2000      	movs	r0, #0
 8004542:	b003      	add	sp, #12
 8004544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004548:	f7ff bf52 	b.w	80043f0 <error>
 800454c:	4618      	mov	r0, r3
 800454e:	b003      	add	sp, #12
 8004550:	bd30      	pop	{r4, r5, pc}

08004552 <_swiclose>:
 8004552:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004554:	2402      	movs	r4, #2
 8004556:	9001      	str	r0, [sp, #4]
 8004558:	ad01      	add	r5, sp, #4
 800455a:	4620      	mov	r0, r4
 800455c:	4629      	mov	r1, r5
 800455e:	beab      	bkpt	0x00ab
 8004560:	4604      	mov	r4, r0
 8004562:	4620      	mov	r0, r4
 8004564:	f7ff ff52 	bl	800440c <checkerror>
 8004568:	b003      	add	sp, #12
 800456a:	bd30      	pop	{r4, r5, pc}

0800456c <_close>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4605      	mov	r5, r0
 8004570:	f7ff ff24 	bl	80043bc <findslot>
 8004574:	4604      	mov	r4, r0
 8004576:	b930      	cbnz	r0, 8004586 <_close+0x1a>
 8004578:	f001 f824 	bl	80055c4 <__errno>
 800457c:	2309      	movs	r3, #9
 800457e:	6003      	str	r3, [r0, #0]
 8004580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004584:	bd38      	pop	{r3, r4, r5, pc}
 8004586:	3d01      	subs	r5, #1
 8004588:	2d01      	cmp	r5, #1
 800458a:	d809      	bhi.n	80045a0 <_close+0x34>
 800458c:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <_close+0x48>)
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	429a      	cmp	r2, r3
 8004594:	d104      	bne.n	80045a0 <_close+0x34>
 8004596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800459a:	6003      	str	r3, [r0, #0]
 800459c:	2000      	movs	r0, #0
 800459e:	e7f1      	b.n	8004584 <_close+0x18>
 80045a0:	6820      	ldr	r0, [r4, #0]
 80045a2:	f7ff ffd6 	bl	8004552 <_swiclose>
 80045a6:	2800      	cmp	r0, #0
 80045a8:	d1ec      	bne.n	8004584 <_close+0x18>
 80045aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045ae:	6023      	str	r3, [r4, #0]
 80045b0:	e7e8      	b.n	8004584 <_close+0x18>
 80045b2:	bf00      	nop
 80045b4:	20000384 	.word	0x20000384

080045b8 <_getpid>:
 80045b8:	2001      	movs	r0, #1
 80045ba:	4770      	bx	lr

080045bc <_swistat>:
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	460c      	mov	r4, r1
 80045c0:	f7ff fefc 	bl	80043bc <findslot>
 80045c4:	4605      	mov	r5, r0
 80045c6:	b930      	cbnz	r0, 80045d6 <_swistat+0x1a>
 80045c8:	f000 fffc 	bl	80055c4 <__errno>
 80045cc:	2309      	movs	r3, #9
 80045ce:	6003      	str	r3, [r0, #0]
 80045d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045d4:	bd70      	pop	{r4, r5, r6, pc}
 80045d6:	6863      	ldr	r3, [r4, #4]
 80045d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80045dc:	6063      	str	r3, [r4, #4]
 80045de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045e2:	64a3      	str	r3, [r4, #72]	; 0x48
 80045e4:	260c      	movs	r6, #12
 80045e6:	4630      	mov	r0, r6
 80045e8:	4629      	mov	r1, r5
 80045ea:	beab      	bkpt	0x00ab
 80045ec:	4605      	mov	r5, r0
 80045ee:	4628      	mov	r0, r5
 80045f0:	f7ff ff0c 	bl	800440c <checkerror>
 80045f4:	1c43      	adds	r3, r0, #1
 80045f6:	bf1c      	itt	ne
 80045f8:	6120      	strne	r0, [r4, #16]
 80045fa:	2000      	movne	r0, #0
 80045fc:	e7ea      	b.n	80045d4 <_swistat+0x18>

080045fe <_fstat>:
 80045fe:	460b      	mov	r3, r1
 8004600:	b510      	push	{r4, lr}
 8004602:	2100      	movs	r1, #0
 8004604:	4604      	mov	r4, r0
 8004606:	2258      	movs	r2, #88	; 0x58
 8004608:	4618      	mov	r0, r3
 800460a:	f000 ff89 	bl	8005520 <memset>
 800460e:	4601      	mov	r1, r0
 8004610:	4620      	mov	r0, r4
 8004612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004616:	f7ff bfd1 	b.w	80045bc <_swistat>

0800461a <_stat>:
 800461a:	b538      	push	{r3, r4, r5, lr}
 800461c:	460d      	mov	r5, r1
 800461e:	4604      	mov	r4, r0
 8004620:	2258      	movs	r2, #88	; 0x58
 8004622:	2100      	movs	r1, #0
 8004624:	4628      	mov	r0, r5
 8004626:	f000 ff7b 	bl	8005520 <memset>
 800462a:	4620      	mov	r0, r4
 800462c:	2100      	movs	r1, #0
 800462e:	f000 f811 	bl	8004654 <_swiopen>
 8004632:	1c43      	adds	r3, r0, #1
 8004634:	4604      	mov	r4, r0
 8004636:	d00b      	beq.n	8004650 <_stat+0x36>
 8004638:	686b      	ldr	r3, [r5, #4]
 800463a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800463e:	606b      	str	r3, [r5, #4]
 8004640:	4629      	mov	r1, r5
 8004642:	f7ff ffbb 	bl	80045bc <_swistat>
 8004646:	4605      	mov	r5, r0
 8004648:	4620      	mov	r0, r4
 800464a:	f7ff ff8f 	bl	800456c <_close>
 800464e:	462c      	mov	r4, r5
 8004650:	4620      	mov	r0, r4
 8004652:	bd38      	pop	{r3, r4, r5, pc}

08004654 <_swiopen>:
 8004654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004658:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004704 <_swiopen+0xb0>
 800465c:	b097      	sub	sp, #92	; 0x5c
 800465e:	4607      	mov	r7, r0
 8004660:	460e      	mov	r6, r1
 8004662:	2500      	movs	r5, #0
 8004664:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8004668:	1c61      	adds	r1, r4, #1
 800466a:	d037      	beq.n	80046dc <_swiopen+0x88>
 800466c:	3501      	adds	r5, #1
 800466e:	2d14      	cmp	r5, #20
 8004670:	d1f8      	bne.n	8004664 <_swiopen+0x10>
 8004672:	f000 ffa7 	bl	80055c4 <__errno>
 8004676:	2318      	movs	r3, #24
 8004678:	6003      	str	r3, [r0, #0]
 800467a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800467e:	e03d      	b.n	80046fc <_swiopen+0xa8>
 8004680:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8004684:	f240 6301 	movw	r3, #1537	; 0x601
 8004688:	07b2      	lsls	r2, r6, #30
 800468a:	bf48      	it	mi
 800468c:	f044 0402 	orrmi.w	r4, r4, #2
 8004690:	421e      	tst	r6, r3
 8004692:	bf18      	it	ne
 8004694:	f044 0404 	orrne.w	r4, r4, #4
 8004698:	0733      	lsls	r3, r6, #28
 800469a:	bf48      	it	mi
 800469c:	f024 0404 	bicmi.w	r4, r4, #4
 80046a0:	4638      	mov	r0, r7
 80046a2:	bf48      	it	mi
 80046a4:	f044 0408 	orrmi.w	r4, r4, #8
 80046a8:	9700      	str	r7, [sp, #0]
 80046aa:	f7fb fde1 	bl	8000270 <strlen>
 80046ae:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80046b2:	2401      	movs	r4, #1
 80046b4:	4620      	mov	r0, r4
 80046b6:	4649      	mov	r1, r9
 80046b8:	beab      	bkpt	0x00ab
 80046ba:	4604      	mov	r4, r0
 80046bc:	2c00      	cmp	r4, #0
 80046be:	db08      	blt.n	80046d2 <_swiopen+0x7e>
 80046c0:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 80046c4:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 80046c8:	2300      	movs	r3, #0
 80046ca:	f8c8 3004 	str.w	r3, [r8, #4]
 80046ce:	462c      	mov	r4, r5
 80046d0:	e014      	b.n	80046fc <_swiopen+0xa8>
 80046d2:	4620      	mov	r0, r4
 80046d4:	f7ff fe8c 	bl	80043f0 <error>
 80046d8:	4604      	mov	r4, r0
 80046da:	e00f      	b.n	80046fc <_swiopen+0xa8>
 80046dc:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 80046e0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80046e4:	46e9      	mov	r9, sp
 80046e6:	d1cb      	bne.n	8004680 <_swiopen+0x2c>
 80046e8:	4649      	mov	r1, r9
 80046ea:	4638      	mov	r0, r7
 80046ec:	f7ff ff95 	bl	800461a <_stat>
 80046f0:	3001      	adds	r0, #1
 80046f2:	d0c5      	beq.n	8004680 <_swiopen+0x2c>
 80046f4:	f000 ff66 	bl	80055c4 <__errno>
 80046f8:	2311      	movs	r3, #17
 80046fa:	6003      	str	r3, [r0, #0]
 80046fc:	4620      	mov	r0, r4
 80046fe:	b017      	add	sp, #92	; 0x5c
 8004700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004704:	20000384 	.word	0x20000384

08004708 <_get_semihosting_exts>:
 8004708:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800470c:	4606      	mov	r6, r0
 800470e:	460f      	mov	r7, r1
 8004710:	482a      	ldr	r0, [pc, #168]	; (80047bc <_get_semihosting_exts+0xb4>)
 8004712:	2100      	movs	r1, #0
 8004714:	4615      	mov	r5, r2
 8004716:	f7ff ff9d 	bl	8004654 <_swiopen>
 800471a:	462a      	mov	r2, r5
 800471c:	4604      	mov	r4, r0
 800471e:	2100      	movs	r1, #0
 8004720:	4630      	mov	r0, r6
 8004722:	f000 fefd 	bl	8005520 <memset>
 8004726:	1c63      	adds	r3, r4, #1
 8004728:	d016      	beq.n	8004758 <_get_semihosting_exts+0x50>
 800472a:	4620      	mov	r0, r4
 800472c:	f7ff fe46 	bl	80043bc <findslot>
 8004730:	f04f 080c 	mov.w	r8, #12
 8004734:	4681      	mov	r9, r0
 8004736:	4640      	mov	r0, r8
 8004738:	4649      	mov	r1, r9
 800473a:	beab      	bkpt	0x00ab
 800473c:	4680      	mov	r8, r0
 800473e:	4640      	mov	r0, r8
 8004740:	f7ff fe64 	bl	800440c <checkerror>
 8004744:	2803      	cmp	r0, #3
 8004746:	dd02      	ble.n	800474e <_get_semihosting_exts+0x46>
 8004748:	1ec3      	subs	r3, r0, #3
 800474a:	42ab      	cmp	r3, r5
 800474c:	dc08      	bgt.n	8004760 <_get_semihosting_exts+0x58>
 800474e:	4620      	mov	r0, r4
 8004750:	f7ff ff0c 	bl	800456c <_close>
 8004754:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004758:	4620      	mov	r0, r4
 800475a:	b003      	add	sp, #12
 800475c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004760:	2204      	movs	r2, #4
 8004762:	eb0d 0102 	add.w	r1, sp, r2
 8004766:	4620      	mov	r0, r4
 8004768:	f7ff fe65 	bl	8004436 <_read>
 800476c:	2803      	cmp	r0, #3
 800476e:	ddee      	ble.n	800474e <_get_semihosting_exts+0x46>
 8004770:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004774:	2b53      	cmp	r3, #83	; 0x53
 8004776:	d1ea      	bne.n	800474e <_get_semihosting_exts+0x46>
 8004778:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800477c:	2b48      	cmp	r3, #72	; 0x48
 800477e:	d1e6      	bne.n	800474e <_get_semihosting_exts+0x46>
 8004780:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004784:	2b46      	cmp	r3, #70	; 0x46
 8004786:	d1e2      	bne.n	800474e <_get_semihosting_exts+0x46>
 8004788:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800478c:	2b42      	cmp	r3, #66	; 0x42
 800478e:	d1de      	bne.n	800474e <_get_semihosting_exts+0x46>
 8004790:	2201      	movs	r2, #1
 8004792:	4639      	mov	r1, r7
 8004794:	4620      	mov	r0, r4
 8004796:	f7ff fe6a 	bl	800446e <_swilseek>
 800479a:	2800      	cmp	r0, #0
 800479c:	dbd7      	blt.n	800474e <_get_semihosting_exts+0x46>
 800479e:	462a      	mov	r2, r5
 80047a0:	4631      	mov	r1, r6
 80047a2:	4620      	mov	r0, r4
 80047a4:	f7ff fe47 	bl	8004436 <_read>
 80047a8:	4605      	mov	r5, r0
 80047aa:	4620      	mov	r0, r4
 80047ac:	f7ff fede 	bl	800456c <_close>
 80047b0:	4628      	mov	r0, r5
 80047b2:	f7ff fe2b 	bl	800440c <checkerror>
 80047b6:	4604      	mov	r4, r0
 80047b8:	e7ce      	b.n	8004758 <_get_semihosting_exts+0x50>
 80047ba:	bf00      	nop
 80047bc:	080076e8 	.word	0x080076e8

080047c0 <initialise_semihosting_exts>:
 80047c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047c2:	4d0a      	ldr	r5, [pc, #40]	; (80047ec <initialise_semihosting_exts+0x2c>)
 80047c4:	4c0a      	ldr	r4, [pc, #40]	; (80047f0 <initialise_semihosting_exts+0x30>)
 80047c6:	2100      	movs	r1, #0
 80047c8:	2201      	movs	r2, #1
 80047ca:	a801      	add	r0, sp, #4
 80047cc:	6029      	str	r1, [r5, #0]
 80047ce:	6022      	str	r2, [r4, #0]
 80047d0:	f7ff ff9a 	bl	8004708 <_get_semihosting_exts>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	dd07      	ble.n	80047e8 <initialise_semihosting_exts+0x28>
 80047d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80047dc:	f003 0201 	and.w	r2, r3, #1
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	602a      	str	r2, [r5, #0]
 80047e6:	6023      	str	r3, [r4, #0]
 80047e8:	b003      	add	sp, #12
 80047ea:	bd30      	pop	{r4, r5, pc}
 80047ec:	20000098 	.word	0x20000098
 80047f0:	2000009c 	.word	0x2000009c

080047f4 <_has_ext_stdout_stderr>:
 80047f4:	b510      	push	{r4, lr}
 80047f6:	4c04      	ldr	r4, [pc, #16]	; (8004808 <_has_ext_stdout_stderr+0x14>)
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	da01      	bge.n	8004802 <_has_ext_stdout_stderr+0xe>
 80047fe:	f7ff ffdf 	bl	80047c0 <initialise_semihosting_exts>
 8004802:	6820      	ldr	r0, [r4, #0]
 8004804:	bd10      	pop	{r4, pc}
 8004806:	bf00      	nop
 8004808:	2000009c 	.word	0x2000009c

0800480c <initialise_monitor_handles>:
 800480c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004810:	b085      	sub	sp, #20
 8004812:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80048c4 <initialise_monitor_handles+0xb8>
 8004816:	f8cd 9004 	str.w	r9, [sp, #4]
 800481a:	2303      	movs	r3, #3
 800481c:	2400      	movs	r4, #0
 800481e:	9303      	str	r3, [sp, #12]
 8004820:	af01      	add	r7, sp, #4
 8004822:	9402      	str	r4, [sp, #8]
 8004824:	2501      	movs	r5, #1
 8004826:	4628      	mov	r0, r5
 8004828:	4639      	mov	r1, r7
 800482a:	beab      	bkpt	0x00ab
 800482c:	4605      	mov	r5, r0
 800482e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80048c8 <initialise_monitor_handles+0xbc>
 8004832:	4623      	mov	r3, r4
 8004834:	4c20      	ldr	r4, [pc, #128]	; (80048b8 <initialise_monitor_handles+0xac>)
 8004836:	f8c8 5000 	str.w	r5, [r8]
 800483a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800483e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8004842:	3301      	adds	r3, #1
 8004844:	2b14      	cmp	r3, #20
 8004846:	d1fa      	bne.n	800483e <initialise_monitor_handles+0x32>
 8004848:	f7ff ffd4 	bl	80047f4 <_has_ext_stdout_stderr>
 800484c:	4d1b      	ldr	r5, [pc, #108]	; (80048bc <initialise_monitor_handles+0xb0>)
 800484e:	b1d0      	cbz	r0, 8004886 <initialise_monitor_handles+0x7a>
 8004850:	f04f 0a03 	mov.w	sl, #3
 8004854:	2304      	movs	r3, #4
 8004856:	f8cd 9004 	str.w	r9, [sp, #4]
 800485a:	2601      	movs	r6, #1
 800485c:	f8cd a00c 	str.w	sl, [sp, #12]
 8004860:	9302      	str	r3, [sp, #8]
 8004862:	4630      	mov	r0, r6
 8004864:	4639      	mov	r1, r7
 8004866:	beab      	bkpt	0x00ab
 8004868:	4683      	mov	fp, r0
 800486a:	4b15      	ldr	r3, [pc, #84]	; (80048c0 <initialise_monitor_handles+0xb4>)
 800486c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004870:	f8c3 b000 	str.w	fp, [r3]
 8004874:	2308      	movs	r3, #8
 8004876:	f8cd a00c 	str.w	sl, [sp, #12]
 800487a:	9302      	str	r3, [sp, #8]
 800487c:	4630      	mov	r0, r6
 800487e:	4639      	mov	r1, r7
 8004880:	beab      	bkpt	0x00ab
 8004882:	4606      	mov	r6, r0
 8004884:	602e      	str	r6, [r5, #0]
 8004886:	682b      	ldr	r3, [r5, #0]
 8004888:	3301      	adds	r3, #1
 800488a:	bf02      	ittt	eq
 800488c:	4b0c      	ldreq	r3, [pc, #48]	; (80048c0 <initialise_monitor_handles+0xb4>)
 800488e:	681b      	ldreq	r3, [r3, #0]
 8004890:	602b      	streq	r3, [r5, #0]
 8004892:	2600      	movs	r6, #0
 8004894:	f8d8 3000 	ldr.w	r3, [r8]
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	6066      	str	r6, [r4, #4]
 800489c:	f7ff ffaa 	bl	80047f4 <_has_ext_stdout_stderr>
 80048a0:	b130      	cbz	r0, 80048b0 <initialise_monitor_handles+0xa4>
 80048a2:	4b07      	ldr	r3, [pc, #28]	; (80048c0 <initialise_monitor_handles+0xb4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80048aa:	682b      	ldr	r3, [r5, #0]
 80048ac:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80048b0:	b005      	add	sp, #20
 80048b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048b6:	bf00      	nop
 80048b8:	20000384 	.word	0x20000384
 80048bc:	20000378 	.word	0x20000378
 80048c0:	20000380 	.word	0x20000380
 80048c4:	080076fe 	.word	0x080076fe
 80048c8:	2000037c 	.word	0x2000037c

080048cc <_isatty>:
 80048cc:	b570      	push	{r4, r5, r6, lr}
 80048ce:	f7ff fd75 	bl	80043bc <findslot>
 80048d2:	2509      	movs	r5, #9
 80048d4:	4604      	mov	r4, r0
 80048d6:	b920      	cbnz	r0, 80048e2 <_isatty+0x16>
 80048d8:	f000 fe74 	bl	80055c4 <__errno>
 80048dc:	6005      	str	r5, [r0, #0]
 80048de:	4620      	mov	r0, r4
 80048e0:	bd70      	pop	{r4, r5, r6, pc}
 80048e2:	4628      	mov	r0, r5
 80048e4:	4621      	mov	r1, r4
 80048e6:	beab      	bkpt	0x00ab
 80048e8:	4604      	mov	r4, r0
 80048ea:	2c01      	cmp	r4, #1
 80048ec:	d0f7      	beq.n	80048de <_isatty+0x12>
 80048ee:	f000 fe69 	bl	80055c4 <__errno>
 80048f2:	2400      	movs	r4, #0
 80048f4:	4605      	mov	r5, r0
 80048f6:	2613      	movs	r6, #19
 80048f8:	4630      	mov	r0, r6
 80048fa:	4621      	mov	r1, r4
 80048fc:	beab      	bkpt	0x00ab
 80048fe:	4606      	mov	r6, r0
 8004900:	602e      	str	r6, [r5, #0]
 8004902:	e7ec      	b.n	80048de <_isatty+0x12>

08004904 <__cvt>:
 8004904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004908:	ec55 4b10 	vmov	r4, r5, d0
 800490c:	2d00      	cmp	r5, #0
 800490e:	460e      	mov	r6, r1
 8004910:	4619      	mov	r1, r3
 8004912:	462b      	mov	r3, r5
 8004914:	bfbb      	ittet	lt
 8004916:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800491a:	461d      	movlt	r5, r3
 800491c:	2300      	movge	r3, #0
 800491e:	232d      	movlt	r3, #45	; 0x2d
 8004920:	700b      	strb	r3, [r1, #0]
 8004922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004924:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004928:	4691      	mov	r9, r2
 800492a:	f023 0820 	bic.w	r8, r3, #32
 800492e:	bfbc      	itt	lt
 8004930:	4622      	movlt	r2, r4
 8004932:	4614      	movlt	r4, r2
 8004934:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004938:	d005      	beq.n	8004946 <__cvt+0x42>
 800493a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800493e:	d100      	bne.n	8004942 <__cvt+0x3e>
 8004940:	3601      	adds	r6, #1
 8004942:	2102      	movs	r1, #2
 8004944:	e000      	b.n	8004948 <__cvt+0x44>
 8004946:	2103      	movs	r1, #3
 8004948:	ab03      	add	r3, sp, #12
 800494a:	9301      	str	r3, [sp, #4]
 800494c:	ab02      	add	r3, sp, #8
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	ec45 4b10 	vmov	d0, r4, r5
 8004954:	4653      	mov	r3, sl
 8004956:	4632      	mov	r2, r6
 8004958:	f000 ff16 	bl	8005788 <_dtoa_r>
 800495c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004960:	4607      	mov	r7, r0
 8004962:	d102      	bne.n	800496a <__cvt+0x66>
 8004964:	f019 0f01 	tst.w	r9, #1
 8004968:	d022      	beq.n	80049b0 <__cvt+0xac>
 800496a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800496e:	eb07 0906 	add.w	r9, r7, r6
 8004972:	d110      	bne.n	8004996 <__cvt+0x92>
 8004974:	783b      	ldrb	r3, [r7, #0]
 8004976:	2b30      	cmp	r3, #48	; 0x30
 8004978:	d10a      	bne.n	8004990 <__cvt+0x8c>
 800497a:	2200      	movs	r2, #0
 800497c:	2300      	movs	r3, #0
 800497e:	4620      	mov	r0, r4
 8004980:	4629      	mov	r1, r5
 8004982:	f7fc f8a1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004986:	b918      	cbnz	r0, 8004990 <__cvt+0x8c>
 8004988:	f1c6 0601 	rsb	r6, r6, #1
 800498c:	f8ca 6000 	str.w	r6, [sl]
 8004990:	f8da 3000 	ldr.w	r3, [sl]
 8004994:	4499      	add	r9, r3
 8004996:	2200      	movs	r2, #0
 8004998:	2300      	movs	r3, #0
 800499a:	4620      	mov	r0, r4
 800499c:	4629      	mov	r1, r5
 800499e:	f7fc f893 	bl	8000ac8 <__aeabi_dcmpeq>
 80049a2:	b108      	cbz	r0, 80049a8 <__cvt+0xa4>
 80049a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80049a8:	2230      	movs	r2, #48	; 0x30
 80049aa:	9b03      	ldr	r3, [sp, #12]
 80049ac:	454b      	cmp	r3, r9
 80049ae:	d307      	bcc.n	80049c0 <__cvt+0xbc>
 80049b0:	9b03      	ldr	r3, [sp, #12]
 80049b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049b4:	1bdb      	subs	r3, r3, r7
 80049b6:	4638      	mov	r0, r7
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	b004      	add	sp, #16
 80049bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049c0:	1c59      	adds	r1, r3, #1
 80049c2:	9103      	str	r1, [sp, #12]
 80049c4:	701a      	strb	r2, [r3, #0]
 80049c6:	e7f0      	b.n	80049aa <__cvt+0xa6>

080049c8 <__exponent>:
 80049c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049ca:	4603      	mov	r3, r0
 80049cc:	2900      	cmp	r1, #0
 80049ce:	bfb8      	it	lt
 80049d0:	4249      	neglt	r1, r1
 80049d2:	f803 2b02 	strb.w	r2, [r3], #2
 80049d6:	bfb4      	ite	lt
 80049d8:	222d      	movlt	r2, #45	; 0x2d
 80049da:	222b      	movge	r2, #43	; 0x2b
 80049dc:	2909      	cmp	r1, #9
 80049de:	7042      	strb	r2, [r0, #1]
 80049e0:	dd2a      	ble.n	8004a38 <__exponent+0x70>
 80049e2:	f10d 0207 	add.w	r2, sp, #7
 80049e6:	4617      	mov	r7, r2
 80049e8:	260a      	movs	r6, #10
 80049ea:	4694      	mov	ip, r2
 80049ec:	fb91 f5f6 	sdiv	r5, r1, r6
 80049f0:	fb06 1415 	mls	r4, r6, r5, r1
 80049f4:	3430      	adds	r4, #48	; 0x30
 80049f6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80049fa:	460c      	mov	r4, r1
 80049fc:	2c63      	cmp	r4, #99	; 0x63
 80049fe:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8004a02:	4629      	mov	r1, r5
 8004a04:	dcf1      	bgt.n	80049ea <__exponent+0x22>
 8004a06:	3130      	adds	r1, #48	; 0x30
 8004a08:	f1ac 0402 	sub.w	r4, ip, #2
 8004a0c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004a10:	1c41      	adds	r1, r0, #1
 8004a12:	4622      	mov	r2, r4
 8004a14:	42ba      	cmp	r2, r7
 8004a16:	d30a      	bcc.n	8004a2e <__exponent+0x66>
 8004a18:	f10d 0209 	add.w	r2, sp, #9
 8004a1c:	eba2 020c 	sub.w	r2, r2, ip
 8004a20:	42bc      	cmp	r4, r7
 8004a22:	bf88      	it	hi
 8004a24:	2200      	movhi	r2, #0
 8004a26:	4413      	add	r3, r2
 8004a28:	1a18      	subs	r0, r3, r0
 8004a2a:	b003      	add	sp, #12
 8004a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a2e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004a32:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004a36:	e7ed      	b.n	8004a14 <__exponent+0x4c>
 8004a38:	2330      	movs	r3, #48	; 0x30
 8004a3a:	3130      	adds	r1, #48	; 0x30
 8004a3c:	7083      	strb	r3, [r0, #2]
 8004a3e:	70c1      	strb	r1, [r0, #3]
 8004a40:	1d03      	adds	r3, r0, #4
 8004a42:	e7f1      	b.n	8004a28 <__exponent+0x60>

08004a44 <_printf_float>:
 8004a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a48:	ed2d 8b02 	vpush	{d8}
 8004a4c:	b08d      	sub	sp, #52	; 0x34
 8004a4e:	460c      	mov	r4, r1
 8004a50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004a54:	4616      	mov	r6, r2
 8004a56:	461f      	mov	r7, r3
 8004a58:	4605      	mov	r5, r0
 8004a5a:	f000 fd69 	bl	8005530 <_localeconv_r>
 8004a5e:	f8d0 a000 	ldr.w	sl, [r0]
 8004a62:	4650      	mov	r0, sl
 8004a64:	f7fb fc04 	bl	8000270 <strlen>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	930a      	str	r3, [sp, #40]	; 0x28
 8004a6c:	6823      	ldr	r3, [r4, #0]
 8004a6e:	9305      	str	r3, [sp, #20]
 8004a70:	f8d8 3000 	ldr.w	r3, [r8]
 8004a74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004a78:	3307      	adds	r3, #7
 8004a7a:	f023 0307 	bic.w	r3, r3, #7
 8004a7e:	f103 0208 	add.w	r2, r3, #8
 8004a82:	f8c8 2000 	str.w	r2, [r8]
 8004a86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a8e:	9307      	str	r3, [sp, #28]
 8004a90:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a94:	ee08 0a10 	vmov	s16, r0
 8004a98:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004a9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004aa0:	4b9e      	ldr	r3, [pc, #632]	; (8004d1c <_printf_float+0x2d8>)
 8004aa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004aa6:	f7fc f841 	bl	8000b2c <__aeabi_dcmpun>
 8004aaa:	bb88      	cbnz	r0, 8004b10 <_printf_float+0xcc>
 8004aac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ab0:	4b9a      	ldr	r3, [pc, #616]	; (8004d1c <_printf_float+0x2d8>)
 8004ab2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ab6:	f7fc f81b 	bl	8000af0 <__aeabi_dcmple>
 8004aba:	bb48      	cbnz	r0, 8004b10 <_printf_float+0xcc>
 8004abc:	2200      	movs	r2, #0
 8004abe:	2300      	movs	r3, #0
 8004ac0:	4640      	mov	r0, r8
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	f7fc f80a 	bl	8000adc <__aeabi_dcmplt>
 8004ac8:	b110      	cbz	r0, 8004ad0 <_printf_float+0x8c>
 8004aca:	232d      	movs	r3, #45	; 0x2d
 8004acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ad0:	4a93      	ldr	r2, [pc, #588]	; (8004d20 <_printf_float+0x2dc>)
 8004ad2:	4b94      	ldr	r3, [pc, #592]	; (8004d24 <_printf_float+0x2e0>)
 8004ad4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004ad8:	bf94      	ite	ls
 8004ada:	4690      	movls	r8, r2
 8004adc:	4698      	movhi	r8, r3
 8004ade:	2303      	movs	r3, #3
 8004ae0:	6123      	str	r3, [r4, #16]
 8004ae2:	9b05      	ldr	r3, [sp, #20]
 8004ae4:	f023 0304 	bic.w	r3, r3, #4
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	f04f 0900 	mov.w	r9, #0
 8004aee:	9700      	str	r7, [sp, #0]
 8004af0:	4633      	mov	r3, r6
 8004af2:	aa0b      	add	r2, sp, #44	; 0x2c
 8004af4:	4621      	mov	r1, r4
 8004af6:	4628      	mov	r0, r5
 8004af8:	f000 f9da 	bl	8004eb0 <_printf_common>
 8004afc:	3001      	adds	r0, #1
 8004afe:	f040 8090 	bne.w	8004c22 <_printf_float+0x1de>
 8004b02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b06:	b00d      	add	sp, #52	; 0x34
 8004b08:	ecbd 8b02 	vpop	{d8}
 8004b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b10:	4642      	mov	r2, r8
 8004b12:	464b      	mov	r3, r9
 8004b14:	4640      	mov	r0, r8
 8004b16:	4649      	mov	r1, r9
 8004b18:	f7fc f808 	bl	8000b2c <__aeabi_dcmpun>
 8004b1c:	b140      	cbz	r0, 8004b30 <_printf_float+0xec>
 8004b1e:	464b      	mov	r3, r9
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	bfbc      	itt	lt
 8004b24:	232d      	movlt	r3, #45	; 0x2d
 8004b26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b2a:	4a7f      	ldr	r2, [pc, #508]	; (8004d28 <_printf_float+0x2e4>)
 8004b2c:	4b7f      	ldr	r3, [pc, #508]	; (8004d2c <_printf_float+0x2e8>)
 8004b2e:	e7d1      	b.n	8004ad4 <_printf_float+0x90>
 8004b30:	6863      	ldr	r3, [r4, #4]
 8004b32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004b36:	9206      	str	r2, [sp, #24]
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	d13f      	bne.n	8004bbc <_printf_float+0x178>
 8004b3c:	2306      	movs	r3, #6
 8004b3e:	6063      	str	r3, [r4, #4]
 8004b40:	9b05      	ldr	r3, [sp, #20]
 8004b42:	6861      	ldr	r1, [r4, #4]
 8004b44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004b48:	2300      	movs	r3, #0
 8004b4a:	9303      	str	r3, [sp, #12]
 8004b4c:	ab0a      	add	r3, sp, #40	; 0x28
 8004b4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004b52:	ab09      	add	r3, sp, #36	; 0x24
 8004b54:	ec49 8b10 	vmov	d0, r8, r9
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	6022      	str	r2, [r4, #0]
 8004b5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b60:	4628      	mov	r0, r5
 8004b62:	f7ff fecf 	bl	8004904 <__cvt>
 8004b66:	9b06      	ldr	r3, [sp, #24]
 8004b68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b6a:	2b47      	cmp	r3, #71	; 0x47
 8004b6c:	4680      	mov	r8, r0
 8004b6e:	d108      	bne.n	8004b82 <_printf_float+0x13e>
 8004b70:	1cc8      	adds	r0, r1, #3
 8004b72:	db02      	blt.n	8004b7a <_printf_float+0x136>
 8004b74:	6863      	ldr	r3, [r4, #4]
 8004b76:	4299      	cmp	r1, r3
 8004b78:	dd41      	ble.n	8004bfe <_printf_float+0x1ba>
 8004b7a:	f1ab 0302 	sub.w	r3, fp, #2
 8004b7e:	fa5f fb83 	uxtb.w	fp, r3
 8004b82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b86:	d820      	bhi.n	8004bca <_printf_float+0x186>
 8004b88:	3901      	subs	r1, #1
 8004b8a:	465a      	mov	r2, fp
 8004b8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b90:	9109      	str	r1, [sp, #36]	; 0x24
 8004b92:	f7ff ff19 	bl	80049c8 <__exponent>
 8004b96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b98:	1813      	adds	r3, r2, r0
 8004b9a:	2a01      	cmp	r2, #1
 8004b9c:	4681      	mov	r9, r0
 8004b9e:	6123      	str	r3, [r4, #16]
 8004ba0:	dc02      	bgt.n	8004ba8 <_printf_float+0x164>
 8004ba2:	6822      	ldr	r2, [r4, #0]
 8004ba4:	07d2      	lsls	r2, r2, #31
 8004ba6:	d501      	bpl.n	8004bac <_printf_float+0x168>
 8004ba8:	3301      	adds	r3, #1
 8004baa:	6123      	str	r3, [r4, #16]
 8004bac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d09c      	beq.n	8004aee <_printf_float+0xaa>
 8004bb4:	232d      	movs	r3, #45	; 0x2d
 8004bb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bba:	e798      	b.n	8004aee <_printf_float+0xaa>
 8004bbc:	9a06      	ldr	r2, [sp, #24]
 8004bbe:	2a47      	cmp	r2, #71	; 0x47
 8004bc0:	d1be      	bne.n	8004b40 <_printf_float+0xfc>
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1bc      	bne.n	8004b40 <_printf_float+0xfc>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e7b9      	b.n	8004b3e <_printf_float+0xfa>
 8004bca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004bce:	d118      	bne.n	8004c02 <_printf_float+0x1be>
 8004bd0:	2900      	cmp	r1, #0
 8004bd2:	6863      	ldr	r3, [r4, #4]
 8004bd4:	dd0b      	ble.n	8004bee <_printf_float+0x1aa>
 8004bd6:	6121      	str	r1, [r4, #16]
 8004bd8:	b913      	cbnz	r3, 8004be0 <_printf_float+0x19c>
 8004bda:	6822      	ldr	r2, [r4, #0]
 8004bdc:	07d0      	lsls	r0, r2, #31
 8004bde:	d502      	bpl.n	8004be6 <_printf_float+0x1a2>
 8004be0:	3301      	adds	r3, #1
 8004be2:	440b      	add	r3, r1
 8004be4:	6123      	str	r3, [r4, #16]
 8004be6:	65a1      	str	r1, [r4, #88]	; 0x58
 8004be8:	f04f 0900 	mov.w	r9, #0
 8004bec:	e7de      	b.n	8004bac <_printf_float+0x168>
 8004bee:	b913      	cbnz	r3, 8004bf6 <_printf_float+0x1b2>
 8004bf0:	6822      	ldr	r2, [r4, #0]
 8004bf2:	07d2      	lsls	r2, r2, #31
 8004bf4:	d501      	bpl.n	8004bfa <_printf_float+0x1b6>
 8004bf6:	3302      	adds	r3, #2
 8004bf8:	e7f4      	b.n	8004be4 <_printf_float+0x1a0>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e7f2      	b.n	8004be4 <_printf_float+0x1a0>
 8004bfe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c04:	4299      	cmp	r1, r3
 8004c06:	db05      	blt.n	8004c14 <_printf_float+0x1d0>
 8004c08:	6823      	ldr	r3, [r4, #0]
 8004c0a:	6121      	str	r1, [r4, #16]
 8004c0c:	07d8      	lsls	r0, r3, #31
 8004c0e:	d5ea      	bpl.n	8004be6 <_printf_float+0x1a2>
 8004c10:	1c4b      	adds	r3, r1, #1
 8004c12:	e7e7      	b.n	8004be4 <_printf_float+0x1a0>
 8004c14:	2900      	cmp	r1, #0
 8004c16:	bfd4      	ite	le
 8004c18:	f1c1 0202 	rsble	r2, r1, #2
 8004c1c:	2201      	movgt	r2, #1
 8004c1e:	4413      	add	r3, r2
 8004c20:	e7e0      	b.n	8004be4 <_printf_float+0x1a0>
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	055a      	lsls	r2, r3, #21
 8004c26:	d407      	bmi.n	8004c38 <_printf_float+0x1f4>
 8004c28:	6923      	ldr	r3, [r4, #16]
 8004c2a:	4642      	mov	r2, r8
 8004c2c:	4631      	mov	r1, r6
 8004c2e:	4628      	mov	r0, r5
 8004c30:	47b8      	blx	r7
 8004c32:	3001      	adds	r0, #1
 8004c34:	d12c      	bne.n	8004c90 <_printf_float+0x24c>
 8004c36:	e764      	b.n	8004b02 <_printf_float+0xbe>
 8004c38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c3c:	f240 80e0 	bls.w	8004e00 <_printf_float+0x3bc>
 8004c40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c44:	2200      	movs	r2, #0
 8004c46:	2300      	movs	r3, #0
 8004c48:	f7fb ff3e 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	d034      	beq.n	8004cba <_printf_float+0x276>
 8004c50:	4a37      	ldr	r2, [pc, #220]	; (8004d30 <_printf_float+0x2ec>)
 8004c52:	2301      	movs	r3, #1
 8004c54:	4631      	mov	r1, r6
 8004c56:	4628      	mov	r0, r5
 8004c58:	47b8      	blx	r7
 8004c5a:	3001      	adds	r0, #1
 8004c5c:	f43f af51 	beq.w	8004b02 <_printf_float+0xbe>
 8004c60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c64:	429a      	cmp	r2, r3
 8004c66:	db02      	blt.n	8004c6e <_printf_float+0x22a>
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	07d8      	lsls	r0, r3, #31
 8004c6c:	d510      	bpl.n	8004c90 <_printf_float+0x24c>
 8004c6e:	ee18 3a10 	vmov	r3, s16
 8004c72:	4652      	mov	r2, sl
 8004c74:	4631      	mov	r1, r6
 8004c76:	4628      	mov	r0, r5
 8004c78:	47b8      	blx	r7
 8004c7a:	3001      	adds	r0, #1
 8004c7c:	f43f af41 	beq.w	8004b02 <_printf_float+0xbe>
 8004c80:	f04f 0800 	mov.w	r8, #0
 8004c84:	f104 091a 	add.w	r9, r4, #26
 8004c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	4543      	cmp	r3, r8
 8004c8e:	dc09      	bgt.n	8004ca4 <_printf_float+0x260>
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	079b      	lsls	r3, r3, #30
 8004c94:	f100 8107 	bmi.w	8004ea6 <_printf_float+0x462>
 8004c98:	68e0      	ldr	r0, [r4, #12]
 8004c9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c9c:	4298      	cmp	r0, r3
 8004c9e:	bfb8      	it	lt
 8004ca0:	4618      	movlt	r0, r3
 8004ca2:	e730      	b.n	8004b06 <_printf_float+0xc2>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	464a      	mov	r2, r9
 8004ca8:	4631      	mov	r1, r6
 8004caa:	4628      	mov	r0, r5
 8004cac:	47b8      	blx	r7
 8004cae:	3001      	adds	r0, #1
 8004cb0:	f43f af27 	beq.w	8004b02 <_printf_float+0xbe>
 8004cb4:	f108 0801 	add.w	r8, r8, #1
 8004cb8:	e7e6      	b.n	8004c88 <_printf_float+0x244>
 8004cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	dc39      	bgt.n	8004d34 <_printf_float+0x2f0>
 8004cc0:	4a1b      	ldr	r2, [pc, #108]	; (8004d30 <_printf_float+0x2ec>)
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	4631      	mov	r1, r6
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	47b8      	blx	r7
 8004cca:	3001      	adds	r0, #1
 8004ccc:	f43f af19 	beq.w	8004b02 <_printf_float+0xbe>
 8004cd0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	d102      	bne.n	8004cde <_printf_float+0x29a>
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	07d9      	lsls	r1, r3, #31
 8004cdc:	d5d8      	bpl.n	8004c90 <_printf_float+0x24c>
 8004cde:	ee18 3a10 	vmov	r3, s16
 8004ce2:	4652      	mov	r2, sl
 8004ce4:	4631      	mov	r1, r6
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	47b8      	blx	r7
 8004cea:	3001      	adds	r0, #1
 8004cec:	f43f af09 	beq.w	8004b02 <_printf_float+0xbe>
 8004cf0:	f04f 0900 	mov.w	r9, #0
 8004cf4:	f104 0a1a 	add.w	sl, r4, #26
 8004cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cfa:	425b      	negs	r3, r3
 8004cfc:	454b      	cmp	r3, r9
 8004cfe:	dc01      	bgt.n	8004d04 <_printf_float+0x2c0>
 8004d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d02:	e792      	b.n	8004c2a <_printf_float+0x1e6>
 8004d04:	2301      	movs	r3, #1
 8004d06:	4652      	mov	r2, sl
 8004d08:	4631      	mov	r1, r6
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	47b8      	blx	r7
 8004d0e:	3001      	adds	r0, #1
 8004d10:	f43f aef7 	beq.w	8004b02 <_printf_float+0xbe>
 8004d14:	f109 0901 	add.w	r9, r9, #1
 8004d18:	e7ee      	b.n	8004cf8 <_printf_float+0x2b4>
 8004d1a:	bf00      	nop
 8004d1c:	7fefffff 	.word	0x7fefffff
 8004d20:	08007702 	.word	0x08007702
 8004d24:	08007706 	.word	0x08007706
 8004d28:	0800770a 	.word	0x0800770a
 8004d2c:	0800770e 	.word	0x0800770e
 8004d30:	08007712 	.word	0x08007712
 8004d34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	bfa8      	it	ge
 8004d3c:	461a      	movge	r2, r3
 8004d3e:	2a00      	cmp	r2, #0
 8004d40:	4691      	mov	r9, r2
 8004d42:	dc37      	bgt.n	8004db4 <_printf_float+0x370>
 8004d44:	f04f 0b00 	mov.w	fp, #0
 8004d48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d4c:	f104 021a 	add.w	r2, r4, #26
 8004d50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d52:	9305      	str	r3, [sp, #20]
 8004d54:	eba3 0309 	sub.w	r3, r3, r9
 8004d58:	455b      	cmp	r3, fp
 8004d5a:	dc33      	bgt.n	8004dc4 <_printf_float+0x380>
 8004d5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d60:	429a      	cmp	r2, r3
 8004d62:	db3b      	blt.n	8004ddc <_printf_float+0x398>
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	07da      	lsls	r2, r3, #31
 8004d68:	d438      	bmi.n	8004ddc <_printf_float+0x398>
 8004d6a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004d6e:	eba2 0903 	sub.w	r9, r2, r3
 8004d72:	9b05      	ldr	r3, [sp, #20]
 8004d74:	1ad2      	subs	r2, r2, r3
 8004d76:	4591      	cmp	r9, r2
 8004d78:	bfa8      	it	ge
 8004d7a:	4691      	movge	r9, r2
 8004d7c:	f1b9 0f00 	cmp.w	r9, #0
 8004d80:	dc35      	bgt.n	8004dee <_printf_float+0x3aa>
 8004d82:	f04f 0800 	mov.w	r8, #0
 8004d86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d8a:	f104 0a1a 	add.w	sl, r4, #26
 8004d8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d92:	1a9b      	subs	r3, r3, r2
 8004d94:	eba3 0309 	sub.w	r3, r3, r9
 8004d98:	4543      	cmp	r3, r8
 8004d9a:	f77f af79 	ble.w	8004c90 <_printf_float+0x24c>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	4652      	mov	r2, sl
 8004da2:	4631      	mov	r1, r6
 8004da4:	4628      	mov	r0, r5
 8004da6:	47b8      	blx	r7
 8004da8:	3001      	adds	r0, #1
 8004daa:	f43f aeaa 	beq.w	8004b02 <_printf_float+0xbe>
 8004dae:	f108 0801 	add.w	r8, r8, #1
 8004db2:	e7ec      	b.n	8004d8e <_printf_float+0x34a>
 8004db4:	4613      	mov	r3, r2
 8004db6:	4631      	mov	r1, r6
 8004db8:	4642      	mov	r2, r8
 8004dba:	4628      	mov	r0, r5
 8004dbc:	47b8      	blx	r7
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	d1c0      	bne.n	8004d44 <_printf_float+0x300>
 8004dc2:	e69e      	b.n	8004b02 <_printf_float+0xbe>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	4631      	mov	r1, r6
 8004dc8:	4628      	mov	r0, r5
 8004dca:	9205      	str	r2, [sp, #20]
 8004dcc:	47b8      	blx	r7
 8004dce:	3001      	adds	r0, #1
 8004dd0:	f43f ae97 	beq.w	8004b02 <_printf_float+0xbe>
 8004dd4:	9a05      	ldr	r2, [sp, #20]
 8004dd6:	f10b 0b01 	add.w	fp, fp, #1
 8004dda:	e7b9      	b.n	8004d50 <_printf_float+0x30c>
 8004ddc:	ee18 3a10 	vmov	r3, s16
 8004de0:	4652      	mov	r2, sl
 8004de2:	4631      	mov	r1, r6
 8004de4:	4628      	mov	r0, r5
 8004de6:	47b8      	blx	r7
 8004de8:	3001      	adds	r0, #1
 8004dea:	d1be      	bne.n	8004d6a <_printf_float+0x326>
 8004dec:	e689      	b.n	8004b02 <_printf_float+0xbe>
 8004dee:	9a05      	ldr	r2, [sp, #20]
 8004df0:	464b      	mov	r3, r9
 8004df2:	4442      	add	r2, r8
 8004df4:	4631      	mov	r1, r6
 8004df6:	4628      	mov	r0, r5
 8004df8:	47b8      	blx	r7
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	d1c1      	bne.n	8004d82 <_printf_float+0x33e>
 8004dfe:	e680      	b.n	8004b02 <_printf_float+0xbe>
 8004e00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e02:	2a01      	cmp	r2, #1
 8004e04:	dc01      	bgt.n	8004e0a <_printf_float+0x3c6>
 8004e06:	07db      	lsls	r3, r3, #31
 8004e08:	d53a      	bpl.n	8004e80 <_printf_float+0x43c>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	4642      	mov	r2, r8
 8004e0e:	4631      	mov	r1, r6
 8004e10:	4628      	mov	r0, r5
 8004e12:	47b8      	blx	r7
 8004e14:	3001      	adds	r0, #1
 8004e16:	f43f ae74 	beq.w	8004b02 <_printf_float+0xbe>
 8004e1a:	ee18 3a10 	vmov	r3, s16
 8004e1e:	4652      	mov	r2, sl
 8004e20:	4631      	mov	r1, r6
 8004e22:	4628      	mov	r0, r5
 8004e24:	47b8      	blx	r7
 8004e26:	3001      	adds	r0, #1
 8004e28:	f43f ae6b 	beq.w	8004b02 <_printf_float+0xbe>
 8004e2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e30:	2200      	movs	r2, #0
 8004e32:	2300      	movs	r3, #0
 8004e34:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004e38:	f7fb fe46 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e3c:	b9d8      	cbnz	r0, 8004e76 <_printf_float+0x432>
 8004e3e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8004e42:	f108 0201 	add.w	r2, r8, #1
 8004e46:	4631      	mov	r1, r6
 8004e48:	4628      	mov	r0, r5
 8004e4a:	47b8      	blx	r7
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	d10e      	bne.n	8004e6e <_printf_float+0x42a>
 8004e50:	e657      	b.n	8004b02 <_printf_float+0xbe>
 8004e52:	2301      	movs	r3, #1
 8004e54:	4652      	mov	r2, sl
 8004e56:	4631      	mov	r1, r6
 8004e58:	4628      	mov	r0, r5
 8004e5a:	47b8      	blx	r7
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	f43f ae50 	beq.w	8004b02 <_printf_float+0xbe>
 8004e62:	f108 0801 	add.w	r8, r8, #1
 8004e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	4543      	cmp	r3, r8
 8004e6c:	dcf1      	bgt.n	8004e52 <_printf_float+0x40e>
 8004e6e:	464b      	mov	r3, r9
 8004e70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e74:	e6da      	b.n	8004c2c <_printf_float+0x1e8>
 8004e76:	f04f 0800 	mov.w	r8, #0
 8004e7a:	f104 0a1a 	add.w	sl, r4, #26
 8004e7e:	e7f2      	b.n	8004e66 <_printf_float+0x422>
 8004e80:	2301      	movs	r3, #1
 8004e82:	4642      	mov	r2, r8
 8004e84:	e7df      	b.n	8004e46 <_printf_float+0x402>
 8004e86:	2301      	movs	r3, #1
 8004e88:	464a      	mov	r2, r9
 8004e8a:	4631      	mov	r1, r6
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	47b8      	blx	r7
 8004e90:	3001      	adds	r0, #1
 8004e92:	f43f ae36 	beq.w	8004b02 <_printf_float+0xbe>
 8004e96:	f108 0801 	add.w	r8, r8, #1
 8004e9a:	68e3      	ldr	r3, [r4, #12]
 8004e9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e9e:	1a5b      	subs	r3, r3, r1
 8004ea0:	4543      	cmp	r3, r8
 8004ea2:	dcf0      	bgt.n	8004e86 <_printf_float+0x442>
 8004ea4:	e6f8      	b.n	8004c98 <_printf_float+0x254>
 8004ea6:	f04f 0800 	mov.w	r8, #0
 8004eaa:	f104 0919 	add.w	r9, r4, #25
 8004eae:	e7f4      	b.n	8004e9a <_printf_float+0x456>

08004eb0 <_printf_common>:
 8004eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb4:	4616      	mov	r6, r2
 8004eb6:	4699      	mov	r9, r3
 8004eb8:	688a      	ldr	r2, [r1, #8]
 8004eba:	690b      	ldr	r3, [r1, #16]
 8004ebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	bfb8      	it	lt
 8004ec4:	4613      	movlt	r3, r2
 8004ec6:	6033      	str	r3, [r6, #0]
 8004ec8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ecc:	4607      	mov	r7, r0
 8004ece:	460c      	mov	r4, r1
 8004ed0:	b10a      	cbz	r2, 8004ed6 <_printf_common+0x26>
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	6033      	str	r3, [r6, #0]
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	0699      	lsls	r1, r3, #26
 8004eda:	bf42      	ittt	mi
 8004edc:	6833      	ldrmi	r3, [r6, #0]
 8004ede:	3302      	addmi	r3, #2
 8004ee0:	6033      	strmi	r3, [r6, #0]
 8004ee2:	6825      	ldr	r5, [r4, #0]
 8004ee4:	f015 0506 	ands.w	r5, r5, #6
 8004ee8:	d106      	bne.n	8004ef8 <_printf_common+0x48>
 8004eea:	f104 0a19 	add.w	sl, r4, #25
 8004eee:	68e3      	ldr	r3, [r4, #12]
 8004ef0:	6832      	ldr	r2, [r6, #0]
 8004ef2:	1a9b      	subs	r3, r3, r2
 8004ef4:	42ab      	cmp	r3, r5
 8004ef6:	dc26      	bgt.n	8004f46 <_printf_common+0x96>
 8004ef8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004efc:	1e13      	subs	r3, r2, #0
 8004efe:	6822      	ldr	r2, [r4, #0]
 8004f00:	bf18      	it	ne
 8004f02:	2301      	movne	r3, #1
 8004f04:	0692      	lsls	r2, r2, #26
 8004f06:	d42b      	bmi.n	8004f60 <_printf_common+0xb0>
 8004f08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f0c:	4649      	mov	r1, r9
 8004f0e:	4638      	mov	r0, r7
 8004f10:	47c0      	blx	r8
 8004f12:	3001      	adds	r0, #1
 8004f14:	d01e      	beq.n	8004f54 <_printf_common+0xa4>
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	6922      	ldr	r2, [r4, #16]
 8004f1a:	f003 0306 	and.w	r3, r3, #6
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	bf02      	ittt	eq
 8004f22:	68e5      	ldreq	r5, [r4, #12]
 8004f24:	6833      	ldreq	r3, [r6, #0]
 8004f26:	1aed      	subeq	r5, r5, r3
 8004f28:	68a3      	ldr	r3, [r4, #8]
 8004f2a:	bf0c      	ite	eq
 8004f2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f30:	2500      	movne	r5, #0
 8004f32:	4293      	cmp	r3, r2
 8004f34:	bfc4      	itt	gt
 8004f36:	1a9b      	subgt	r3, r3, r2
 8004f38:	18ed      	addgt	r5, r5, r3
 8004f3a:	2600      	movs	r6, #0
 8004f3c:	341a      	adds	r4, #26
 8004f3e:	42b5      	cmp	r5, r6
 8004f40:	d11a      	bne.n	8004f78 <_printf_common+0xc8>
 8004f42:	2000      	movs	r0, #0
 8004f44:	e008      	b.n	8004f58 <_printf_common+0xa8>
 8004f46:	2301      	movs	r3, #1
 8004f48:	4652      	mov	r2, sl
 8004f4a:	4649      	mov	r1, r9
 8004f4c:	4638      	mov	r0, r7
 8004f4e:	47c0      	blx	r8
 8004f50:	3001      	adds	r0, #1
 8004f52:	d103      	bne.n	8004f5c <_printf_common+0xac>
 8004f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f5c:	3501      	adds	r5, #1
 8004f5e:	e7c6      	b.n	8004eee <_printf_common+0x3e>
 8004f60:	18e1      	adds	r1, r4, r3
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	2030      	movs	r0, #48	; 0x30
 8004f66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f6a:	4422      	add	r2, r4
 8004f6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f74:	3302      	adds	r3, #2
 8004f76:	e7c7      	b.n	8004f08 <_printf_common+0x58>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	4622      	mov	r2, r4
 8004f7c:	4649      	mov	r1, r9
 8004f7e:	4638      	mov	r0, r7
 8004f80:	47c0      	blx	r8
 8004f82:	3001      	adds	r0, #1
 8004f84:	d0e6      	beq.n	8004f54 <_printf_common+0xa4>
 8004f86:	3601      	adds	r6, #1
 8004f88:	e7d9      	b.n	8004f3e <_printf_common+0x8e>
	...

08004f8c <_printf_i>:
 8004f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f90:	7e0f      	ldrb	r7, [r1, #24]
 8004f92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f94:	2f78      	cmp	r7, #120	; 0x78
 8004f96:	4691      	mov	r9, r2
 8004f98:	4680      	mov	r8, r0
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	469a      	mov	sl, r3
 8004f9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fa2:	d807      	bhi.n	8004fb4 <_printf_i+0x28>
 8004fa4:	2f62      	cmp	r7, #98	; 0x62
 8004fa6:	d80a      	bhi.n	8004fbe <_printf_i+0x32>
 8004fa8:	2f00      	cmp	r7, #0
 8004faa:	f000 80d4 	beq.w	8005156 <_printf_i+0x1ca>
 8004fae:	2f58      	cmp	r7, #88	; 0x58
 8004fb0:	f000 80c0 	beq.w	8005134 <_printf_i+0x1a8>
 8004fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fbc:	e03a      	b.n	8005034 <_printf_i+0xa8>
 8004fbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fc2:	2b15      	cmp	r3, #21
 8004fc4:	d8f6      	bhi.n	8004fb4 <_printf_i+0x28>
 8004fc6:	a101      	add	r1, pc, #4	; (adr r1, 8004fcc <_printf_i+0x40>)
 8004fc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fcc:	08005025 	.word	0x08005025
 8004fd0:	08005039 	.word	0x08005039
 8004fd4:	08004fb5 	.word	0x08004fb5
 8004fd8:	08004fb5 	.word	0x08004fb5
 8004fdc:	08004fb5 	.word	0x08004fb5
 8004fe0:	08004fb5 	.word	0x08004fb5
 8004fe4:	08005039 	.word	0x08005039
 8004fe8:	08004fb5 	.word	0x08004fb5
 8004fec:	08004fb5 	.word	0x08004fb5
 8004ff0:	08004fb5 	.word	0x08004fb5
 8004ff4:	08004fb5 	.word	0x08004fb5
 8004ff8:	0800513d 	.word	0x0800513d
 8004ffc:	08005065 	.word	0x08005065
 8005000:	080050f7 	.word	0x080050f7
 8005004:	08004fb5 	.word	0x08004fb5
 8005008:	08004fb5 	.word	0x08004fb5
 800500c:	0800515f 	.word	0x0800515f
 8005010:	08004fb5 	.word	0x08004fb5
 8005014:	08005065 	.word	0x08005065
 8005018:	08004fb5 	.word	0x08004fb5
 800501c:	08004fb5 	.word	0x08004fb5
 8005020:	080050ff 	.word	0x080050ff
 8005024:	682b      	ldr	r3, [r5, #0]
 8005026:	1d1a      	adds	r2, r3, #4
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	602a      	str	r2, [r5, #0]
 800502c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005034:	2301      	movs	r3, #1
 8005036:	e09f      	b.n	8005178 <_printf_i+0x1ec>
 8005038:	6820      	ldr	r0, [r4, #0]
 800503a:	682b      	ldr	r3, [r5, #0]
 800503c:	0607      	lsls	r7, r0, #24
 800503e:	f103 0104 	add.w	r1, r3, #4
 8005042:	6029      	str	r1, [r5, #0]
 8005044:	d501      	bpl.n	800504a <_printf_i+0xbe>
 8005046:	681e      	ldr	r6, [r3, #0]
 8005048:	e003      	b.n	8005052 <_printf_i+0xc6>
 800504a:	0646      	lsls	r6, r0, #25
 800504c:	d5fb      	bpl.n	8005046 <_printf_i+0xba>
 800504e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005052:	2e00      	cmp	r6, #0
 8005054:	da03      	bge.n	800505e <_printf_i+0xd2>
 8005056:	232d      	movs	r3, #45	; 0x2d
 8005058:	4276      	negs	r6, r6
 800505a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800505e:	485a      	ldr	r0, [pc, #360]	; (80051c8 <_printf_i+0x23c>)
 8005060:	230a      	movs	r3, #10
 8005062:	e012      	b.n	800508a <_printf_i+0xfe>
 8005064:	682b      	ldr	r3, [r5, #0]
 8005066:	6820      	ldr	r0, [r4, #0]
 8005068:	1d19      	adds	r1, r3, #4
 800506a:	6029      	str	r1, [r5, #0]
 800506c:	0605      	lsls	r5, r0, #24
 800506e:	d501      	bpl.n	8005074 <_printf_i+0xe8>
 8005070:	681e      	ldr	r6, [r3, #0]
 8005072:	e002      	b.n	800507a <_printf_i+0xee>
 8005074:	0641      	lsls	r1, r0, #25
 8005076:	d5fb      	bpl.n	8005070 <_printf_i+0xe4>
 8005078:	881e      	ldrh	r6, [r3, #0]
 800507a:	4853      	ldr	r0, [pc, #332]	; (80051c8 <_printf_i+0x23c>)
 800507c:	2f6f      	cmp	r7, #111	; 0x6f
 800507e:	bf0c      	ite	eq
 8005080:	2308      	moveq	r3, #8
 8005082:	230a      	movne	r3, #10
 8005084:	2100      	movs	r1, #0
 8005086:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800508a:	6865      	ldr	r5, [r4, #4]
 800508c:	60a5      	str	r5, [r4, #8]
 800508e:	2d00      	cmp	r5, #0
 8005090:	bfa2      	ittt	ge
 8005092:	6821      	ldrge	r1, [r4, #0]
 8005094:	f021 0104 	bicge.w	r1, r1, #4
 8005098:	6021      	strge	r1, [r4, #0]
 800509a:	b90e      	cbnz	r6, 80050a0 <_printf_i+0x114>
 800509c:	2d00      	cmp	r5, #0
 800509e:	d04b      	beq.n	8005138 <_printf_i+0x1ac>
 80050a0:	4615      	mov	r5, r2
 80050a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80050a6:	fb03 6711 	mls	r7, r3, r1, r6
 80050aa:	5dc7      	ldrb	r7, [r0, r7]
 80050ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050b0:	4637      	mov	r7, r6
 80050b2:	42bb      	cmp	r3, r7
 80050b4:	460e      	mov	r6, r1
 80050b6:	d9f4      	bls.n	80050a2 <_printf_i+0x116>
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d10b      	bne.n	80050d4 <_printf_i+0x148>
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	07de      	lsls	r6, r3, #31
 80050c0:	d508      	bpl.n	80050d4 <_printf_i+0x148>
 80050c2:	6923      	ldr	r3, [r4, #16]
 80050c4:	6861      	ldr	r1, [r4, #4]
 80050c6:	4299      	cmp	r1, r3
 80050c8:	bfde      	ittt	le
 80050ca:	2330      	movle	r3, #48	; 0x30
 80050cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80050d4:	1b52      	subs	r2, r2, r5
 80050d6:	6122      	str	r2, [r4, #16]
 80050d8:	f8cd a000 	str.w	sl, [sp]
 80050dc:	464b      	mov	r3, r9
 80050de:	aa03      	add	r2, sp, #12
 80050e0:	4621      	mov	r1, r4
 80050e2:	4640      	mov	r0, r8
 80050e4:	f7ff fee4 	bl	8004eb0 <_printf_common>
 80050e8:	3001      	adds	r0, #1
 80050ea:	d14a      	bne.n	8005182 <_printf_i+0x1f6>
 80050ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050f0:	b004      	add	sp, #16
 80050f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	f043 0320 	orr.w	r3, r3, #32
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	4833      	ldr	r0, [pc, #204]	; (80051cc <_printf_i+0x240>)
 8005100:	2778      	movs	r7, #120	; 0x78
 8005102:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	6829      	ldr	r1, [r5, #0]
 800510a:	061f      	lsls	r7, r3, #24
 800510c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005110:	d402      	bmi.n	8005118 <_printf_i+0x18c>
 8005112:	065f      	lsls	r7, r3, #25
 8005114:	bf48      	it	mi
 8005116:	b2b6      	uxthmi	r6, r6
 8005118:	07df      	lsls	r7, r3, #31
 800511a:	bf48      	it	mi
 800511c:	f043 0320 	orrmi.w	r3, r3, #32
 8005120:	6029      	str	r1, [r5, #0]
 8005122:	bf48      	it	mi
 8005124:	6023      	strmi	r3, [r4, #0]
 8005126:	b91e      	cbnz	r6, 8005130 <_printf_i+0x1a4>
 8005128:	6823      	ldr	r3, [r4, #0]
 800512a:	f023 0320 	bic.w	r3, r3, #32
 800512e:	6023      	str	r3, [r4, #0]
 8005130:	2310      	movs	r3, #16
 8005132:	e7a7      	b.n	8005084 <_printf_i+0xf8>
 8005134:	4824      	ldr	r0, [pc, #144]	; (80051c8 <_printf_i+0x23c>)
 8005136:	e7e4      	b.n	8005102 <_printf_i+0x176>
 8005138:	4615      	mov	r5, r2
 800513a:	e7bd      	b.n	80050b8 <_printf_i+0x12c>
 800513c:	682b      	ldr	r3, [r5, #0]
 800513e:	6826      	ldr	r6, [r4, #0]
 8005140:	6961      	ldr	r1, [r4, #20]
 8005142:	1d18      	adds	r0, r3, #4
 8005144:	6028      	str	r0, [r5, #0]
 8005146:	0635      	lsls	r5, r6, #24
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	d501      	bpl.n	8005150 <_printf_i+0x1c4>
 800514c:	6019      	str	r1, [r3, #0]
 800514e:	e002      	b.n	8005156 <_printf_i+0x1ca>
 8005150:	0670      	lsls	r0, r6, #25
 8005152:	d5fb      	bpl.n	800514c <_printf_i+0x1c0>
 8005154:	8019      	strh	r1, [r3, #0]
 8005156:	2300      	movs	r3, #0
 8005158:	6123      	str	r3, [r4, #16]
 800515a:	4615      	mov	r5, r2
 800515c:	e7bc      	b.n	80050d8 <_printf_i+0x14c>
 800515e:	682b      	ldr	r3, [r5, #0]
 8005160:	1d1a      	adds	r2, r3, #4
 8005162:	602a      	str	r2, [r5, #0]
 8005164:	681d      	ldr	r5, [r3, #0]
 8005166:	6862      	ldr	r2, [r4, #4]
 8005168:	2100      	movs	r1, #0
 800516a:	4628      	mov	r0, r5
 800516c:	f7fb f830 	bl	80001d0 <memchr>
 8005170:	b108      	cbz	r0, 8005176 <_printf_i+0x1ea>
 8005172:	1b40      	subs	r0, r0, r5
 8005174:	6060      	str	r0, [r4, #4]
 8005176:	6863      	ldr	r3, [r4, #4]
 8005178:	6123      	str	r3, [r4, #16]
 800517a:	2300      	movs	r3, #0
 800517c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005180:	e7aa      	b.n	80050d8 <_printf_i+0x14c>
 8005182:	6923      	ldr	r3, [r4, #16]
 8005184:	462a      	mov	r2, r5
 8005186:	4649      	mov	r1, r9
 8005188:	4640      	mov	r0, r8
 800518a:	47d0      	blx	sl
 800518c:	3001      	adds	r0, #1
 800518e:	d0ad      	beq.n	80050ec <_printf_i+0x160>
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	079b      	lsls	r3, r3, #30
 8005194:	d413      	bmi.n	80051be <_printf_i+0x232>
 8005196:	68e0      	ldr	r0, [r4, #12]
 8005198:	9b03      	ldr	r3, [sp, #12]
 800519a:	4298      	cmp	r0, r3
 800519c:	bfb8      	it	lt
 800519e:	4618      	movlt	r0, r3
 80051a0:	e7a6      	b.n	80050f0 <_printf_i+0x164>
 80051a2:	2301      	movs	r3, #1
 80051a4:	4632      	mov	r2, r6
 80051a6:	4649      	mov	r1, r9
 80051a8:	4640      	mov	r0, r8
 80051aa:	47d0      	blx	sl
 80051ac:	3001      	adds	r0, #1
 80051ae:	d09d      	beq.n	80050ec <_printf_i+0x160>
 80051b0:	3501      	adds	r5, #1
 80051b2:	68e3      	ldr	r3, [r4, #12]
 80051b4:	9903      	ldr	r1, [sp, #12]
 80051b6:	1a5b      	subs	r3, r3, r1
 80051b8:	42ab      	cmp	r3, r5
 80051ba:	dcf2      	bgt.n	80051a2 <_printf_i+0x216>
 80051bc:	e7eb      	b.n	8005196 <_printf_i+0x20a>
 80051be:	2500      	movs	r5, #0
 80051c0:	f104 0619 	add.w	r6, r4, #25
 80051c4:	e7f5      	b.n	80051b2 <_printf_i+0x226>
 80051c6:	bf00      	nop
 80051c8:	08007714 	.word	0x08007714
 80051cc:	08007725 	.word	0x08007725

080051d0 <std>:
 80051d0:	2300      	movs	r3, #0
 80051d2:	b510      	push	{r4, lr}
 80051d4:	4604      	mov	r4, r0
 80051d6:	e9c0 3300 	strd	r3, r3, [r0]
 80051da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051de:	6083      	str	r3, [r0, #8]
 80051e0:	8181      	strh	r1, [r0, #12]
 80051e2:	6643      	str	r3, [r0, #100]	; 0x64
 80051e4:	81c2      	strh	r2, [r0, #14]
 80051e6:	6183      	str	r3, [r0, #24]
 80051e8:	4619      	mov	r1, r3
 80051ea:	2208      	movs	r2, #8
 80051ec:	305c      	adds	r0, #92	; 0x5c
 80051ee:	f000 f997 	bl	8005520 <memset>
 80051f2:	4b05      	ldr	r3, [pc, #20]	; (8005208 <std+0x38>)
 80051f4:	6263      	str	r3, [r4, #36]	; 0x24
 80051f6:	4b05      	ldr	r3, [pc, #20]	; (800520c <std+0x3c>)
 80051f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80051fa:	4b05      	ldr	r3, [pc, #20]	; (8005210 <std+0x40>)
 80051fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051fe:	4b05      	ldr	r3, [pc, #20]	; (8005214 <std+0x44>)
 8005200:	6224      	str	r4, [r4, #32]
 8005202:	6323      	str	r3, [r4, #48]	; 0x30
 8005204:	bd10      	pop	{r4, pc}
 8005206:	bf00      	nop
 8005208:	08005371 	.word	0x08005371
 800520c:	08005393 	.word	0x08005393
 8005210:	080053cb 	.word	0x080053cb
 8005214:	080053ef 	.word	0x080053ef

08005218 <stdio_exit_handler>:
 8005218:	4a02      	ldr	r2, [pc, #8]	; (8005224 <stdio_exit_handler+0xc>)
 800521a:	4903      	ldr	r1, [pc, #12]	; (8005228 <stdio_exit_handler+0x10>)
 800521c:	4803      	ldr	r0, [pc, #12]	; (800522c <stdio_exit_handler+0x14>)
 800521e:	f000 b869 	b.w	80052f4 <_fwalk_sglue>
 8005222:	bf00      	nop
 8005224:	200000a0 	.word	0x200000a0
 8005228:	080072a9 	.word	0x080072a9
 800522c:	200000ac 	.word	0x200000ac

08005230 <cleanup_stdio>:
 8005230:	6841      	ldr	r1, [r0, #4]
 8005232:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <cleanup_stdio+0x34>)
 8005234:	4299      	cmp	r1, r3
 8005236:	b510      	push	{r4, lr}
 8005238:	4604      	mov	r4, r0
 800523a:	d001      	beq.n	8005240 <cleanup_stdio+0x10>
 800523c:	f002 f834 	bl	80072a8 <_fflush_r>
 8005240:	68a1      	ldr	r1, [r4, #8]
 8005242:	4b09      	ldr	r3, [pc, #36]	; (8005268 <cleanup_stdio+0x38>)
 8005244:	4299      	cmp	r1, r3
 8005246:	d002      	beq.n	800524e <cleanup_stdio+0x1e>
 8005248:	4620      	mov	r0, r4
 800524a:	f002 f82d 	bl	80072a8 <_fflush_r>
 800524e:	68e1      	ldr	r1, [r4, #12]
 8005250:	4b06      	ldr	r3, [pc, #24]	; (800526c <cleanup_stdio+0x3c>)
 8005252:	4299      	cmp	r1, r3
 8005254:	d004      	beq.n	8005260 <cleanup_stdio+0x30>
 8005256:	4620      	mov	r0, r4
 8005258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800525c:	f002 b824 	b.w	80072a8 <_fflush_r>
 8005260:	bd10      	pop	{r4, pc}
 8005262:	bf00      	nop
 8005264:	20000424 	.word	0x20000424
 8005268:	2000048c 	.word	0x2000048c
 800526c:	200004f4 	.word	0x200004f4

08005270 <global_stdio_init.part.0>:
 8005270:	b510      	push	{r4, lr}
 8005272:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <global_stdio_init.part.0+0x30>)
 8005274:	4c0b      	ldr	r4, [pc, #44]	; (80052a4 <global_stdio_init.part.0+0x34>)
 8005276:	4a0c      	ldr	r2, [pc, #48]	; (80052a8 <global_stdio_init.part.0+0x38>)
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	4620      	mov	r0, r4
 800527c:	2200      	movs	r2, #0
 800527e:	2104      	movs	r1, #4
 8005280:	f7ff ffa6 	bl	80051d0 <std>
 8005284:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005288:	2201      	movs	r2, #1
 800528a:	2109      	movs	r1, #9
 800528c:	f7ff ffa0 	bl	80051d0 <std>
 8005290:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005294:	2202      	movs	r2, #2
 8005296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800529a:	2112      	movs	r1, #18
 800529c:	f7ff bf98 	b.w	80051d0 <std>
 80052a0:	2000055c 	.word	0x2000055c
 80052a4:	20000424 	.word	0x20000424
 80052a8:	08005219 	.word	0x08005219

080052ac <__sfp_lock_acquire>:
 80052ac:	4801      	ldr	r0, [pc, #4]	; (80052b4 <__sfp_lock_acquire+0x8>)
 80052ae:	f000 b9b3 	b.w	8005618 <__retarget_lock_acquire_recursive>
 80052b2:	bf00      	nop
 80052b4:	20000565 	.word	0x20000565

080052b8 <__sfp_lock_release>:
 80052b8:	4801      	ldr	r0, [pc, #4]	; (80052c0 <__sfp_lock_release+0x8>)
 80052ba:	f000 b9ae 	b.w	800561a <__retarget_lock_release_recursive>
 80052be:	bf00      	nop
 80052c0:	20000565 	.word	0x20000565

080052c4 <__sinit>:
 80052c4:	b510      	push	{r4, lr}
 80052c6:	4604      	mov	r4, r0
 80052c8:	f7ff fff0 	bl	80052ac <__sfp_lock_acquire>
 80052cc:	6a23      	ldr	r3, [r4, #32]
 80052ce:	b11b      	cbz	r3, 80052d8 <__sinit+0x14>
 80052d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052d4:	f7ff bff0 	b.w	80052b8 <__sfp_lock_release>
 80052d8:	4b04      	ldr	r3, [pc, #16]	; (80052ec <__sinit+0x28>)
 80052da:	6223      	str	r3, [r4, #32]
 80052dc:	4b04      	ldr	r3, [pc, #16]	; (80052f0 <__sinit+0x2c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1f5      	bne.n	80052d0 <__sinit+0xc>
 80052e4:	f7ff ffc4 	bl	8005270 <global_stdio_init.part.0>
 80052e8:	e7f2      	b.n	80052d0 <__sinit+0xc>
 80052ea:	bf00      	nop
 80052ec:	08005231 	.word	0x08005231
 80052f0:	2000055c 	.word	0x2000055c

080052f4 <_fwalk_sglue>:
 80052f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052f8:	4607      	mov	r7, r0
 80052fa:	4688      	mov	r8, r1
 80052fc:	4614      	mov	r4, r2
 80052fe:	2600      	movs	r6, #0
 8005300:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005304:	f1b9 0901 	subs.w	r9, r9, #1
 8005308:	d505      	bpl.n	8005316 <_fwalk_sglue+0x22>
 800530a:	6824      	ldr	r4, [r4, #0]
 800530c:	2c00      	cmp	r4, #0
 800530e:	d1f7      	bne.n	8005300 <_fwalk_sglue+0xc>
 8005310:	4630      	mov	r0, r6
 8005312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005316:	89ab      	ldrh	r3, [r5, #12]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d907      	bls.n	800532c <_fwalk_sglue+0x38>
 800531c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005320:	3301      	adds	r3, #1
 8005322:	d003      	beq.n	800532c <_fwalk_sglue+0x38>
 8005324:	4629      	mov	r1, r5
 8005326:	4638      	mov	r0, r7
 8005328:	47c0      	blx	r8
 800532a:	4306      	orrs	r6, r0
 800532c:	3568      	adds	r5, #104	; 0x68
 800532e:	e7e9      	b.n	8005304 <_fwalk_sglue+0x10>

08005330 <siprintf>:
 8005330:	b40e      	push	{r1, r2, r3}
 8005332:	b500      	push	{lr}
 8005334:	b09c      	sub	sp, #112	; 0x70
 8005336:	ab1d      	add	r3, sp, #116	; 0x74
 8005338:	9002      	str	r0, [sp, #8]
 800533a:	9006      	str	r0, [sp, #24]
 800533c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005340:	4809      	ldr	r0, [pc, #36]	; (8005368 <siprintf+0x38>)
 8005342:	9107      	str	r1, [sp, #28]
 8005344:	9104      	str	r1, [sp, #16]
 8005346:	4909      	ldr	r1, [pc, #36]	; (800536c <siprintf+0x3c>)
 8005348:	f853 2b04 	ldr.w	r2, [r3], #4
 800534c:	9105      	str	r1, [sp, #20]
 800534e:	6800      	ldr	r0, [r0, #0]
 8005350:	9301      	str	r3, [sp, #4]
 8005352:	a902      	add	r1, sp, #8
 8005354:	f001 fce0 	bl	8006d18 <_svfiprintf_r>
 8005358:	9b02      	ldr	r3, [sp, #8]
 800535a:	2200      	movs	r2, #0
 800535c:	701a      	strb	r2, [r3, #0]
 800535e:	b01c      	add	sp, #112	; 0x70
 8005360:	f85d eb04 	ldr.w	lr, [sp], #4
 8005364:	b003      	add	sp, #12
 8005366:	4770      	bx	lr
 8005368:	200000f8 	.word	0x200000f8
 800536c:	ffff0208 	.word	0xffff0208

08005370 <__sread>:
 8005370:	b510      	push	{r4, lr}
 8005372:	460c      	mov	r4, r1
 8005374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005378:	f000 f900 	bl	800557c <_read_r>
 800537c:	2800      	cmp	r0, #0
 800537e:	bfab      	itete	ge
 8005380:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005382:	89a3      	ldrhlt	r3, [r4, #12]
 8005384:	181b      	addge	r3, r3, r0
 8005386:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800538a:	bfac      	ite	ge
 800538c:	6563      	strge	r3, [r4, #84]	; 0x54
 800538e:	81a3      	strhlt	r3, [r4, #12]
 8005390:	bd10      	pop	{r4, pc}

08005392 <__swrite>:
 8005392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005396:	461f      	mov	r7, r3
 8005398:	898b      	ldrh	r3, [r1, #12]
 800539a:	05db      	lsls	r3, r3, #23
 800539c:	4605      	mov	r5, r0
 800539e:	460c      	mov	r4, r1
 80053a0:	4616      	mov	r6, r2
 80053a2:	d505      	bpl.n	80053b0 <__swrite+0x1e>
 80053a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053a8:	2302      	movs	r3, #2
 80053aa:	2200      	movs	r2, #0
 80053ac:	f000 f8d4 	bl	8005558 <_lseek_r>
 80053b0:	89a3      	ldrh	r3, [r4, #12]
 80053b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053ba:	81a3      	strh	r3, [r4, #12]
 80053bc:	4632      	mov	r2, r6
 80053be:	463b      	mov	r3, r7
 80053c0:	4628      	mov	r0, r5
 80053c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053c6:	f000 b8eb 	b.w	80055a0 <_write_r>

080053ca <__sseek>:
 80053ca:	b510      	push	{r4, lr}
 80053cc:	460c      	mov	r4, r1
 80053ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d2:	f000 f8c1 	bl	8005558 <_lseek_r>
 80053d6:	1c43      	adds	r3, r0, #1
 80053d8:	89a3      	ldrh	r3, [r4, #12]
 80053da:	bf15      	itete	ne
 80053dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80053de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80053e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80053e6:	81a3      	strheq	r3, [r4, #12]
 80053e8:	bf18      	it	ne
 80053ea:	81a3      	strhne	r3, [r4, #12]
 80053ec:	bd10      	pop	{r4, pc}

080053ee <__sclose>:
 80053ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f2:	f000 b8a1 	b.w	8005538 <_close_r>

080053f6 <__swbuf_r>:
 80053f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f8:	460e      	mov	r6, r1
 80053fa:	4614      	mov	r4, r2
 80053fc:	4605      	mov	r5, r0
 80053fe:	b118      	cbz	r0, 8005408 <__swbuf_r+0x12>
 8005400:	6a03      	ldr	r3, [r0, #32]
 8005402:	b90b      	cbnz	r3, 8005408 <__swbuf_r+0x12>
 8005404:	f7ff ff5e 	bl	80052c4 <__sinit>
 8005408:	69a3      	ldr	r3, [r4, #24]
 800540a:	60a3      	str	r3, [r4, #8]
 800540c:	89a3      	ldrh	r3, [r4, #12]
 800540e:	071a      	lsls	r2, r3, #28
 8005410:	d525      	bpl.n	800545e <__swbuf_r+0x68>
 8005412:	6923      	ldr	r3, [r4, #16]
 8005414:	b31b      	cbz	r3, 800545e <__swbuf_r+0x68>
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	6922      	ldr	r2, [r4, #16]
 800541a:	1a98      	subs	r0, r3, r2
 800541c:	6963      	ldr	r3, [r4, #20]
 800541e:	b2f6      	uxtb	r6, r6
 8005420:	4283      	cmp	r3, r0
 8005422:	4637      	mov	r7, r6
 8005424:	dc04      	bgt.n	8005430 <__swbuf_r+0x3a>
 8005426:	4621      	mov	r1, r4
 8005428:	4628      	mov	r0, r5
 800542a:	f001 ff3d 	bl	80072a8 <_fflush_r>
 800542e:	b9e0      	cbnz	r0, 800546a <__swbuf_r+0x74>
 8005430:	68a3      	ldr	r3, [r4, #8]
 8005432:	3b01      	subs	r3, #1
 8005434:	60a3      	str	r3, [r4, #8]
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	1c5a      	adds	r2, r3, #1
 800543a:	6022      	str	r2, [r4, #0]
 800543c:	701e      	strb	r6, [r3, #0]
 800543e:	6962      	ldr	r2, [r4, #20]
 8005440:	1c43      	adds	r3, r0, #1
 8005442:	429a      	cmp	r2, r3
 8005444:	d004      	beq.n	8005450 <__swbuf_r+0x5a>
 8005446:	89a3      	ldrh	r3, [r4, #12]
 8005448:	07db      	lsls	r3, r3, #31
 800544a:	d506      	bpl.n	800545a <__swbuf_r+0x64>
 800544c:	2e0a      	cmp	r6, #10
 800544e:	d104      	bne.n	800545a <__swbuf_r+0x64>
 8005450:	4621      	mov	r1, r4
 8005452:	4628      	mov	r0, r5
 8005454:	f001 ff28 	bl	80072a8 <_fflush_r>
 8005458:	b938      	cbnz	r0, 800546a <__swbuf_r+0x74>
 800545a:	4638      	mov	r0, r7
 800545c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800545e:	4621      	mov	r1, r4
 8005460:	4628      	mov	r0, r5
 8005462:	f000 f805 	bl	8005470 <__swsetup_r>
 8005466:	2800      	cmp	r0, #0
 8005468:	d0d5      	beq.n	8005416 <__swbuf_r+0x20>
 800546a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800546e:	e7f4      	b.n	800545a <__swbuf_r+0x64>

08005470 <__swsetup_r>:
 8005470:	b538      	push	{r3, r4, r5, lr}
 8005472:	4b2a      	ldr	r3, [pc, #168]	; (800551c <__swsetup_r+0xac>)
 8005474:	4605      	mov	r5, r0
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	460c      	mov	r4, r1
 800547a:	b118      	cbz	r0, 8005484 <__swsetup_r+0x14>
 800547c:	6a03      	ldr	r3, [r0, #32]
 800547e:	b90b      	cbnz	r3, 8005484 <__swsetup_r+0x14>
 8005480:	f7ff ff20 	bl	80052c4 <__sinit>
 8005484:	89a3      	ldrh	r3, [r4, #12]
 8005486:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800548a:	0718      	lsls	r0, r3, #28
 800548c:	d422      	bmi.n	80054d4 <__swsetup_r+0x64>
 800548e:	06d9      	lsls	r1, r3, #27
 8005490:	d407      	bmi.n	80054a2 <__swsetup_r+0x32>
 8005492:	2309      	movs	r3, #9
 8005494:	602b      	str	r3, [r5, #0]
 8005496:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800549a:	81a3      	strh	r3, [r4, #12]
 800549c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054a0:	e034      	b.n	800550c <__swsetup_r+0x9c>
 80054a2:	0758      	lsls	r0, r3, #29
 80054a4:	d512      	bpl.n	80054cc <__swsetup_r+0x5c>
 80054a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054a8:	b141      	cbz	r1, 80054bc <__swsetup_r+0x4c>
 80054aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054ae:	4299      	cmp	r1, r3
 80054b0:	d002      	beq.n	80054b8 <__swsetup_r+0x48>
 80054b2:	4628      	mov	r0, r5
 80054b4:	f000 ff5a 	bl	800636c <_free_r>
 80054b8:	2300      	movs	r3, #0
 80054ba:	6363      	str	r3, [r4, #52]	; 0x34
 80054bc:	89a3      	ldrh	r3, [r4, #12]
 80054be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80054c2:	81a3      	strh	r3, [r4, #12]
 80054c4:	2300      	movs	r3, #0
 80054c6:	6063      	str	r3, [r4, #4]
 80054c8:	6923      	ldr	r3, [r4, #16]
 80054ca:	6023      	str	r3, [r4, #0]
 80054cc:	89a3      	ldrh	r3, [r4, #12]
 80054ce:	f043 0308 	orr.w	r3, r3, #8
 80054d2:	81a3      	strh	r3, [r4, #12]
 80054d4:	6923      	ldr	r3, [r4, #16]
 80054d6:	b94b      	cbnz	r3, 80054ec <__swsetup_r+0x7c>
 80054d8:	89a3      	ldrh	r3, [r4, #12]
 80054da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054e2:	d003      	beq.n	80054ec <__swsetup_r+0x7c>
 80054e4:	4621      	mov	r1, r4
 80054e6:	4628      	mov	r0, r5
 80054e8:	f001 ff3e 	bl	8007368 <__smakebuf_r>
 80054ec:	89a0      	ldrh	r0, [r4, #12]
 80054ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054f2:	f010 0301 	ands.w	r3, r0, #1
 80054f6:	d00a      	beq.n	800550e <__swsetup_r+0x9e>
 80054f8:	2300      	movs	r3, #0
 80054fa:	60a3      	str	r3, [r4, #8]
 80054fc:	6963      	ldr	r3, [r4, #20]
 80054fe:	425b      	negs	r3, r3
 8005500:	61a3      	str	r3, [r4, #24]
 8005502:	6923      	ldr	r3, [r4, #16]
 8005504:	b943      	cbnz	r3, 8005518 <__swsetup_r+0xa8>
 8005506:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800550a:	d1c4      	bne.n	8005496 <__swsetup_r+0x26>
 800550c:	bd38      	pop	{r3, r4, r5, pc}
 800550e:	0781      	lsls	r1, r0, #30
 8005510:	bf58      	it	pl
 8005512:	6963      	ldrpl	r3, [r4, #20]
 8005514:	60a3      	str	r3, [r4, #8]
 8005516:	e7f4      	b.n	8005502 <__swsetup_r+0x92>
 8005518:	2000      	movs	r0, #0
 800551a:	e7f7      	b.n	800550c <__swsetup_r+0x9c>
 800551c:	200000f8 	.word	0x200000f8

08005520 <memset>:
 8005520:	4402      	add	r2, r0
 8005522:	4603      	mov	r3, r0
 8005524:	4293      	cmp	r3, r2
 8005526:	d100      	bne.n	800552a <memset+0xa>
 8005528:	4770      	bx	lr
 800552a:	f803 1b01 	strb.w	r1, [r3], #1
 800552e:	e7f9      	b.n	8005524 <memset+0x4>

08005530 <_localeconv_r>:
 8005530:	4800      	ldr	r0, [pc, #0]	; (8005534 <_localeconv_r+0x4>)
 8005532:	4770      	bx	lr
 8005534:	200001ec 	.word	0x200001ec

08005538 <_close_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	4d06      	ldr	r5, [pc, #24]	; (8005554 <_close_r+0x1c>)
 800553c:	2300      	movs	r3, #0
 800553e:	4604      	mov	r4, r0
 8005540:	4608      	mov	r0, r1
 8005542:	602b      	str	r3, [r5, #0]
 8005544:	f7ff f812 	bl	800456c <_close>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d102      	bne.n	8005552 <_close_r+0x1a>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	b103      	cbz	r3, 8005552 <_close_r+0x1a>
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	bd38      	pop	{r3, r4, r5, pc}
 8005554:	20000560 	.word	0x20000560

08005558 <_lseek_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	4d07      	ldr	r5, [pc, #28]	; (8005578 <_lseek_r+0x20>)
 800555c:	4604      	mov	r4, r0
 800555e:	4608      	mov	r0, r1
 8005560:	4611      	mov	r1, r2
 8005562:	2200      	movs	r2, #0
 8005564:	602a      	str	r2, [r5, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	f7fe ffbd 	bl	80044e6 <_lseek>
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	d102      	bne.n	8005576 <_lseek_r+0x1e>
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	b103      	cbz	r3, 8005576 <_lseek_r+0x1e>
 8005574:	6023      	str	r3, [r4, #0]
 8005576:	bd38      	pop	{r3, r4, r5, pc}
 8005578:	20000560 	.word	0x20000560

0800557c <_read_r>:
 800557c:	b538      	push	{r3, r4, r5, lr}
 800557e:	4d07      	ldr	r5, [pc, #28]	; (800559c <_read_r+0x20>)
 8005580:	4604      	mov	r4, r0
 8005582:	4608      	mov	r0, r1
 8005584:	4611      	mov	r1, r2
 8005586:	2200      	movs	r2, #0
 8005588:	602a      	str	r2, [r5, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	f7fe ff53 	bl	8004436 <_read>
 8005590:	1c43      	adds	r3, r0, #1
 8005592:	d102      	bne.n	800559a <_read_r+0x1e>
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	b103      	cbz	r3, 800559a <_read_r+0x1e>
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	bd38      	pop	{r3, r4, r5, pc}
 800559c:	20000560 	.word	0x20000560

080055a0 <_write_r>:
 80055a0:	b538      	push	{r3, r4, r5, lr}
 80055a2:	4d07      	ldr	r5, [pc, #28]	; (80055c0 <_write_r+0x20>)
 80055a4:	4604      	mov	r4, r0
 80055a6:	4608      	mov	r0, r1
 80055a8:	4611      	mov	r1, r2
 80055aa:	2200      	movs	r2, #0
 80055ac:	602a      	str	r2, [r5, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	f7fe ffab 	bl	800450a <_write>
 80055b4:	1c43      	adds	r3, r0, #1
 80055b6:	d102      	bne.n	80055be <_write_r+0x1e>
 80055b8:	682b      	ldr	r3, [r5, #0]
 80055ba:	b103      	cbz	r3, 80055be <_write_r+0x1e>
 80055bc:	6023      	str	r3, [r4, #0]
 80055be:	bd38      	pop	{r3, r4, r5, pc}
 80055c0:	20000560 	.word	0x20000560

080055c4 <__errno>:
 80055c4:	4b01      	ldr	r3, [pc, #4]	; (80055cc <__errno+0x8>)
 80055c6:	6818      	ldr	r0, [r3, #0]
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	200000f8 	.word	0x200000f8

080055d0 <__libc_init_array>:
 80055d0:	b570      	push	{r4, r5, r6, lr}
 80055d2:	4d0d      	ldr	r5, [pc, #52]	; (8005608 <__libc_init_array+0x38>)
 80055d4:	4c0d      	ldr	r4, [pc, #52]	; (800560c <__libc_init_array+0x3c>)
 80055d6:	1b64      	subs	r4, r4, r5
 80055d8:	10a4      	asrs	r4, r4, #2
 80055da:	2600      	movs	r6, #0
 80055dc:	42a6      	cmp	r6, r4
 80055de:	d109      	bne.n	80055f4 <__libc_init_array+0x24>
 80055e0:	4d0b      	ldr	r5, [pc, #44]	; (8005610 <__libc_init_array+0x40>)
 80055e2:	4c0c      	ldr	r4, [pc, #48]	; (8005614 <__libc_init_array+0x44>)
 80055e4:	f002 f80a 	bl	80075fc <_init>
 80055e8:	1b64      	subs	r4, r4, r5
 80055ea:	10a4      	asrs	r4, r4, #2
 80055ec:	2600      	movs	r6, #0
 80055ee:	42a6      	cmp	r6, r4
 80055f0:	d105      	bne.n	80055fe <__libc_init_array+0x2e>
 80055f2:	bd70      	pop	{r4, r5, r6, pc}
 80055f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f8:	4798      	blx	r3
 80055fa:	3601      	adds	r6, #1
 80055fc:	e7ee      	b.n	80055dc <__libc_init_array+0xc>
 80055fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005602:	4798      	blx	r3
 8005604:	3601      	adds	r6, #1
 8005606:	e7f2      	b.n	80055ee <__libc_init_array+0x1e>
 8005608:	08007a78 	.word	0x08007a78
 800560c:	08007a78 	.word	0x08007a78
 8005610:	08007a78 	.word	0x08007a78
 8005614:	08007a7c 	.word	0x08007a7c

08005618 <__retarget_lock_acquire_recursive>:
 8005618:	4770      	bx	lr

0800561a <__retarget_lock_release_recursive>:
 800561a:	4770      	bx	lr

0800561c <memcpy>:
 800561c:	440a      	add	r2, r1
 800561e:	4291      	cmp	r1, r2
 8005620:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005624:	d100      	bne.n	8005628 <memcpy+0xc>
 8005626:	4770      	bx	lr
 8005628:	b510      	push	{r4, lr}
 800562a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800562e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005632:	4291      	cmp	r1, r2
 8005634:	d1f9      	bne.n	800562a <memcpy+0xe>
 8005636:	bd10      	pop	{r4, pc}

08005638 <__assert_func>:
 8005638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800563a:	4614      	mov	r4, r2
 800563c:	461a      	mov	r2, r3
 800563e:	4b09      	ldr	r3, [pc, #36]	; (8005664 <__assert_func+0x2c>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4605      	mov	r5, r0
 8005644:	68d8      	ldr	r0, [r3, #12]
 8005646:	b14c      	cbz	r4, 800565c <__assert_func+0x24>
 8005648:	4b07      	ldr	r3, [pc, #28]	; (8005668 <__assert_func+0x30>)
 800564a:	9100      	str	r1, [sp, #0]
 800564c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005650:	4906      	ldr	r1, [pc, #24]	; (800566c <__assert_func+0x34>)
 8005652:	462b      	mov	r3, r5
 8005654:	f001 fe50 	bl	80072f8 <fiprintf>
 8005658:	f001 ff0e 	bl	8007478 <abort>
 800565c:	4b04      	ldr	r3, [pc, #16]	; (8005670 <__assert_func+0x38>)
 800565e:	461c      	mov	r4, r3
 8005660:	e7f3      	b.n	800564a <__assert_func+0x12>
 8005662:	bf00      	nop
 8005664:	200000f8 	.word	0x200000f8
 8005668:	08007736 	.word	0x08007736
 800566c:	08007743 	.word	0x08007743
 8005670:	08007771 	.word	0x08007771

08005674 <quorem>:
 8005674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005678:	6903      	ldr	r3, [r0, #16]
 800567a:	690c      	ldr	r4, [r1, #16]
 800567c:	42a3      	cmp	r3, r4
 800567e:	4607      	mov	r7, r0
 8005680:	db7e      	blt.n	8005780 <quorem+0x10c>
 8005682:	3c01      	subs	r4, #1
 8005684:	f101 0814 	add.w	r8, r1, #20
 8005688:	f100 0514 	add.w	r5, r0, #20
 800568c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005690:	9301      	str	r3, [sp, #4]
 8005692:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005696:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800569a:	3301      	adds	r3, #1
 800569c:	429a      	cmp	r2, r3
 800569e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80056a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80056a6:	fbb2 f6f3 	udiv	r6, r2, r3
 80056aa:	d331      	bcc.n	8005710 <quorem+0x9c>
 80056ac:	f04f 0e00 	mov.w	lr, #0
 80056b0:	4640      	mov	r0, r8
 80056b2:	46ac      	mov	ip, r5
 80056b4:	46f2      	mov	sl, lr
 80056b6:	f850 2b04 	ldr.w	r2, [r0], #4
 80056ba:	b293      	uxth	r3, r2
 80056bc:	fb06 e303 	mla	r3, r6, r3, lr
 80056c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80056c4:	0c1a      	lsrs	r2, r3, #16
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	ebaa 0303 	sub.w	r3, sl, r3
 80056cc:	f8dc a000 	ldr.w	sl, [ip]
 80056d0:	fa13 f38a 	uxtah	r3, r3, sl
 80056d4:	fb06 220e 	mla	r2, r6, lr, r2
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	9b00      	ldr	r3, [sp, #0]
 80056dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80056e0:	b292      	uxth	r2, r2
 80056e2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80056e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056ea:	f8bd 3000 	ldrh.w	r3, [sp]
 80056ee:	4581      	cmp	r9, r0
 80056f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056f4:	f84c 3b04 	str.w	r3, [ip], #4
 80056f8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80056fc:	d2db      	bcs.n	80056b6 <quorem+0x42>
 80056fe:	f855 300b 	ldr.w	r3, [r5, fp]
 8005702:	b92b      	cbnz	r3, 8005710 <quorem+0x9c>
 8005704:	9b01      	ldr	r3, [sp, #4]
 8005706:	3b04      	subs	r3, #4
 8005708:	429d      	cmp	r5, r3
 800570a:	461a      	mov	r2, r3
 800570c:	d32c      	bcc.n	8005768 <quorem+0xf4>
 800570e:	613c      	str	r4, [r7, #16]
 8005710:	4638      	mov	r0, r7
 8005712:	f001 f9a7 	bl	8006a64 <__mcmp>
 8005716:	2800      	cmp	r0, #0
 8005718:	db22      	blt.n	8005760 <quorem+0xec>
 800571a:	3601      	adds	r6, #1
 800571c:	4629      	mov	r1, r5
 800571e:	2000      	movs	r0, #0
 8005720:	f858 2b04 	ldr.w	r2, [r8], #4
 8005724:	f8d1 c000 	ldr.w	ip, [r1]
 8005728:	b293      	uxth	r3, r2
 800572a:	1ac3      	subs	r3, r0, r3
 800572c:	0c12      	lsrs	r2, r2, #16
 800572e:	fa13 f38c 	uxtah	r3, r3, ip
 8005732:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005736:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800573a:	b29b      	uxth	r3, r3
 800573c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005740:	45c1      	cmp	r9, r8
 8005742:	f841 3b04 	str.w	r3, [r1], #4
 8005746:	ea4f 4022 	mov.w	r0, r2, asr #16
 800574a:	d2e9      	bcs.n	8005720 <quorem+0xac>
 800574c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005750:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005754:	b922      	cbnz	r2, 8005760 <quorem+0xec>
 8005756:	3b04      	subs	r3, #4
 8005758:	429d      	cmp	r5, r3
 800575a:	461a      	mov	r2, r3
 800575c:	d30a      	bcc.n	8005774 <quorem+0x100>
 800575e:	613c      	str	r4, [r7, #16]
 8005760:	4630      	mov	r0, r6
 8005762:	b003      	add	sp, #12
 8005764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005768:	6812      	ldr	r2, [r2, #0]
 800576a:	3b04      	subs	r3, #4
 800576c:	2a00      	cmp	r2, #0
 800576e:	d1ce      	bne.n	800570e <quorem+0x9a>
 8005770:	3c01      	subs	r4, #1
 8005772:	e7c9      	b.n	8005708 <quorem+0x94>
 8005774:	6812      	ldr	r2, [r2, #0]
 8005776:	3b04      	subs	r3, #4
 8005778:	2a00      	cmp	r2, #0
 800577a:	d1f0      	bne.n	800575e <quorem+0xea>
 800577c:	3c01      	subs	r4, #1
 800577e:	e7eb      	b.n	8005758 <quorem+0xe4>
 8005780:	2000      	movs	r0, #0
 8005782:	e7ee      	b.n	8005762 <quorem+0xee>
 8005784:	0000      	movs	r0, r0
	...

08005788 <_dtoa_r>:
 8005788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800578c:	ed2d 8b04 	vpush	{d8-d9}
 8005790:	69c5      	ldr	r5, [r0, #28]
 8005792:	b093      	sub	sp, #76	; 0x4c
 8005794:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005798:	ec57 6b10 	vmov	r6, r7, d0
 800579c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80057a0:	9107      	str	r1, [sp, #28]
 80057a2:	4604      	mov	r4, r0
 80057a4:	920a      	str	r2, [sp, #40]	; 0x28
 80057a6:	930d      	str	r3, [sp, #52]	; 0x34
 80057a8:	b975      	cbnz	r5, 80057c8 <_dtoa_r+0x40>
 80057aa:	2010      	movs	r0, #16
 80057ac:	f000 fe2a 	bl	8006404 <malloc>
 80057b0:	4602      	mov	r2, r0
 80057b2:	61e0      	str	r0, [r4, #28]
 80057b4:	b920      	cbnz	r0, 80057c0 <_dtoa_r+0x38>
 80057b6:	4bae      	ldr	r3, [pc, #696]	; (8005a70 <_dtoa_r+0x2e8>)
 80057b8:	21ef      	movs	r1, #239	; 0xef
 80057ba:	48ae      	ldr	r0, [pc, #696]	; (8005a74 <_dtoa_r+0x2ec>)
 80057bc:	f7ff ff3c 	bl	8005638 <__assert_func>
 80057c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80057c4:	6005      	str	r5, [r0, #0]
 80057c6:	60c5      	str	r5, [r0, #12]
 80057c8:	69e3      	ldr	r3, [r4, #28]
 80057ca:	6819      	ldr	r1, [r3, #0]
 80057cc:	b151      	cbz	r1, 80057e4 <_dtoa_r+0x5c>
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	604a      	str	r2, [r1, #4]
 80057d2:	2301      	movs	r3, #1
 80057d4:	4093      	lsls	r3, r2
 80057d6:	608b      	str	r3, [r1, #8]
 80057d8:	4620      	mov	r0, r4
 80057da:	f000 ff07 	bl	80065ec <_Bfree>
 80057de:	69e3      	ldr	r3, [r4, #28]
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	1e3b      	subs	r3, r7, #0
 80057e6:	bfbb      	ittet	lt
 80057e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80057ec:	9303      	strlt	r3, [sp, #12]
 80057ee:	2300      	movge	r3, #0
 80057f0:	2201      	movlt	r2, #1
 80057f2:	bfac      	ite	ge
 80057f4:	f8c8 3000 	strge.w	r3, [r8]
 80057f8:	f8c8 2000 	strlt.w	r2, [r8]
 80057fc:	4b9e      	ldr	r3, [pc, #632]	; (8005a78 <_dtoa_r+0x2f0>)
 80057fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005802:	ea33 0308 	bics.w	r3, r3, r8
 8005806:	d11b      	bne.n	8005840 <_dtoa_r+0xb8>
 8005808:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800580a:	f242 730f 	movw	r3, #9999	; 0x270f
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005814:	4333      	orrs	r3, r6
 8005816:	f000 8593 	beq.w	8006340 <_dtoa_r+0xbb8>
 800581a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800581c:	b963      	cbnz	r3, 8005838 <_dtoa_r+0xb0>
 800581e:	4b97      	ldr	r3, [pc, #604]	; (8005a7c <_dtoa_r+0x2f4>)
 8005820:	e027      	b.n	8005872 <_dtoa_r+0xea>
 8005822:	4b97      	ldr	r3, [pc, #604]	; (8005a80 <_dtoa_r+0x2f8>)
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	3308      	adds	r3, #8
 8005828:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800582a:	6013      	str	r3, [r2, #0]
 800582c:	9800      	ldr	r0, [sp, #0]
 800582e:	b013      	add	sp, #76	; 0x4c
 8005830:	ecbd 8b04 	vpop	{d8-d9}
 8005834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005838:	4b90      	ldr	r3, [pc, #576]	; (8005a7c <_dtoa_r+0x2f4>)
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	3303      	adds	r3, #3
 800583e:	e7f3      	b.n	8005828 <_dtoa_r+0xa0>
 8005840:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005844:	2200      	movs	r2, #0
 8005846:	ec51 0b17 	vmov	r0, r1, d7
 800584a:	eeb0 8a47 	vmov.f32	s16, s14
 800584e:	eef0 8a67 	vmov.f32	s17, s15
 8005852:	2300      	movs	r3, #0
 8005854:	f7fb f938 	bl	8000ac8 <__aeabi_dcmpeq>
 8005858:	4681      	mov	r9, r0
 800585a:	b160      	cbz	r0, 8005876 <_dtoa_r+0xee>
 800585c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800585e:	2301      	movs	r3, #1
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 8568 	beq.w	800633a <_dtoa_r+0xbb2>
 800586a:	4b86      	ldr	r3, [pc, #536]	; (8005a84 <_dtoa_r+0x2fc>)
 800586c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	3b01      	subs	r3, #1
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	e7da      	b.n	800582c <_dtoa_r+0xa4>
 8005876:	aa10      	add	r2, sp, #64	; 0x40
 8005878:	a911      	add	r1, sp, #68	; 0x44
 800587a:	4620      	mov	r0, r4
 800587c:	eeb0 0a48 	vmov.f32	s0, s16
 8005880:	eef0 0a68 	vmov.f32	s1, s17
 8005884:	f001 f994 	bl	8006bb0 <__d2b>
 8005888:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800588c:	4682      	mov	sl, r0
 800588e:	2d00      	cmp	r5, #0
 8005890:	d07f      	beq.n	8005992 <_dtoa_r+0x20a>
 8005892:	ee18 3a90 	vmov	r3, s17
 8005896:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800589a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800589e:	ec51 0b18 	vmov	r0, r1, d8
 80058a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80058a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80058aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80058ae:	4619      	mov	r1, r3
 80058b0:	2200      	movs	r2, #0
 80058b2:	4b75      	ldr	r3, [pc, #468]	; (8005a88 <_dtoa_r+0x300>)
 80058b4:	f7fa fce8 	bl	8000288 <__aeabi_dsub>
 80058b8:	a367      	add	r3, pc, #412	; (adr r3, 8005a58 <_dtoa_r+0x2d0>)
 80058ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058be:	f7fa fe9b 	bl	80005f8 <__aeabi_dmul>
 80058c2:	a367      	add	r3, pc, #412	; (adr r3, 8005a60 <_dtoa_r+0x2d8>)
 80058c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c8:	f7fa fce0 	bl	800028c <__adddf3>
 80058cc:	4606      	mov	r6, r0
 80058ce:	4628      	mov	r0, r5
 80058d0:	460f      	mov	r7, r1
 80058d2:	f7fa fe27 	bl	8000524 <__aeabi_i2d>
 80058d6:	a364      	add	r3, pc, #400	; (adr r3, 8005a68 <_dtoa_r+0x2e0>)
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	f7fa fe8c 	bl	80005f8 <__aeabi_dmul>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4630      	mov	r0, r6
 80058e6:	4639      	mov	r1, r7
 80058e8:	f7fa fcd0 	bl	800028c <__adddf3>
 80058ec:	4606      	mov	r6, r0
 80058ee:	460f      	mov	r7, r1
 80058f0:	f7fb f932 	bl	8000b58 <__aeabi_d2iz>
 80058f4:	2200      	movs	r2, #0
 80058f6:	4683      	mov	fp, r0
 80058f8:	2300      	movs	r3, #0
 80058fa:	4630      	mov	r0, r6
 80058fc:	4639      	mov	r1, r7
 80058fe:	f7fb f8ed 	bl	8000adc <__aeabi_dcmplt>
 8005902:	b148      	cbz	r0, 8005918 <_dtoa_r+0x190>
 8005904:	4658      	mov	r0, fp
 8005906:	f7fa fe0d 	bl	8000524 <__aeabi_i2d>
 800590a:	4632      	mov	r2, r6
 800590c:	463b      	mov	r3, r7
 800590e:	f7fb f8db 	bl	8000ac8 <__aeabi_dcmpeq>
 8005912:	b908      	cbnz	r0, 8005918 <_dtoa_r+0x190>
 8005914:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005918:	f1bb 0f16 	cmp.w	fp, #22
 800591c:	d857      	bhi.n	80059ce <_dtoa_r+0x246>
 800591e:	4b5b      	ldr	r3, [pc, #364]	; (8005a8c <_dtoa_r+0x304>)
 8005920:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005928:	ec51 0b18 	vmov	r0, r1, d8
 800592c:	f7fb f8d6 	bl	8000adc <__aeabi_dcmplt>
 8005930:	2800      	cmp	r0, #0
 8005932:	d04e      	beq.n	80059d2 <_dtoa_r+0x24a>
 8005934:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005938:	2300      	movs	r3, #0
 800593a:	930c      	str	r3, [sp, #48]	; 0x30
 800593c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800593e:	1b5b      	subs	r3, r3, r5
 8005940:	1e5a      	subs	r2, r3, #1
 8005942:	bf45      	ittet	mi
 8005944:	f1c3 0301 	rsbmi	r3, r3, #1
 8005948:	9305      	strmi	r3, [sp, #20]
 800594a:	2300      	movpl	r3, #0
 800594c:	2300      	movmi	r3, #0
 800594e:	9206      	str	r2, [sp, #24]
 8005950:	bf54      	ite	pl
 8005952:	9305      	strpl	r3, [sp, #20]
 8005954:	9306      	strmi	r3, [sp, #24]
 8005956:	f1bb 0f00 	cmp.w	fp, #0
 800595a:	db3c      	blt.n	80059d6 <_dtoa_r+0x24e>
 800595c:	9b06      	ldr	r3, [sp, #24]
 800595e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005962:	445b      	add	r3, fp
 8005964:	9306      	str	r3, [sp, #24]
 8005966:	2300      	movs	r3, #0
 8005968:	9308      	str	r3, [sp, #32]
 800596a:	9b07      	ldr	r3, [sp, #28]
 800596c:	2b09      	cmp	r3, #9
 800596e:	d868      	bhi.n	8005a42 <_dtoa_r+0x2ba>
 8005970:	2b05      	cmp	r3, #5
 8005972:	bfc4      	itt	gt
 8005974:	3b04      	subgt	r3, #4
 8005976:	9307      	strgt	r3, [sp, #28]
 8005978:	9b07      	ldr	r3, [sp, #28]
 800597a:	f1a3 0302 	sub.w	r3, r3, #2
 800597e:	bfcc      	ite	gt
 8005980:	2500      	movgt	r5, #0
 8005982:	2501      	movle	r5, #1
 8005984:	2b03      	cmp	r3, #3
 8005986:	f200 8085 	bhi.w	8005a94 <_dtoa_r+0x30c>
 800598a:	e8df f003 	tbb	[pc, r3]
 800598e:	3b2e      	.short	0x3b2e
 8005990:	5839      	.short	0x5839
 8005992:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005996:	441d      	add	r5, r3
 8005998:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800599c:	2b20      	cmp	r3, #32
 800599e:	bfc1      	itttt	gt
 80059a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80059a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80059a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80059ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 80059b0:	bfd6      	itet	le
 80059b2:	f1c3 0320 	rsble	r3, r3, #32
 80059b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80059ba:	fa06 f003 	lslle.w	r0, r6, r3
 80059be:	f7fa fda1 	bl	8000504 <__aeabi_ui2d>
 80059c2:	2201      	movs	r2, #1
 80059c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80059c8:	3d01      	subs	r5, #1
 80059ca:	920e      	str	r2, [sp, #56]	; 0x38
 80059cc:	e76f      	b.n	80058ae <_dtoa_r+0x126>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e7b3      	b.n	800593a <_dtoa_r+0x1b2>
 80059d2:	900c      	str	r0, [sp, #48]	; 0x30
 80059d4:	e7b2      	b.n	800593c <_dtoa_r+0x1b4>
 80059d6:	9b05      	ldr	r3, [sp, #20]
 80059d8:	eba3 030b 	sub.w	r3, r3, fp
 80059dc:	9305      	str	r3, [sp, #20]
 80059de:	f1cb 0300 	rsb	r3, fp, #0
 80059e2:	9308      	str	r3, [sp, #32]
 80059e4:	2300      	movs	r3, #0
 80059e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80059e8:	e7bf      	b.n	800596a <_dtoa_r+0x1e2>
 80059ea:	2300      	movs	r3, #0
 80059ec:	9309      	str	r3, [sp, #36]	; 0x24
 80059ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	dc52      	bgt.n	8005a9a <_dtoa_r+0x312>
 80059f4:	2301      	movs	r3, #1
 80059f6:	9301      	str	r3, [sp, #4]
 80059f8:	9304      	str	r3, [sp, #16]
 80059fa:	461a      	mov	r2, r3
 80059fc:	920a      	str	r2, [sp, #40]	; 0x28
 80059fe:	e00b      	b.n	8005a18 <_dtoa_r+0x290>
 8005a00:	2301      	movs	r3, #1
 8005a02:	e7f3      	b.n	80059ec <_dtoa_r+0x264>
 8005a04:	2300      	movs	r3, #0
 8005a06:	9309      	str	r3, [sp, #36]	; 0x24
 8005a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a0a:	445b      	add	r3, fp
 8005a0c:	9301      	str	r3, [sp, #4]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	9304      	str	r3, [sp, #16]
 8005a14:	bfb8      	it	lt
 8005a16:	2301      	movlt	r3, #1
 8005a18:	69e0      	ldr	r0, [r4, #28]
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	2204      	movs	r2, #4
 8005a1e:	f102 0614 	add.w	r6, r2, #20
 8005a22:	429e      	cmp	r6, r3
 8005a24:	d93d      	bls.n	8005aa2 <_dtoa_r+0x31a>
 8005a26:	6041      	str	r1, [r0, #4]
 8005a28:	4620      	mov	r0, r4
 8005a2a:	f000 fd9f 	bl	800656c <_Balloc>
 8005a2e:	9000      	str	r0, [sp, #0]
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d139      	bne.n	8005aa8 <_dtoa_r+0x320>
 8005a34:	4b16      	ldr	r3, [pc, #88]	; (8005a90 <_dtoa_r+0x308>)
 8005a36:	4602      	mov	r2, r0
 8005a38:	f240 11af 	movw	r1, #431	; 0x1af
 8005a3c:	e6bd      	b.n	80057ba <_dtoa_r+0x32>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e7e1      	b.n	8005a06 <_dtoa_r+0x27e>
 8005a42:	2501      	movs	r5, #1
 8005a44:	2300      	movs	r3, #0
 8005a46:	9307      	str	r3, [sp, #28]
 8005a48:	9509      	str	r5, [sp, #36]	; 0x24
 8005a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a4e:	9301      	str	r3, [sp, #4]
 8005a50:	9304      	str	r3, [sp, #16]
 8005a52:	2200      	movs	r2, #0
 8005a54:	2312      	movs	r3, #18
 8005a56:	e7d1      	b.n	80059fc <_dtoa_r+0x274>
 8005a58:	636f4361 	.word	0x636f4361
 8005a5c:	3fd287a7 	.word	0x3fd287a7
 8005a60:	8b60c8b3 	.word	0x8b60c8b3
 8005a64:	3fc68a28 	.word	0x3fc68a28
 8005a68:	509f79fb 	.word	0x509f79fb
 8005a6c:	3fd34413 	.word	0x3fd34413
 8005a70:	0800777f 	.word	0x0800777f
 8005a74:	08007796 	.word	0x08007796
 8005a78:	7ff00000 	.word	0x7ff00000
 8005a7c:	0800777b 	.word	0x0800777b
 8005a80:	08007772 	.word	0x08007772
 8005a84:	08007713 	.word	0x08007713
 8005a88:	3ff80000 	.word	0x3ff80000
 8005a8c:	08007880 	.word	0x08007880
 8005a90:	080077ee 	.word	0x080077ee
 8005a94:	2301      	movs	r3, #1
 8005a96:	9309      	str	r3, [sp, #36]	; 0x24
 8005a98:	e7d7      	b.n	8005a4a <_dtoa_r+0x2c2>
 8005a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a9c:	9301      	str	r3, [sp, #4]
 8005a9e:	9304      	str	r3, [sp, #16]
 8005aa0:	e7ba      	b.n	8005a18 <_dtoa_r+0x290>
 8005aa2:	3101      	adds	r1, #1
 8005aa4:	0052      	lsls	r2, r2, #1
 8005aa6:	e7ba      	b.n	8005a1e <_dtoa_r+0x296>
 8005aa8:	69e3      	ldr	r3, [r4, #28]
 8005aaa:	9a00      	ldr	r2, [sp, #0]
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	9b04      	ldr	r3, [sp, #16]
 8005ab0:	2b0e      	cmp	r3, #14
 8005ab2:	f200 80a8 	bhi.w	8005c06 <_dtoa_r+0x47e>
 8005ab6:	2d00      	cmp	r5, #0
 8005ab8:	f000 80a5 	beq.w	8005c06 <_dtoa_r+0x47e>
 8005abc:	f1bb 0f00 	cmp.w	fp, #0
 8005ac0:	dd38      	ble.n	8005b34 <_dtoa_r+0x3ac>
 8005ac2:	4bc0      	ldr	r3, [pc, #768]	; (8005dc4 <_dtoa_r+0x63c>)
 8005ac4:	f00b 020f 	and.w	r2, fp, #15
 8005ac8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005acc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005ad0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005ad4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005ad8:	d019      	beq.n	8005b0e <_dtoa_r+0x386>
 8005ada:	4bbb      	ldr	r3, [pc, #748]	; (8005dc8 <_dtoa_r+0x640>)
 8005adc:	ec51 0b18 	vmov	r0, r1, d8
 8005ae0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ae4:	f7fa feb2 	bl	800084c <__aeabi_ddiv>
 8005ae8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005aec:	f008 080f 	and.w	r8, r8, #15
 8005af0:	2503      	movs	r5, #3
 8005af2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005dc8 <_dtoa_r+0x640>
 8005af6:	f1b8 0f00 	cmp.w	r8, #0
 8005afa:	d10a      	bne.n	8005b12 <_dtoa_r+0x38a>
 8005afc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b00:	4632      	mov	r2, r6
 8005b02:	463b      	mov	r3, r7
 8005b04:	f7fa fea2 	bl	800084c <__aeabi_ddiv>
 8005b08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b0c:	e02b      	b.n	8005b66 <_dtoa_r+0x3de>
 8005b0e:	2502      	movs	r5, #2
 8005b10:	e7ef      	b.n	8005af2 <_dtoa_r+0x36a>
 8005b12:	f018 0f01 	tst.w	r8, #1
 8005b16:	d008      	beq.n	8005b2a <_dtoa_r+0x3a2>
 8005b18:	4630      	mov	r0, r6
 8005b1a:	4639      	mov	r1, r7
 8005b1c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005b20:	f7fa fd6a 	bl	80005f8 <__aeabi_dmul>
 8005b24:	3501      	adds	r5, #1
 8005b26:	4606      	mov	r6, r0
 8005b28:	460f      	mov	r7, r1
 8005b2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005b2e:	f109 0908 	add.w	r9, r9, #8
 8005b32:	e7e0      	b.n	8005af6 <_dtoa_r+0x36e>
 8005b34:	f000 809f 	beq.w	8005c76 <_dtoa_r+0x4ee>
 8005b38:	f1cb 0600 	rsb	r6, fp, #0
 8005b3c:	4ba1      	ldr	r3, [pc, #644]	; (8005dc4 <_dtoa_r+0x63c>)
 8005b3e:	4fa2      	ldr	r7, [pc, #648]	; (8005dc8 <_dtoa_r+0x640>)
 8005b40:	f006 020f 	and.w	r2, r6, #15
 8005b44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4c:	ec51 0b18 	vmov	r0, r1, d8
 8005b50:	f7fa fd52 	bl	80005f8 <__aeabi_dmul>
 8005b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b58:	1136      	asrs	r6, r6, #4
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	2502      	movs	r5, #2
 8005b5e:	2e00      	cmp	r6, #0
 8005b60:	d17e      	bne.n	8005c60 <_dtoa_r+0x4d8>
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1d0      	bne.n	8005b08 <_dtoa_r+0x380>
 8005b66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b68:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 8084 	beq.w	8005c7a <_dtoa_r+0x4f2>
 8005b72:	4b96      	ldr	r3, [pc, #600]	; (8005dcc <_dtoa_r+0x644>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	4640      	mov	r0, r8
 8005b78:	4649      	mov	r1, r9
 8005b7a:	f7fa ffaf 	bl	8000adc <__aeabi_dcmplt>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d07b      	beq.n	8005c7a <_dtoa_r+0x4f2>
 8005b82:	9b04      	ldr	r3, [sp, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d078      	beq.n	8005c7a <_dtoa_r+0x4f2>
 8005b88:	9b01      	ldr	r3, [sp, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	dd39      	ble.n	8005c02 <_dtoa_r+0x47a>
 8005b8e:	4b90      	ldr	r3, [pc, #576]	; (8005dd0 <_dtoa_r+0x648>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	4640      	mov	r0, r8
 8005b94:	4649      	mov	r1, r9
 8005b96:	f7fa fd2f 	bl	80005f8 <__aeabi_dmul>
 8005b9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b9e:	9e01      	ldr	r6, [sp, #4]
 8005ba0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8005ba4:	3501      	adds	r5, #1
 8005ba6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005baa:	4628      	mov	r0, r5
 8005bac:	f7fa fcba 	bl	8000524 <__aeabi_i2d>
 8005bb0:	4642      	mov	r2, r8
 8005bb2:	464b      	mov	r3, r9
 8005bb4:	f7fa fd20 	bl	80005f8 <__aeabi_dmul>
 8005bb8:	4b86      	ldr	r3, [pc, #536]	; (8005dd4 <_dtoa_r+0x64c>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f7fa fb66 	bl	800028c <__adddf3>
 8005bc0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005bc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bc8:	9303      	str	r3, [sp, #12]
 8005bca:	2e00      	cmp	r6, #0
 8005bcc:	d158      	bne.n	8005c80 <_dtoa_r+0x4f8>
 8005bce:	4b82      	ldr	r3, [pc, #520]	; (8005dd8 <_dtoa_r+0x650>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	4640      	mov	r0, r8
 8005bd4:	4649      	mov	r1, r9
 8005bd6:	f7fa fb57 	bl	8000288 <__aeabi_dsub>
 8005bda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bde:	4680      	mov	r8, r0
 8005be0:	4689      	mov	r9, r1
 8005be2:	f7fa ff99 	bl	8000b18 <__aeabi_dcmpgt>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	f040 8296 	bne.w	8006118 <_dtoa_r+0x990>
 8005bec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005bf0:	4640      	mov	r0, r8
 8005bf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	f7fa ff70 	bl	8000adc <__aeabi_dcmplt>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	f040 8289 	bne.w	8006114 <_dtoa_r+0x98c>
 8005c02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005c06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f2c0 814e 	blt.w	8005eaa <_dtoa_r+0x722>
 8005c0e:	f1bb 0f0e 	cmp.w	fp, #14
 8005c12:	f300 814a 	bgt.w	8005eaa <_dtoa_r+0x722>
 8005c16:	4b6b      	ldr	r3, [pc, #428]	; (8005dc4 <_dtoa_r+0x63c>)
 8005c18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005c1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f280 80dc 	bge.w	8005de0 <_dtoa_r+0x658>
 8005c28:	9b04      	ldr	r3, [sp, #16]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f300 80d8 	bgt.w	8005de0 <_dtoa_r+0x658>
 8005c30:	f040 826f 	bne.w	8006112 <_dtoa_r+0x98a>
 8005c34:	4b68      	ldr	r3, [pc, #416]	; (8005dd8 <_dtoa_r+0x650>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	4640      	mov	r0, r8
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	f7fa fcdc 	bl	80005f8 <__aeabi_dmul>
 8005c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c44:	f7fa ff5e 	bl	8000b04 <__aeabi_dcmpge>
 8005c48:	9e04      	ldr	r6, [sp, #16]
 8005c4a:	4637      	mov	r7, r6
 8005c4c:	2800      	cmp	r0, #0
 8005c4e:	f040 8245 	bne.w	80060dc <_dtoa_r+0x954>
 8005c52:	9d00      	ldr	r5, [sp, #0]
 8005c54:	2331      	movs	r3, #49	; 0x31
 8005c56:	f805 3b01 	strb.w	r3, [r5], #1
 8005c5a:	f10b 0b01 	add.w	fp, fp, #1
 8005c5e:	e241      	b.n	80060e4 <_dtoa_r+0x95c>
 8005c60:	07f2      	lsls	r2, r6, #31
 8005c62:	d505      	bpl.n	8005c70 <_dtoa_r+0x4e8>
 8005c64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c68:	f7fa fcc6 	bl	80005f8 <__aeabi_dmul>
 8005c6c:	3501      	adds	r5, #1
 8005c6e:	2301      	movs	r3, #1
 8005c70:	1076      	asrs	r6, r6, #1
 8005c72:	3708      	adds	r7, #8
 8005c74:	e773      	b.n	8005b5e <_dtoa_r+0x3d6>
 8005c76:	2502      	movs	r5, #2
 8005c78:	e775      	b.n	8005b66 <_dtoa_r+0x3de>
 8005c7a:	9e04      	ldr	r6, [sp, #16]
 8005c7c:	465f      	mov	r7, fp
 8005c7e:	e792      	b.n	8005ba6 <_dtoa_r+0x41e>
 8005c80:	9900      	ldr	r1, [sp, #0]
 8005c82:	4b50      	ldr	r3, [pc, #320]	; (8005dc4 <_dtoa_r+0x63c>)
 8005c84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c88:	4431      	add	r1, r6
 8005c8a:	9102      	str	r1, [sp, #8]
 8005c8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c8e:	eeb0 9a47 	vmov.f32	s18, s14
 8005c92:	eef0 9a67 	vmov.f32	s19, s15
 8005c96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005c9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c9e:	2900      	cmp	r1, #0
 8005ca0:	d044      	beq.n	8005d2c <_dtoa_r+0x5a4>
 8005ca2:	494e      	ldr	r1, [pc, #312]	; (8005ddc <_dtoa_r+0x654>)
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	f7fa fdd1 	bl	800084c <__aeabi_ddiv>
 8005caa:	ec53 2b19 	vmov	r2, r3, d9
 8005cae:	f7fa faeb 	bl	8000288 <__aeabi_dsub>
 8005cb2:	9d00      	ldr	r5, [sp, #0]
 8005cb4:	ec41 0b19 	vmov	d9, r0, r1
 8005cb8:	4649      	mov	r1, r9
 8005cba:	4640      	mov	r0, r8
 8005cbc:	f7fa ff4c 	bl	8000b58 <__aeabi_d2iz>
 8005cc0:	4606      	mov	r6, r0
 8005cc2:	f7fa fc2f 	bl	8000524 <__aeabi_i2d>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4640      	mov	r0, r8
 8005ccc:	4649      	mov	r1, r9
 8005cce:	f7fa fadb 	bl	8000288 <__aeabi_dsub>
 8005cd2:	3630      	adds	r6, #48	; 0x30
 8005cd4:	f805 6b01 	strb.w	r6, [r5], #1
 8005cd8:	ec53 2b19 	vmov	r2, r3, d9
 8005cdc:	4680      	mov	r8, r0
 8005cde:	4689      	mov	r9, r1
 8005ce0:	f7fa fefc 	bl	8000adc <__aeabi_dcmplt>
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	d164      	bne.n	8005db2 <_dtoa_r+0x62a>
 8005ce8:	4642      	mov	r2, r8
 8005cea:	464b      	mov	r3, r9
 8005cec:	4937      	ldr	r1, [pc, #220]	; (8005dcc <_dtoa_r+0x644>)
 8005cee:	2000      	movs	r0, #0
 8005cf0:	f7fa faca 	bl	8000288 <__aeabi_dsub>
 8005cf4:	ec53 2b19 	vmov	r2, r3, d9
 8005cf8:	f7fa fef0 	bl	8000adc <__aeabi_dcmplt>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	f040 80b6 	bne.w	8005e6e <_dtoa_r+0x6e6>
 8005d02:	9b02      	ldr	r3, [sp, #8]
 8005d04:	429d      	cmp	r5, r3
 8005d06:	f43f af7c 	beq.w	8005c02 <_dtoa_r+0x47a>
 8005d0a:	4b31      	ldr	r3, [pc, #196]	; (8005dd0 <_dtoa_r+0x648>)
 8005d0c:	ec51 0b19 	vmov	r0, r1, d9
 8005d10:	2200      	movs	r2, #0
 8005d12:	f7fa fc71 	bl	80005f8 <__aeabi_dmul>
 8005d16:	4b2e      	ldr	r3, [pc, #184]	; (8005dd0 <_dtoa_r+0x648>)
 8005d18:	ec41 0b19 	vmov	d9, r0, r1
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	4640      	mov	r0, r8
 8005d20:	4649      	mov	r1, r9
 8005d22:	f7fa fc69 	bl	80005f8 <__aeabi_dmul>
 8005d26:	4680      	mov	r8, r0
 8005d28:	4689      	mov	r9, r1
 8005d2a:	e7c5      	b.n	8005cb8 <_dtoa_r+0x530>
 8005d2c:	ec51 0b17 	vmov	r0, r1, d7
 8005d30:	f7fa fc62 	bl	80005f8 <__aeabi_dmul>
 8005d34:	9b02      	ldr	r3, [sp, #8]
 8005d36:	9d00      	ldr	r5, [sp, #0]
 8005d38:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d3a:	ec41 0b19 	vmov	d9, r0, r1
 8005d3e:	4649      	mov	r1, r9
 8005d40:	4640      	mov	r0, r8
 8005d42:	f7fa ff09 	bl	8000b58 <__aeabi_d2iz>
 8005d46:	4606      	mov	r6, r0
 8005d48:	f7fa fbec 	bl	8000524 <__aeabi_i2d>
 8005d4c:	3630      	adds	r6, #48	; 0x30
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4640      	mov	r0, r8
 8005d54:	4649      	mov	r1, r9
 8005d56:	f7fa fa97 	bl	8000288 <__aeabi_dsub>
 8005d5a:	f805 6b01 	strb.w	r6, [r5], #1
 8005d5e:	9b02      	ldr	r3, [sp, #8]
 8005d60:	429d      	cmp	r5, r3
 8005d62:	4680      	mov	r8, r0
 8005d64:	4689      	mov	r9, r1
 8005d66:	f04f 0200 	mov.w	r2, #0
 8005d6a:	d124      	bne.n	8005db6 <_dtoa_r+0x62e>
 8005d6c:	4b1b      	ldr	r3, [pc, #108]	; (8005ddc <_dtoa_r+0x654>)
 8005d6e:	ec51 0b19 	vmov	r0, r1, d9
 8005d72:	f7fa fa8b 	bl	800028c <__adddf3>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4640      	mov	r0, r8
 8005d7c:	4649      	mov	r1, r9
 8005d7e:	f7fa fecb 	bl	8000b18 <__aeabi_dcmpgt>
 8005d82:	2800      	cmp	r0, #0
 8005d84:	d173      	bne.n	8005e6e <_dtoa_r+0x6e6>
 8005d86:	ec53 2b19 	vmov	r2, r3, d9
 8005d8a:	4914      	ldr	r1, [pc, #80]	; (8005ddc <_dtoa_r+0x654>)
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	f7fa fa7b 	bl	8000288 <__aeabi_dsub>
 8005d92:	4602      	mov	r2, r0
 8005d94:	460b      	mov	r3, r1
 8005d96:	4640      	mov	r0, r8
 8005d98:	4649      	mov	r1, r9
 8005d9a:	f7fa fe9f 	bl	8000adc <__aeabi_dcmplt>
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	f43f af2f 	beq.w	8005c02 <_dtoa_r+0x47a>
 8005da4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005da6:	1e6b      	subs	r3, r5, #1
 8005da8:	930f      	str	r3, [sp, #60]	; 0x3c
 8005daa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005dae:	2b30      	cmp	r3, #48	; 0x30
 8005db0:	d0f8      	beq.n	8005da4 <_dtoa_r+0x61c>
 8005db2:	46bb      	mov	fp, r7
 8005db4:	e04a      	b.n	8005e4c <_dtoa_r+0x6c4>
 8005db6:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <_dtoa_r+0x648>)
 8005db8:	f7fa fc1e 	bl	80005f8 <__aeabi_dmul>
 8005dbc:	4680      	mov	r8, r0
 8005dbe:	4689      	mov	r9, r1
 8005dc0:	e7bd      	b.n	8005d3e <_dtoa_r+0x5b6>
 8005dc2:	bf00      	nop
 8005dc4:	08007880 	.word	0x08007880
 8005dc8:	08007858 	.word	0x08007858
 8005dcc:	3ff00000 	.word	0x3ff00000
 8005dd0:	40240000 	.word	0x40240000
 8005dd4:	401c0000 	.word	0x401c0000
 8005dd8:	40140000 	.word	0x40140000
 8005ddc:	3fe00000 	.word	0x3fe00000
 8005de0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005de4:	9d00      	ldr	r5, [sp, #0]
 8005de6:	4642      	mov	r2, r8
 8005de8:	464b      	mov	r3, r9
 8005dea:	4630      	mov	r0, r6
 8005dec:	4639      	mov	r1, r7
 8005dee:	f7fa fd2d 	bl	800084c <__aeabi_ddiv>
 8005df2:	f7fa feb1 	bl	8000b58 <__aeabi_d2iz>
 8005df6:	9001      	str	r0, [sp, #4]
 8005df8:	f7fa fb94 	bl	8000524 <__aeabi_i2d>
 8005dfc:	4642      	mov	r2, r8
 8005dfe:	464b      	mov	r3, r9
 8005e00:	f7fa fbfa 	bl	80005f8 <__aeabi_dmul>
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4630      	mov	r0, r6
 8005e0a:	4639      	mov	r1, r7
 8005e0c:	f7fa fa3c 	bl	8000288 <__aeabi_dsub>
 8005e10:	9e01      	ldr	r6, [sp, #4]
 8005e12:	9f04      	ldr	r7, [sp, #16]
 8005e14:	3630      	adds	r6, #48	; 0x30
 8005e16:	f805 6b01 	strb.w	r6, [r5], #1
 8005e1a:	9e00      	ldr	r6, [sp, #0]
 8005e1c:	1bae      	subs	r6, r5, r6
 8005e1e:	42b7      	cmp	r7, r6
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	d134      	bne.n	8005e90 <_dtoa_r+0x708>
 8005e26:	f7fa fa31 	bl	800028c <__adddf3>
 8005e2a:	4642      	mov	r2, r8
 8005e2c:	464b      	mov	r3, r9
 8005e2e:	4606      	mov	r6, r0
 8005e30:	460f      	mov	r7, r1
 8005e32:	f7fa fe71 	bl	8000b18 <__aeabi_dcmpgt>
 8005e36:	b9c8      	cbnz	r0, 8005e6c <_dtoa_r+0x6e4>
 8005e38:	4642      	mov	r2, r8
 8005e3a:	464b      	mov	r3, r9
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	4639      	mov	r1, r7
 8005e40:	f7fa fe42 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e44:	b110      	cbz	r0, 8005e4c <_dtoa_r+0x6c4>
 8005e46:	9b01      	ldr	r3, [sp, #4]
 8005e48:	07db      	lsls	r3, r3, #31
 8005e4a:	d40f      	bmi.n	8005e6c <_dtoa_r+0x6e4>
 8005e4c:	4651      	mov	r1, sl
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f000 fbcc 	bl	80065ec <_Bfree>
 8005e54:	2300      	movs	r3, #0
 8005e56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e58:	702b      	strb	r3, [r5, #0]
 8005e5a:	f10b 0301 	add.w	r3, fp, #1
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f43f ace2 	beq.w	800582c <_dtoa_r+0xa4>
 8005e68:	601d      	str	r5, [r3, #0]
 8005e6a:	e4df      	b.n	800582c <_dtoa_r+0xa4>
 8005e6c:	465f      	mov	r7, fp
 8005e6e:	462b      	mov	r3, r5
 8005e70:	461d      	mov	r5, r3
 8005e72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e76:	2a39      	cmp	r2, #57	; 0x39
 8005e78:	d106      	bne.n	8005e88 <_dtoa_r+0x700>
 8005e7a:	9a00      	ldr	r2, [sp, #0]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d1f7      	bne.n	8005e70 <_dtoa_r+0x6e8>
 8005e80:	9900      	ldr	r1, [sp, #0]
 8005e82:	2230      	movs	r2, #48	; 0x30
 8005e84:	3701      	adds	r7, #1
 8005e86:	700a      	strb	r2, [r1, #0]
 8005e88:	781a      	ldrb	r2, [r3, #0]
 8005e8a:	3201      	adds	r2, #1
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	e790      	b.n	8005db2 <_dtoa_r+0x62a>
 8005e90:	4ba3      	ldr	r3, [pc, #652]	; (8006120 <_dtoa_r+0x998>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	f7fa fbb0 	bl	80005f8 <__aeabi_dmul>
 8005e98:	2200      	movs	r2, #0
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	4606      	mov	r6, r0
 8005e9e:	460f      	mov	r7, r1
 8005ea0:	f7fa fe12 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	d09e      	beq.n	8005de6 <_dtoa_r+0x65e>
 8005ea8:	e7d0      	b.n	8005e4c <_dtoa_r+0x6c4>
 8005eaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eac:	2a00      	cmp	r2, #0
 8005eae:	f000 80ca 	beq.w	8006046 <_dtoa_r+0x8be>
 8005eb2:	9a07      	ldr	r2, [sp, #28]
 8005eb4:	2a01      	cmp	r2, #1
 8005eb6:	f300 80ad 	bgt.w	8006014 <_dtoa_r+0x88c>
 8005eba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ebc:	2a00      	cmp	r2, #0
 8005ebe:	f000 80a5 	beq.w	800600c <_dtoa_r+0x884>
 8005ec2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ec6:	9e08      	ldr	r6, [sp, #32]
 8005ec8:	9d05      	ldr	r5, [sp, #20]
 8005eca:	9a05      	ldr	r2, [sp, #20]
 8005ecc:	441a      	add	r2, r3
 8005ece:	9205      	str	r2, [sp, #20]
 8005ed0:	9a06      	ldr	r2, [sp, #24]
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	441a      	add	r2, r3
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	9206      	str	r2, [sp, #24]
 8005eda:	f000 fc3d 	bl	8006758 <__i2b>
 8005ede:	4607      	mov	r7, r0
 8005ee0:	b165      	cbz	r5, 8005efc <_dtoa_r+0x774>
 8005ee2:	9b06      	ldr	r3, [sp, #24]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	dd09      	ble.n	8005efc <_dtoa_r+0x774>
 8005ee8:	42ab      	cmp	r3, r5
 8005eea:	9a05      	ldr	r2, [sp, #20]
 8005eec:	bfa8      	it	ge
 8005eee:	462b      	movge	r3, r5
 8005ef0:	1ad2      	subs	r2, r2, r3
 8005ef2:	9205      	str	r2, [sp, #20]
 8005ef4:	9a06      	ldr	r2, [sp, #24]
 8005ef6:	1aed      	subs	r5, r5, r3
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	9306      	str	r3, [sp, #24]
 8005efc:	9b08      	ldr	r3, [sp, #32]
 8005efe:	b1f3      	cbz	r3, 8005f3e <_dtoa_r+0x7b6>
 8005f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 80a3 	beq.w	800604e <_dtoa_r+0x8c6>
 8005f08:	2e00      	cmp	r6, #0
 8005f0a:	dd10      	ble.n	8005f2e <_dtoa_r+0x7a6>
 8005f0c:	4639      	mov	r1, r7
 8005f0e:	4632      	mov	r2, r6
 8005f10:	4620      	mov	r0, r4
 8005f12:	f000 fce1 	bl	80068d8 <__pow5mult>
 8005f16:	4652      	mov	r2, sl
 8005f18:	4601      	mov	r1, r0
 8005f1a:	4607      	mov	r7, r0
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	f000 fc31 	bl	8006784 <__multiply>
 8005f22:	4651      	mov	r1, sl
 8005f24:	4680      	mov	r8, r0
 8005f26:	4620      	mov	r0, r4
 8005f28:	f000 fb60 	bl	80065ec <_Bfree>
 8005f2c:	46c2      	mov	sl, r8
 8005f2e:	9b08      	ldr	r3, [sp, #32]
 8005f30:	1b9a      	subs	r2, r3, r6
 8005f32:	d004      	beq.n	8005f3e <_dtoa_r+0x7b6>
 8005f34:	4651      	mov	r1, sl
 8005f36:	4620      	mov	r0, r4
 8005f38:	f000 fcce 	bl	80068d8 <__pow5mult>
 8005f3c:	4682      	mov	sl, r0
 8005f3e:	2101      	movs	r1, #1
 8005f40:	4620      	mov	r0, r4
 8005f42:	f000 fc09 	bl	8006758 <__i2b>
 8005f46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	4606      	mov	r6, r0
 8005f4c:	f340 8081 	ble.w	8006052 <_dtoa_r+0x8ca>
 8005f50:	461a      	mov	r2, r3
 8005f52:	4601      	mov	r1, r0
 8005f54:	4620      	mov	r0, r4
 8005f56:	f000 fcbf 	bl	80068d8 <__pow5mult>
 8005f5a:	9b07      	ldr	r3, [sp, #28]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	4606      	mov	r6, r0
 8005f60:	dd7a      	ble.n	8006058 <_dtoa_r+0x8d0>
 8005f62:	f04f 0800 	mov.w	r8, #0
 8005f66:	6933      	ldr	r3, [r6, #16]
 8005f68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005f6c:	6918      	ldr	r0, [r3, #16]
 8005f6e:	f000 fba5 	bl	80066bc <__hi0bits>
 8005f72:	f1c0 0020 	rsb	r0, r0, #32
 8005f76:	9b06      	ldr	r3, [sp, #24]
 8005f78:	4418      	add	r0, r3
 8005f7a:	f010 001f 	ands.w	r0, r0, #31
 8005f7e:	f000 8094 	beq.w	80060aa <_dtoa_r+0x922>
 8005f82:	f1c0 0320 	rsb	r3, r0, #32
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	f340 8085 	ble.w	8006096 <_dtoa_r+0x90e>
 8005f8c:	9b05      	ldr	r3, [sp, #20]
 8005f8e:	f1c0 001c 	rsb	r0, r0, #28
 8005f92:	4403      	add	r3, r0
 8005f94:	9305      	str	r3, [sp, #20]
 8005f96:	9b06      	ldr	r3, [sp, #24]
 8005f98:	4403      	add	r3, r0
 8005f9a:	4405      	add	r5, r0
 8005f9c:	9306      	str	r3, [sp, #24]
 8005f9e:	9b05      	ldr	r3, [sp, #20]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	dd05      	ble.n	8005fb0 <_dtoa_r+0x828>
 8005fa4:	4651      	mov	r1, sl
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f000 fcef 	bl	800698c <__lshift>
 8005fae:	4682      	mov	sl, r0
 8005fb0:	9b06      	ldr	r3, [sp, #24]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	dd05      	ble.n	8005fc2 <_dtoa_r+0x83a>
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f000 fce6 	bl	800698c <__lshift>
 8005fc0:	4606      	mov	r6, r0
 8005fc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d072      	beq.n	80060ae <_dtoa_r+0x926>
 8005fc8:	4631      	mov	r1, r6
 8005fca:	4650      	mov	r0, sl
 8005fcc:	f000 fd4a 	bl	8006a64 <__mcmp>
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	da6c      	bge.n	80060ae <_dtoa_r+0x926>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	4651      	mov	r1, sl
 8005fd8:	220a      	movs	r2, #10
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f000 fb28 	bl	8006630 <__multadd>
 8005fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fe2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005fe6:	4682      	mov	sl, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 81b0 	beq.w	800634e <_dtoa_r+0xbc6>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	4639      	mov	r1, r7
 8005ff2:	220a      	movs	r2, #10
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f000 fb1b 	bl	8006630 <__multadd>
 8005ffa:	9b01      	ldr	r3, [sp, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	4607      	mov	r7, r0
 8006000:	f300 8096 	bgt.w	8006130 <_dtoa_r+0x9a8>
 8006004:	9b07      	ldr	r3, [sp, #28]
 8006006:	2b02      	cmp	r3, #2
 8006008:	dc59      	bgt.n	80060be <_dtoa_r+0x936>
 800600a:	e091      	b.n	8006130 <_dtoa_r+0x9a8>
 800600c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800600e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006012:	e758      	b.n	8005ec6 <_dtoa_r+0x73e>
 8006014:	9b04      	ldr	r3, [sp, #16]
 8006016:	1e5e      	subs	r6, r3, #1
 8006018:	9b08      	ldr	r3, [sp, #32]
 800601a:	42b3      	cmp	r3, r6
 800601c:	bfbf      	itttt	lt
 800601e:	9b08      	ldrlt	r3, [sp, #32]
 8006020:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006022:	9608      	strlt	r6, [sp, #32]
 8006024:	1af3      	sublt	r3, r6, r3
 8006026:	bfb4      	ite	lt
 8006028:	18d2      	addlt	r2, r2, r3
 800602a:	1b9e      	subge	r6, r3, r6
 800602c:	9b04      	ldr	r3, [sp, #16]
 800602e:	bfbc      	itt	lt
 8006030:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006032:	2600      	movlt	r6, #0
 8006034:	2b00      	cmp	r3, #0
 8006036:	bfb7      	itett	lt
 8006038:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800603c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006040:	1a9d      	sublt	r5, r3, r2
 8006042:	2300      	movlt	r3, #0
 8006044:	e741      	b.n	8005eca <_dtoa_r+0x742>
 8006046:	9e08      	ldr	r6, [sp, #32]
 8006048:	9d05      	ldr	r5, [sp, #20]
 800604a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800604c:	e748      	b.n	8005ee0 <_dtoa_r+0x758>
 800604e:	9a08      	ldr	r2, [sp, #32]
 8006050:	e770      	b.n	8005f34 <_dtoa_r+0x7ac>
 8006052:	9b07      	ldr	r3, [sp, #28]
 8006054:	2b01      	cmp	r3, #1
 8006056:	dc19      	bgt.n	800608c <_dtoa_r+0x904>
 8006058:	9b02      	ldr	r3, [sp, #8]
 800605a:	b9bb      	cbnz	r3, 800608c <_dtoa_r+0x904>
 800605c:	9b03      	ldr	r3, [sp, #12]
 800605e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006062:	b99b      	cbnz	r3, 800608c <_dtoa_r+0x904>
 8006064:	9b03      	ldr	r3, [sp, #12]
 8006066:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800606a:	0d1b      	lsrs	r3, r3, #20
 800606c:	051b      	lsls	r3, r3, #20
 800606e:	b183      	cbz	r3, 8006092 <_dtoa_r+0x90a>
 8006070:	9b05      	ldr	r3, [sp, #20]
 8006072:	3301      	adds	r3, #1
 8006074:	9305      	str	r3, [sp, #20]
 8006076:	9b06      	ldr	r3, [sp, #24]
 8006078:	3301      	adds	r3, #1
 800607a:	9306      	str	r3, [sp, #24]
 800607c:	f04f 0801 	mov.w	r8, #1
 8006080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006082:	2b00      	cmp	r3, #0
 8006084:	f47f af6f 	bne.w	8005f66 <_dtoa_r+0x7de>
 8006088:	2001      	movs	r0, #1
 800608a:	e774      	b.n	8005f76 <_dtoa_r+0x7ee>
 800608c:	f04f 0800 	mov.w	r8, #0
 8006090:	e7f6      	b.n	8006080 <_dtoa_r+0x8f8>
 8006092:	4698      	mov	r8, r3
 8006094:	e7f4      	b.n	8006080 <_dtoa_r+0x8f8>
 8006096:	d082      	beq.n	8005f9e <_dtoa_r+0x816>
 8006098:	9a05      	ldr	r2, [sp, #20]
 800609a:	331c      	adds	r3, #28
 800609c:	441a      	add	r2, r3
 800609e:	9205      	str	r2, [sp, #20]
 80060a0:	9a06      	ldr	r2, [sp, #24]
 80060a2:	441a      	add	r2, r3
 80060a4:	441d      	add	r5, r3
 80060a6:	9206      	str	r2, [sp, #24]
 80060a8:	e779      	b.n	8005f9e <_dtoa_r+0x816>
 80060aa:	4603      	mov	r3, r0
 80060ac:	e7f4      	b.n	8006098 <_dtoa_r+0x910>
 80060ae:	9b04      	ldr	r3, [sp, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	dc37      	bgt.n	8006124 <_dtoa_r+0x99c>
 80060b4:	9b07      	ldr	r3, [sp, #28]
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	dd34      	ble.n	8006124 <_dtoa_r+0x99c>
 80060ba:	9b04      	ldr	r3, [sp, #16]
 80060bc:	9301      	str	r3, [sp, #4]
 80060be:	9b01      	ldr	r3, [sp, #4]
 80060c0:	b963      	cbnz	r3, 80060dc <_dtoa_r+0x954>
 80060c2:	4631      	mov	r1, r6
 80060c4:	2205      	movs	r2, #5
 80060c6:	4620      	mov	r0, r4
 80060c8:	f000 fab2 	bl	8006630 <__multadd>
 80060cc:	4601      	mov	r1, r0
 80060ce:	4606      	mov	r6, r0
 80060d0:	4650      	mov	r0, sl
 80060d2:	f000 fcc7 	bl	8006a64 <__mcmp>
 80060d6:	2800      	cmp	r0, #0
 80060d8:	f73f adbb 	bgt.w	8005c52 <_dtoa_r+0x4ca>
 80060dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060de:	9d00      	ldr	r5, [sp, #0]
 80060e0:	ea6f 0b03 	mvn.w	fp, r3
 80060e4:	f04f 0800 	mov.w	r8, #0
 80060e8:	4631      	mov	r1, r6
 80060ea:	4620      	mov	r0, r4
 80060ec:	f000 fa7e 	bl	80065ec <_Bfree>
 80060f0:	2f00      	cmp	r7, #0
 80060f2:	f43f aeab 	beq.w	8005e4c <_dtoa_r+0x6c4>
 80060f6:	f1b8 0f00 	cmp.w	r8, #0
 80060fa:	d005      	beq.n	8006108 <_dtoa_r+0x980>
 80060fc:	45b8      	cmp	r8, r7
 80060fe:	d003      	beq.n	8006108 <_dtoa_r+0x980>
 8006100:	4641      	mov	r1, r8
 8006102:	4620      	mov	r0, r4
 8006104:	f000 fa72 	bl	80065ec <_Bfree>
 8006108:	4639      	mov	r1, r7
 800610a:	4620      	mov	r0, r4
 800610c:	f000 fa6e 	bl	80065ec <_Bfree>
 8006110:	e69c      	b.n	8005e4c <_dtoa_r+0x6c4>
 8006112:	2600      	movs	r6, #0
 8006114:	4637      	mov	r7, r6
 8006116:	e7e1      	b.n	80060dc <_dtoa_r+0x954>
 8006118:	46bb      	mov	fp, r7
 800611a:	4637      	mov	r7, r6
 800611c:	e599      	b.n	8005c52 <_dtoa_r+0x4ca>
 800611e:	bf00      	nop
 8006120:	40240000 	.word	0x40240000
 8006124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 80c8 	beq.w	80062bc <_dtoa_r+0xb34>
 800612c:	9b04      	ldr	r3, [sp, #16]
 800612e:	9301      	str	r3, [sp, #4]
 8006130:	2d00      	cmp	r5, #0
 8006132:	dd05      	ble.n	8006140 <_dtoa_r+0x9b8>
 8006134:	4639      	mov	r1, r7
 8006136:	462a      	mov	r2, r5
 8006138:	4620      	mov	r0, r4
 800613a:	f000 fc27 	bl	800698c <__lshift>
 800613e:	4607      	mov	r7, r0
 8006140:	f1b8 0f00 	cmp.w	r8, #0
 8006144:	d05b      	beq.n	80061fe <_dtoa_r+0xa76>
 8006146:	6879      	ldr	r1, [r7, #4]
 8006148:	4620      	mov	r0, r4
 800614a:	f000 fa0f 	bl	800656c <_Balloc>
 800614e:	4605      	mov	r5, r0
 8006150:	b928      	cbnz	r0, 800615e <_dtoa_r+0x9d6>
 8006152:	4b83      	ldr	r3, [pc, #524]	; (8006360 <_dtoa_r+0xbd8>)
 8006154:	4602      	mov	r2, r0
 8006156:	f240 21ef 	movw	r1, #751	; 0x2ef
 800615a:	f7ff bb2e 	b.w	80057ba <_dtoa_r+0x32>
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	3202      	adds	r2, #2
 8006162:	0092      	lsls	r2, r2, #2
 8006164:	f107 010c 	add.w	r1, r7, #12
 8006168:	300c      	adds	r0, #12
 800616a:	f7ff fa57 	bl	800561c <memcpy>
 800616e:	2201      	movs	r2, #1
 8006170:	4629      	mov	r1, r5
 8006172:	4620      	mov	r0, r4
 8006174:	f000 fc0a 	bl	800698c <__lshift>
 8006178:	9b00      	ldr	r3, [sp, #0]
 800617a:	3301      	adds	r3, #1
 800617c:	9304      	str	r3, [sp, #16]
 800617e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006182:	4413      	add	r3, r2
 8006184:	9308      	str	r3, [sp, #32]
 8006186:	9b02      	ldr	r3, [sp, #8]
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	46b8      	mov	r8, r7
 800618e:	9306      	str	r3, [sp, #24]
 8006190:	4607      	mov	r7, r0
 8006192:	9b04      	ldr	r3, [sp, #16]
 8006194:	4631      	mov	r1, r6
 8006196:	3b01      	subs	r3, #1
 8006198:	4650      	mov	r0, sl
 800619a:	9301      	str	r3, [sp, #4]
 800619c:	f7ff fa6a 	bl	8005674 <quorem>
 80061a0:	4641      	mov	r1, r8
 80061a2:	9002      	str	r0, [sp, #8]
 80061a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80061a8:	4650      	mov	r0, sl
 80061aa:	f000 fc5b 	bl	8006a64 <__mcmp>
 80061ae:	463a      	mov	r2, r7
 80061b0:	9005      	str	r0, [sp, #20]
 80061b2:	4631      	mov	r1, r6
 80061b4:	4620      	mov	r0, r4
 80061b6:	f000 fc71 	bl	8006a9c <__mdiff>
 80061ba:	68c2      	ldr	r2, [r0, #12]
 80061bc:	4605      	mov	r5, r0
 80061be:	bb02      	cbnz	r2, 8006202 <_dtoa_r+0xa7a>
 80061c0:	4601      	mov	r1, r0
 80061c2:	4650      	mov	r0, sl
 80061c4:	f000 fc4e 	bl	8006a64 <__mcmp>
 80061c8:	4602      	mov	r2, r0
 80061ca:	4629      	mov	r1, r5
 80061cc:	4620      	mov	r0, r4
 80061ce:	9209      	str	r2, [sp, #36]	; 0x24
 80061d0:	f000 fa0c 	bl	80065ec <_Bfree>
 80061d4:	9b07      	ldr	r3, [sp, #28]
 80061d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061d8:	9d04      	ldr	r5, [sp, #16]
 80061da:	ea43 0102 	orr.w	r1, r3, r2
 80061de:	9b06      	ldr	r3, [sp, #24]
 80061e0:	4319      	orrs	r1, r3
 80061e2:	d110      	bne.n	8006206 <_dtoa_r+0xa7e>
 80061e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80061e8:	d029      	beq.n	800623e <_dtoa_r+0xab6>
 80061ea:	9b05      	ldr	r3, [sp, #20]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	dd02      	ble.n	80061f6 <_dtoa_r+0xa6e>
 80061f0:	9b02      	ldr	r3, [sp, #8]
 80061f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80061f6:	9b01      	ldr	r3, [sp, #4]
 80061f8:	f883 9000 	strb.w	r9, [r3]
 80061fc:	e774      	b.n	80060e8 <_dtoa_r+0x960>
 80061fe:	4638      	mov	r0, r7
 8006200:	e7ba      	b.n	8006178 <_dtoa_r+0x9f0>
 8006202:	2201      	movs	r2, #1
 8006204:	e7e1      	b.n	80061ca <_dtoa_r+0xa42>
 8006206:	9b05      	ldr	r3, [sp, #20]
 8006208:	2b00      	cmp	r3, #0
 800620a:	db04      	blt.n	8006216 <_dtoa_r+0xa8e>
 800620c:	9907      	ldr	r1, [sp, #28]
 800620e:	430b      	orrs	r3, r1
 8006210:	9906      	ldr	r1, [sp, #24]
 8006212:	430b      	orrs	r3, r1
 8006214:	d120      	bne.n	8006258 <_dtoa_r+0xad0>
 8006216:	2a00      	cmp	r2, #0
 8006218:	dded      	ble.n	80061f6 <_dtoa_r+0xa6e>
 800621a:	4651      	mov	r1, sl
 800621c:	2201      	movs	r2, #1
 800621e:	4620      	mov	r0, r4
 8006220:	f000 fbb4 	bl	800698c <__lshift>
 8006224:	4631      	mov	r1, r6
 8006226:	4682      	mov	sl, r0
 8006228:	f000 fc1c 	bl	8006a64 <__mcmp>
 800622c:	2800      	cmp	r0, #0
 800622e:	dc03      	bgt.n	8006238 <_dtoa_r+0xab0>
 8006230:	d1e1      	bne.n	80061f6 <_dtoa_r+0xa6e>
 8006232:	f019 0f01 	tst.w	r9, #1
 8006236:	d0de      	beq.n	80061f6 <_dtoa_r+0xa6e>
 8006238:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800623c:	d1d8      	bne.n	80061f0 <_dtoa_r+0xa68>
 800623e:	9a01      	ldr	r2, [sp, #4]
 8006240:	2339      	movs	r3, #57	; 0x39
 8006242:	7013      	strb	r3, [r2, #0]
 8006244:	462b      	mov	r3, r5
 8006246:	461d      	mov	r5, r3
 8006248:	3b01      	subs	r3, #1
 800624a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800624e:	2a39      	cmp	r2, #57	; 0x39
 8006250:	d06c      	beq.n	800632c <_dtoa_r+0xba4>
 8006252:	3201      	adds	r2, #1
 8006254:	701a      	strb	r2, [r3, #0]
 8006256:	e747      	b.n	80060e8 <_dtoa_r+0x960>
 8006258:	2a00      	cmp	r2, #0
 800625a:	dd07      	ble.n	800626c <_dtoa_r+0xae4>
 800625c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006260:	d0ed      	beq.n	800623e <_dtoa_r+0xab6>
 8006262:	9a01      	ldr	r2, [sp, #4]
 8006264:	f109 0301 	add.w	r3, r9, #1
 8006268:	7013      	strb	r3, [r2, #0]
 800626a:	e73d      	b.n	80060e8 <_dtoa_r+0x960>
 800626c:	9b04      	ldr	r3, [sp, #16]
 800626e:	9a08      	ldr	r2, [sp, #32]
 8006270:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006274:	4293      	cmp	r3, r2
 8006276:	d043      	beq.n	8006300 <_dtoa_r+0xb78>
 8006278:	4651      	mov	r1, sl
 800627a:	2300      	movs	r3, #0
 800627c:	220a      	movs	r2, #10
 800627e:	4620      	mov	r0, r4
 8006280:	f000 f9d6 	bl	8006630 <__multadd>
 8006284:	45b8      	cmp	r8, r7
 8006286:	4682      	mov	sl, r0
 8006288:	f04f 0300 	mov.w	r3, #0
 800628c:	f04f 020a 	mov.w	r2, #10
 8006290:	4641      	mov	r1, r8
 8006292:	4620      	mov	r0, r4
 8006294:	d107      	bne.n	80062a6 <_dtoa_r+0xb1e>
 8006296:	f000 f9cb 	bl	8006630 <__multadd>
 800629a:	4680      	mov	r8, r0
 800629c:	4607      	mov	r7, r0
 800629e:	9b04      	ldr	r3, [sp, #16]
 80062a0:	3301      	adds	r3, #1
 80062a2:	9304      	str	r3, [sp, #16]
 80062a4:	e775      	b.n	8006192 <_dtoa_r+0xa0a>
 80062a6:	f000 f9c3 	bl	8006630 <__multadd>
 80062aa:	4639      	mov	r1, r7
 80062ac:	4680      	mov	r8, r0
 80062ae:	2300      	movs	r3, #0
 80062b0:	220a      	movs	r2, #10
 80062b2:	4620      	mov	r0, r4
 80062b4:	f000 f9bc 	bl	8006630 <__multadd>
 80062b8:	4607      	mov	r7, r0
 80062ba:	e7f0      	b.n	800629e <_dtoa_r+0xb16>
 80062bc:	9b04      	ldr	r3, [sp, #16]
 80062be:	9301      	str	r3, [sp, #4]
 80062c0:	9d00      	ldr	r5, [sp, #0]
 80062c2:	4631      	mov	r1, r6
 80062c4:	4650      	mov	r0, sl
 80062c6:	f7ff f9d5 	bl	8005674 <quorem>
 80062ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80062ce:	9b00      	ldr	r3, [sp, #0]
 80062d0:	f805 9b01 	strb.w	r9, [r5], #1
 80062d4:	1aea      	subs	r2, r5, r3
 80062d6:	9b01      	ldr	r3, [sp, #4]
 80062d8:	4293      	cmp	r3, r2
 80062da:	dd07      	ble.n	80062ec <_dtoa_r+0xb64>
 80062dc:	4651      	mov	r1, sl
 80062de:	2300      	movs	r3, #0
 80062e0:	220a      	movs	r2, #10
 80062e2:	4620      	mov	r0, r4
 80062e4:	f000 f9a4 	bl	8006630 <__multadd>
 80062e8:	4682      	mov	sl, r0
 80062ea:	e7ea      	b.n	80062c2 <_dtoa_r+0xb3a>
 80062ec:	9b01      	ldr	r3, [sp, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	bfc8      	it	gt
 80062f2:	461d      	movgt	r5, r3
 80062f4:	9b00      	ldr	r3, [sp, #0]
 80062f6:	bfd8      	it	le
 80062f8:	2501      	movle	r5, #1
 80062fa:	441d      	add	r5, r3
 80062fc:	f04f 0800 	mov.w	r8, #0
 8006300:	4651      	mov	r1, sl
 8006302:	2201      	movs	r2, #1
 8006304:	4620      	mov	r0, r4
 8006306:	f000 fb41 	bl	800698c <__lshift>
 800630a:	4631      	mov	r1, r6
 800630c:	4682      	mov	sl, r0
 800630e:	f000 fba9 	bl	8006a64 <__mcmp>
 8006312:	2800      	cmp	r0, #0
 8006314:	dc96      	bgt.n	8006244 <_dtoa_r+0xabc>
 8006316:	d102      	bne.n	800631e <_dtoa_r+0xb96>
 8006318:	f019 0f01 	tst.w	r9, #1
 800631c:	d192      	bne.n	8006244 <_dtoa_r+0xabc>
 800631e:	462b      	mov	r3, r5
 8006320:	461d      	mov	r5, r3
 8006322:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006326:	2a30      	cmp	r2, #48	; 0x30
 8006328:	d0fa      	beq.n	8006320 <_dtoa_r+0xb98>
 800632a:	e6dd      	b.n	80060e8 <_dtoa_r+0x960>
 800632c:	9a00      	ldr	r2, [sp, #0]
 800632e:	429a      	cmp	r2, r3
 8006330:	d189      	bne.n	8006246 <_dtoa_r+0xabe>
 8006332:	f10b 0b01 	add.w	fp, fp, #1
 8006336:	2331      	movs	r3, #49	; 0x31
 8006338:	e796      	b.n	8006268 <_dtoa_r+0xae0>
 800633a:	4b0a      	ldr	r3, [pc, #40]	; (8006364 <_dtoa_r+0xbdc>)
 800633c:	f7ff ba99 	b.w	8005872 <_dtoa_r+0xea>
 8006340:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006342:	2b00      	cmp	r3, #0
 8006344:	f47f aa6d 	bne.w	8005822 <_dtoa_r+0x9a>
 8006348:	4b07      	ldr	r3, [pc, #28]	; (8006368 <_dtoa_r+0xbe0>)
 800634a:	f7ff ba92 	b.w	8005872 <_dtoa_r+0xea>
 800634e:	9b01      	ldr	r3, [sp, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	dcb5      	bgt.n	80062c0 <_dtoa_r+0xb38>
 8006354:	9b07      	ldr	r3, [sp, #28]
 8006356:	2b02      	cmp	r3, #2
 8006358:	f73f aeb1 	bgt.w	80060be <_dtoa_r+0x936>
 800635c:	e7b0      	b.n	80062c0 <_dtoa_r+0xb38>
 800635e:	bf00      	nop
 8006360:	080077ee 	.word	0x080077ee
 8006364:	08007712 	.word	0x08007712
 8006368:	08007772 	.word	0x08007772

0800636c <_free_r>:
 800636c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800636e:	2900      	cmp	r1, #0
 8006370:	d044      	beq.n	80063fc <_free_r+0x90>
 8006372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006376:	9001      	str	r0, [sp, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	f1a1 0404 	sub.w	r4, r1, #4
 800637e:	bfb8      	it	lt
 8006380:	18e4      	addlt	r4, r4, r3
 8006382:	f000 f8e7 	bl	8006554 <__malloc_lock>
 8006386:	4a1e      	ldr	r2, [pc, #120]	; (8006400 <_free_r+0x94>)
 8006388:	9801      	ldr	r0, [sp, #4]
 800638a:	6813      	ldr	r3, [r2, #0]
 800638c:	b933      	cbnz	r3, 800639c <_free_r+0x30>
 800638e:	6063      	str	r3, [r4, #4]
 8006390:	6014      	str	r4, [r2, #0]
 8006392:	b003      	add	sp, #12
 8006394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006398:	f000 b8e2 	b.w	8006560 <__malloc_unlock>
 800639c:	42a3      	cmp	r3, r4
 800639e:	d908      	bls.n	80063b2 <_free_r+0x46>
 80063a0:	6825      	ldr	r5, [r4, #0]
 80063a2:	1961      	adds	r1, r4, r5
 80063a4:	428b      	cmp	r3, r1
 80063a6:	bf01      	itttt	eq
 80063a8:	6819      	ldreq	r1, [r3, #0]
 80063aa:	685b      	ldreq	r3, [r3, #4]
 80063ac:	1949      	addeq	r1, r1, r5
 80063ae:	6021      	streq	r1, [r4, #0]
 80063b0:	e7ed      	b.n	800638e <_free_r+0x22>
 80063b2:	461a      	mov	r2, r3
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	b10b      	cbz	r3, 80063bc <_free_r+0x50>
 80063b8:	42a3      	cmp	r3, r4
 80063ba:	d9fa      	bls.n	80063b2 <_free_r+0x46>
 80063bc:	6811      	ldr	r1, [r2, #0]
 80063be:	1855      	adds	r5, r2, r1
 80063c0:	42a5      	cmp	r5, r4
 80063c2:	d10b      	bne.n	80063dc <_free_r+0x70>
 80063c4:	6824      	ldr	r4, [r4, #0]
 80063c6:	4421      	add	r1, r4
 80063c8:	1854      	adds	r4, r2, r1
 80063ca:	42a3      	cmp	r3, r4
 80063cc:	6011      	str	r1, [r2, #0]
 80063ce:	d1e0      	bne.n	8006392 <_free_r+0x26>
 80063d0:	681c      	ldr	r4, [r3, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	6053      	str	r3, [r2, #4]
 80063d6:	440c      	add	r4, r1
 80063d8:	6014      	str	r4, [r2, #0]
 80063da:	e7da      	b.n	8006392 <_free_r+0x26>
 80063dc:	d902      	bls.n	80063e4 <_free_r+0x78>
 80063de:	230c      	movs	r3, #12
 80063e0:	6003      	str	r3, [r0, #0]
 80063e2:	e7d6      	b.n	8006392 <_free_r+0x26>
 80063e4:	6825      	ldr	r5, [r4, #0]
 80063e6:	1961      	adds	r1, r4, r5
 80063e8:	428b      	cmp	r3, r1
 80063ea:	bf04      	itt	eq
 80063ec:	6819      	ldreq	r1, [r3, #0]
 80063ee:	685b      	ldreq	r3, [r3, #4]
 80063f0:	6063      	str	r3, [r4, #4]
 80063f2:	bf04      	itt	eq
 80063f4:	1949      	addeq	r1, r1, r5
 80063f6:	6021      	streq	r1, [r4, #0]
 80063f8:	6054      	str	r4, [r2, #4]
 80063fa:	e7ca      	b.n	8006392 <_free_r+0x26>
 80063fc:	b003      	add	sp, #12
 80063fe:	bd30      	pop	{r4, r5, pc}
 8006400:	20000568 	.word	0x20000568

08006404 <malloc>:
 8006404:	4b02      	ldr	r3, [pc, #8]	; (8006410 <malloc+0xc>)
 8006406:	4601      	mov	r1, r0
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	f000 b823 	b.w	8006454 <_malloc_r>
 800640e:	bf00      	nop
 8006410:	200000f8 	.word	0x200000f8

08006414 <sbrk_aligned>:
 8006414:	b570      	push	{r4, r5, r6, lr}
 8006416:	4e0e      	ldr	r6, [pc, #56]	; (8006450 <sbrk_aligned+0x3c>)
 8006418:	460c      	mov	r4, r1
 800641a:	6831      	ldr	r1, [r6, #0]
 800641c:	4605      	mov	r5, r0
 800641e:	b911      	cbnz	r1, 8006426 <sbrk_aligned+0x12>
 8006420:	f001 f81a 	bl	8007458 <_sbrk_r>
 8006424:	6030      	str	r0, [r6, #0]
 8006426:	4621      	mov	r1, r4
 8006428:	4628      	mov	r0, r5
 800642a:	f001 f815 	bl	8007458 <_sbrk_r>
 800642e:	1c43      	adds	r3, r0, #1
 8006430:	d00a      	beq.n	8006448 <sbrk_aligned+0x34>
 8006432:	1cc4      	adds	r4, r0, #3
 8006434:	f024 0403 	bic.w	r4, r4, #3
 8006438:	42a0      	cmp	r0, r4
 800643a:	d007      	beq.n	800644c <sbrk_aligned+0x38>
 800643c:	1a21      	subs	r1, r4, r0
 800643e:	4628      	mov	r0, r5
 8006440:	f001 f80a 	bl	8007458 <_sbrk_r>
 8006444:	3001      	adds	r0, #1
 8006446:	d101      	bne.n	800644c <sbrk_aligned+0x38>
 8006448:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800644c:	4620      	mov	r0, r4
 800644e:	bd70      	pop	{r4, r5, r6, pc}
 8006450:	2000056c 	.word	0x2000056c

08006454 <_malloc_r>:
 8006454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006458:	1ccd      	adds	r5, r1, #3
 800645a:	f025 0503 	bic.w	r5, r5, #3
 800645e:	3508      	adds	r5, #8
 8006460:	2d0c      	cmp	r5, #12
 8006462:	bf38      	it	cc
 8006464:	250c      	movcc	r5, #12
 8006466:	2d00      	cmp	r5, #0
 8006468:	4607      	mov	r7, r0
 800646a:	db01      	blt.n	8006470 <_malloc_r+0x1c>
 800646c:	42a9      	cmp	r1, r5
 800646e:	d905      	bls.n	800647c <_malloc_r+0x28>
 8006470:	230c      	movs	r3, #12
 8006472:	603b      	str	r3, [r7, #0]
 8006474:	2600      	movs	r6, #0
 8006476:	4630      	mov	r0, r6
 8006478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800647c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006550 <_malloc_r+0xfc>
 8006480:	f000 f868 	bl	8006554 <__malloc_lock>
 8006484:	f8d8 3000 	ldr.w	r3, [r8]
 8006488:	461c      	mov	r4, r3
 800648a:	bb5c      	cbnz	r4, 80064e4 <_malloc_r+0x90>
 800648c:	4629      	mov	r1, r5
 800648e:	4638      	mov	r0, r7
 8006490:	f7ff ffc0 	bl	8006414 <sbrk_aligned>
 8006494:	1c43      	adds	r3, r0, #1
 8006496:	4604      	mov	r4, r0
 8006498:	d155      	bne.n	8006546 <_malloc_r+0xf2>
 800649a:	f8d8 4000 	ldr.w	r4, [r8]
 800649e:	4626      	mov	r6, r4
 80064a0:	2e00      	cmp	r6, #0
 80064a2:	d145      	bne.n	8006530 <_malloc_r+0xdc>
 80064a4:	2c00      	cmp	r4, #0
 80064a6:	d048      	beq.n	800653a <_malloc_r+0xe6>
 80064a8:	6823      	ldr	r3, [r4, #0]
 80064aa:	4631      	mov	r1, r6
 80064ac:	4638      	mov	r0, r7
 80064ae:	eb04 0903 	add.w	r9, r4, r3
 80064b2:	f000 ffd1 	bl	8007458 <_sbrk_r>
 80064b6:	4581      	cmp	r9, r0
 80064b8:	d13f      	bne.n	800653a <_malloc_r+0xe6>
 80064ba:	6821      	ldr	r1, [r4, #0]
 80064bc:	1a6d      	subs	r5, r5, r1
 80064be:	4629      	mov	r1, r5
 80064c0:	4638      	mov	r0, r7
 80064c2:	f7ff ffa7 	bl	8006414 <sbrk_aligned>
 80064c6:	3001      	adds	r0, #1
 80064c8:	d037      	beq.n	800653a <_malloc_r+0xe6>
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	442b      	add	r3, r5
 80064ce:	6023      	str	r3, [r4, #0]
 80064d0:	f8d8 3000 	ldr.w	r3, [r8]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d038      	beq.n	800654a <_malloc_r+0xf6>
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	42a2      	cmp	r2, r4
 80064dc:	d12b      	bne.n	8006536 <_malloc_r+0xe2>
 80064de:	2200      	movs	r2, #0
 80064e0:	605a      	str	r2, [r3, #4]
 80064e2:	e00f      	b.n	8006504 <_malloc_r+0xb0>
 80064e4:	6822      	ldr	r2, [r4, #0]
 80064e6:	1b52      	subs	r2, r2, r5
 80064e8:	d41f      	bmi.n	800652a <_malloc_r+0xd6>
 80064ea:	2a0b      	cmp	r2, #11
 80064ec:	d917      	bls.n	800651e <_malloc_r+0xca>
 80064ee:	1961      	adds	r1, r4, r5
 80064f0:	42a3      	cmp	r3, r4
 80064f2:	6025      	str	r5, [r4, #0]
 80064f4:	bf18      	it	ne
 80064f6:	6059      	strne	r1, [r3, #4]
 80064f8:	6863      	ldr	r3, [r4, #4]
 80064fa:	bf08      	it	eq
 80064fc:	f8c8 1000 	streq.w	r1, [r8]
 8006500:	5162      	str	r2, [r4, r5]
 8006502:	604b      	str	r3, [r1, #4]
 8006504:	4638      	mov	r0, r7
 8006506:	f104 060b 	add.w	r6, r4, #11
 800650a:	f000 f829 	bl	8006560 <__malloc_unlock>
 800650e:	f026 0607 	bic.w	r6, r6, #7
 8006512:	1d23      	adds	r3, r4, #4
 8006514:	1af2      	subs	r2, r6, r3
 8006516:	d0ae      	beq.n	8006476 <_malloc_r+0x22>
 8006518:	1b9b      	subs	r3, r3, r6
 800651a:	50a3      	str	r3, [r4, r2]
 800651c:	e7ab      	b.n	8006476 <_malloc_r+0x22>
 800651e:	42a3      	cmp	r3, r4
 8006520:	6862      	ldr	r2, [r4, #4]
 8006522:	d1dd      	bne.n	80064e0 <_malloc_r+0x8c>
 8006524:	f8c8 2000 	str.w	r2, [r8]
 8006528:	e7ec      	b.n	8006504 <_malloc_r+0xb0>
 800652a:	4623      	mov	r3, r4
 800652c:	6864      	ldr	r4, [r4, #4]
 800652e:	e7ac      	b.n	800648a <_malloc_r+0x36>
 8006530:	4634      	mov	r4, r6
 8006532:	6876      	ldr	r6, [r6, #4]
 8006534:	e7b4      	b.n	80064a0 <_malloc_r+0x4c>
 8006536:	4613      	mov	r3, r2
 8006538:	e7cc      	b.n	80064d4 <_malloc_r+0x80>
 800653a:	230c      	movs	r3, #12
 800653c:	603b      	str	r3, [r7, #0]
 800653e:	4638      	mov	r0, r7
 8006540:	f000 f80e 	bl	8006560 <__malloc_unlock>
 8006544:	e797      	b.n	8006476 <_malloc_r+0x22>
 8006546:	6025      	str	r5, [r4, #0]
 8006548:	e7dc      	b.n	8006504 <_malloc_r+0xb0>
 800654a:	605b      	str	r3, [r3, #4]
 800654c:	deff      	udf	#255	; 0xff
 800654e:	bf00      	nop
 8006550:	20000568 	.word	0x20000568

08006554 <__malloc_lock>:
 8006554:	4801      	ldr	r0, [pc, #4]	; (800655c <__malloc_lock+0x8>)
 8006556:	f7ff b85f 	b.w	8005618 <__retarget_lock_acquire_recursive>
 800655a:	bf00      	nop
 800655c:	20000564 	.word	0x20000564

08006560 <__malloc_unlock>:
 8006560:	4801      	ldr	r0, [pc, #4]	; (8006568 <__malloc_unlock+0x8>)
 8006562:	f7ff b85a 	b.w	800561a <__retarget_lock_release_recursive>
 8006566:	bf00      	nop
 8006568:	20000564 	.word	0x20000564

0800656c <_Balloc>:
 800656c:	b570      	push	{r4, r5, r6, lr}
 800656e:	69c6      	ldr	r6, [r0, #28]
 8006570:	4604      	mov	r4, r0
 8006572:	460d      	mov	r5, r1
 8006574:	b976      	cbnz	r6, 8006594 <_Balloc+0x28>
 8006576:	2010      	movs	r0, #16
 8006578:	f7ff ff44 	bl	8006404 <malloc>
 800657c:	4602      	mov	r2, r0
 800657e:	61e0      	str	r0, [r4, #28]
 8006580:	b920      	cbnz	r0, 800658c <_Balloc+0x20>
 8006582:	4b18      	ldr	r3, [pc, #96]	; (80065e4 <_Balloc+0x78>)
 8006584:	4818      	ldr	r0, [pc, #96]	; (80065e8 <_Balloc+0x7c>)
 8006586:	216b      	movs	r1, #107	; 0x6b
 8006588:	f7ff f856 	bl	8005638 <__assert_func>
 800658c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006590:	6006      	str	r6, [r0, #0]
 8006592:	60c6      	str	r6, [r0, #12]
 8006594:	69e6      	ldr	r6, [r4, #28]
 8006596:	68f3      	ldr	r3, [r6, #12]
 8006598:	b183      	cbz	r3, 80065bc <_Balloc+0x50>
 800659a:	69e3      	ldr	r3, [r4, #28]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80065a2:	b9b8      	cbnz	r0, 80065d4 <_Balloc+0x68>
 80065a4:	2101      	movs	r1, #1
 80065a6:	fa01 f605 	lsl.w	r6, r1, r5
 80065aa:	1d72      	adds	r2, r6, #5
 80065ac:	0092      	lsls	r2, r2, #2
 80065ae:	4620      	mov	r0, r4
 80065b0:	f000 ff69 	bl	8007486 <_calloc_r>
 80065b4:	b160      	cbz	r0, 80065d0 <_Balloc+0x64>
 80065b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80065ba:	e00e      	b.n	80065da <_Balloc+0x6e>
 80065bc:	2221      	movs	r2, #33	; 0x21
 80065be:	2104      	movs	r1, #4
 80065c0:	4620      	mov	r0, r4
 80065c2:	f000 ff60 	bl	8007486 <_calloc_r>
 80065c6:	69e3      	ldr	r3, [r4, #28]
 80065c8:	60f0      	str	r0, [r6, #12]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e4      	bne.n	800659a <_Balloc+0x2e>
 80065d0:	2000      	movs	r0, #0
 80065d2:	bd70      	pop	{r4, r5, r6, pc}
 80065d4:	6802      	ldr	r2, [r0, #0]
 80065d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80065da:	2300      	movs	r3, #0
 80065dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065e0:	e7f7      	b.n	80065d2 <_Balloc+0x66>
 80065e2:	bf00      	nop
 80065e4:	0800777f 	.word	0x0800777f
 80065e8:	080077ff 	.word	0x080077ff

080065ec <_Bfree>:
 80065ec:	b570      	push	{r4, r5, r6, lr}
 80065ee:	69c6      	ldr	r6, [r0, #28]
 80065f0:	4605      	mov	r5, r0
 80065f2:	460c      	mov	r4, r1
 80065f4:	b976      	cbnz	r6, 8006614 <_Bfree+0x28>
 80065f6:	2010      	movs	r0, #16
 80065f8:	f7ff ff04 	bl	8006404 <malloc>
 80065fc:	4602      	mov	r2, r0
 80065fe:	61e8      	str	r0, [r5, #28]
 8006600:	b920      	cbnz	r0, 800660c <_Bfree+0x20>
 8006602:	4b09      	ldr	r3, [pc, #36]	; (8006628 <_Bfree+0x3c>)
 8006604:	4809      	ldr	r0, [pc, #36]	; (800662c <_Bfree+0x40>)
 8006606:	218f      	movs	r1, #143	; 0x8f
 8006608:	f7ff f816 	bl	8005638 <__assert_func>
 800660c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006610:	6006      	str	r6, [r0, #0]
 8006612:	60c6      	str	r6, [r0, #12]
 8006614:	b13c      	cbz	r4, 8006626 <_Bfree+0x3a>
 8006616:	69eb      	ldr	r3, [r5, #28]
 8006618:	6862      	ldr	r2, [r4, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006620:	6021      	str	r1, [r4, #0]
 8006622:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006626:	bd70      	pop	{r4, r5, r6, pc}
 8006628:	0800777f 	.word	0x0800777f
 800662c:	080077ff 	.word	0x080077ff

08006630 <__multadd>:
 8006630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006634:	690d      	ldr	r5, [r1, #16]
 8006636:	4607      	mov	r7, r0
 8006638:	460c      	mov	r4, r1
 800663a:	461e      	mov	r6, r3
 800663c:	f101 0c14 	add.w	ip, r1, #20
 8006640:	2000      	movs	r0, #0
 8006642:	f8dc 3000 	ldr.w	r3, [ip]
 8006646:	b299      	uxth	r1, r3
 8006648:	fb02 6101 	mla	r1, r2, r1, r6
 800664c:	0c1e      	lsrs	r6, r3, #16
 800664e:	0c0b      	lsrs	r3, r1, #16
 8006650:	fb02 3306 	mla	r3, r2, r6, r3
 8006654:	b289      	uxth	r1, r1
 8006656:	3001      	adds	r0, #1
 8006658:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800665c:	4285      	cmp	r5, r0
 800665e:	f84c 1b04 	str.w	r1, [ip], #4
 8006662:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006666:	dcec      	bgt.n	8006642 <__multadd+0x12>
 8006668:	b30e      	cbz	r6, 80066ae <__multadd+0x7e>
 800666a:	68a3      	ldr	r3, [r4, #8]
 800666c:	42ab      	cmp	r3, r5
 800666e:	dc19      	bgt.n	80066a4 <__multadd+0x74>
 8006670:	6861      	ldr	r1, [r4, #4]
 8006672:	4638      	mov	r0, r7
 8006674:	3101      	adds	r1, #1
 8006676:	f7ff ff79 	bl	800656c <_Balloc>
 800667a:	4680      	mov	r8, r0
 800667c:	b928      	cbnz	r0, 800668a <__multadd+0x5a>
 800667e:	4602      	mov	r2, r0
 8006680:	4b0c      	ldr	r3, [pc, #48]	; (80066b4 <__multadd+0x84>)
 8006682:	480d      	ldr	r0, [pc, #52]	; (80066b8 <__multadd+0x88>)
 8006684:	21ba      	movs	r1, #186	; 0xba
 8006686:	f7fe ffd7 	bl	8005638 <__assert_func>
 800668a:	6922      	ldr	r2, [r4, #16]
 800668c:	3202      	adds	r2, #2
 800668e:	f104 010c 	add.w	r1, r4, #12
 8006692:	0092      	lsls	r2, r2, #2
 8006694:	300c      	adds	r0, #12
 8006696:	f7fe ffc1 	bl	800561c <memcpy>
 800669a:	4621      	mov	r1, r4
 800669c:	4638      	mov	r0, r7
 800669e:	f7ff ffa5 	bl	80065ec <_Bfree>
 80066a2:	4644      	mov	r4, r8
 80066a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80066a8:	3501      	adds	r5, #1
 80066aa:	615e      	str	r6, [r3, #20]
 80066ac:	6125      	str	r5, [r4, #16]
 80066ae:	4620      	mov	r0, r4
 80066b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066b4:	080077ee 	.word	0x080077ee
 80066b8:	080077ff 	.word	0x080077ff

080066bc <__hi0bits>:
 80066bc:	0c03      	lsrs	r3, r0, #16
 80066be:	041b      	lsls	r3, r3, #16
 80066c0:	b9d3      	cbnz	r3, 80066f8 <__hi0bits+0x3c>
 80066c2:	0400      	lsls	r0, r0, #16
 80066c4:	2310      	movs	r3, #16
 80066c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80066ca:	bf04      	itt	eq
 80066cc:	0200      	lsleq	r0, r0, #8
 80066ce:	3308      	addeq	r3, #8
 80066d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80066d4:	bf04      	itt	eq
 80066d6:	0100      	lsleq	r0, r0, #4
 80066d8:	3304      	addeq	r3, #4
 80066da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80066de:	bf04      	itt	eq
 80066e0:	0080      	lsleq	r0, r0, #2
 80066e2:	3302      	addeq	r3, #2
 80066e4:	2800      	cmp	r0, #0
 80066e6:	db05      	blt.n	80066f4 <__hi0bits+0x38>
 80066e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80066ec:	f103 0301 	add.w	r3, r3, #1
 80066f0:	bf08      	it	eq
 80066f2:	2320      	moveq	r3, #32
 80066f4:	4618      	mov	r0, r3
 80066f6:	4770      	bx	lr
 80066f8:	2300      	movs	r3, #0
 80066fa:	e7e4      	b.n	80066c6 <__hi0bits+0xa>

080066fc <__lo0bits>:
 80066fc:	6803      	ldr	r3, [r0, #0]
 80066fe:	f013 0207 	ands.w	r2, r3, #7
 8006702:	d00c      	beq.n	800671e <__lo0bits+0x22>
 8006704:	07d9      	lsls	r1, r3, #31
 8006706:	d422      	bmi.n	800674e <__lo0bits+0x52>
 8006708:	079a      	lsls	r2, r3, #30
 800670a:	bf49      	itett	mi
 800670c:	085b      	lsrmi	r3, r3, #1
 800670e:	089b      	lsrpl	r3, r3, #2
 8006710:	6003      	strmi	r3, [r0, #0]
 8006712:	2201      	movmi	r2, #1
 8006714:	bf5c      	itt	pl
 8006716:	6003      	strpl	r3, [r0, #0]
 8006718:	2202      	movpl	r2, #2
 800671a:	4610      	mov	r0, r2
 800671c:	4770      	bx	lr
 800671e:	b299      	uxth	r1, r3
 8006720:	b909      	cbnz	r1, 8006726 <__lo0bits+0x2a>
 8006722:	0c1b      	lsrs	r3, r3, #16
 8006724:	2210      	movs	r2, #16
 8006726:	b2d9      	uxtb	r1, r3
 8006728:	b909      	cbnz	r1, 800672e <__lo0bits+0x32>
 800672a:	3208      	adds	r2, #8
 800672c:	0a1b      	lsrs	r3, r3, #8
 800672e:	0719      	lsls	r1, r3, #28
 8006730:	bf04      	itt	eq
 8006732:	091b      	lsreq	r3, r3, #4
 8006734:	3204      	addeq	r2, #4
 8006736:	0799      	lsls	r1, r3, #30
 8006738:	bf04      	itt	eq
 800673a:	089b      	lsreq	r3, r3, #2
 800673c:	3202      	addeq	r2, #2
 800673e:	07d9      	lsls	r1, r3, #31
 8006740:	d403      	bmi.n	800674a <__lo0bits+0x4e>
 8006742:	085b      	lsrs	r3, r3, #1
 8006744:	f102 0201 	add.w	r2, r2, #1
 8006748:	d003      	beq.n	8006752 <__lo0bits+0x56>
 800674a:	6003      	str	r3, [r0, #0]
 800674c:	e7e5      	b.n	800671a <__lo0bits+0x1e>
 800674e:	2200      	movs	r2, #0
 8006750:	e7e3      	b.n	800671a <__lo0bits+0x1e>
 8006752:	2220      	movs	r2, #32
 8006754:	e7e1      	b.n	800671a <__lo0bits+0x1e>
	...

08006758 <__i2b>:
 8006758:	b510      	push	{r4, lr}
 800675a:	460c      	mov	r4, r1
 800675c:	2101      	movs	r1, #1
 800675e:	f7ff ff05 	bl	800656c <_Balloc>
 8006762:	4602      	mov	r2, r0
 8006764:	b928      	cbnz	r0, 8006772 <__i2b+0x1a>
 8006766:	4b05      	ldr	r3, [pc, #20]	; (800677c <__i2b+0x24>)
 8006768:	4805      	ldr	r0, [pc, #20]	; (8006780 <__i2b+0x28>)
 800676a:	f240 1145 	movw	r1, #325	; 0x145
 800676e:	f7fe ff63 	bl	8005638 <__assert_func>
 8006772:	2301      	movs	r3, #1
 8006774:	6144      	str	r4, [r0, #20]
 8006776:	6103      	str	r3, [r0, #16]
 8006778:	bd10      	pop	{r4, pc}
 800677a:	bf00      	nop
 800677c:	080077ee 	.word	0x080077ee
 8006780:	080077ff 	.word	0x080077ff

08006784 <__multiply>:
 8006784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006788:	4691      	mov	r9, r2
 800678a:	690a      	ldr	r2, [r1, #16]
 800678c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006790:	429a      	cmp	r2, r3
 8006792:	bfb8      	it	lt
 8006794:	460b      	movlt	r3, r1
 8006796:	460c      	mov	r4, r1
 8006798:	bfbc      	itt	lt
 800679a:	464c      	movlt	r4, r9
 800679c:	4699      	movlt	r9, r3
 800679e:	6927      	ldr	r7, [r4, #16]
 80067a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80067a4:	68a3      	ldr	r3, [r4, #8]
 80067a6:	6861      	ldr	r1, [r4, #4]
 80067a8:	eb07 060a 	add.w	r6, r7, sl
 80067ac:	42b3      	cmp	r3, r6
 80067ae:	b085      	sub	sp, #20
 80067b0:	bfb8      	it	lt
 80067b2:	3101      	addlt	r1, #1
 80067b4:	f7ff feda 	bl	800656c <_Balloc>
 80067b8:	b930      	cbnz	r0, 80067c8 <__multiply+0x44>
 80067ba:	4602      	mov	r2, r0
 80067bc:	4b44      	ldr	r3, [pc, #272]	; (80068d0 <__multiply+0x14c>)
 80067be:	4845      	ldr	r0, [pc, #276]	; (80068d4 <__multiply+0x150>)
 80067c0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80067c4:	f7fe ff38 	bl	8005638 <__assert_func>
 80067c8:	f100 0514 	add.w	r5, r0, #20
 80067cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80067d0:	462b      	mov	r3, r5
 80067d2:	2200      	movs	r2, #0
 80067d4:	4543      	cmp	r3, r8
 80067d6:	d321      	bcc.n	800681c <__multiply+0x98>
 80067d8:	f104 0314 	add.w	r3, r4, #20
 80067dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80067e0:	f109 0314 	add.w	r3, r9, #20
 80067e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80067e8:	9202      	str	r2, [sp, #8]
 80067ea:	1b3a      	subs	r2, r7, r4
 80067ec:	3a15      	subs	r2, #21
 80067ee:	f022 0203 	bic.w	r2, r2, #3
 80067f2:	3204      	adds	r2, #4
 80067f4:	f104 0115 	add.w	r1, r4, #21
 80067f8:	428f      	cmp	r7, r1
 80067fa:	bf38      	it	cc
 80067fc:	2204      	movcc	r2, #4
 80067fe:	9201      	str	r2, [sp, #4]
 8006800:	9a02      	ldr	r2, [sp, #8]
 8006802:	9303      	str	r3, [sp, #12]
 8006804:	429a      	cmp	r2, r3
 8006806:	d80c      	bhi.n	8006822 <__multiply+0x9e>
 8006808:	2e00      	cmp	r6, #0
 800680a:	dd03      	ble.n	8006814 <__multiply+0x90>
 800680c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006810:	2b00      	cmp	r3, #0
 8006812:	d05b      	beq.n	80068cc <__multiply+0x148>
 8006814:	6106      	str	r6, [r0, #16]
 8006816:	b005      	add	sp, #20
 8006818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800681c:	f843 2b04 	str.w	r2, [r3], #4
 8006820:	e7d8      	b.n	80067d4 <__multiply+0x50>
 8006822:	f8b3 a000 	ldrh.w	sl, [r3]
 8006826:	f1ba 0f00 	cmp.w	sl, #0
 800682a:	d024      	beq.n	8006876 <__multiply+0xf2>
 800682c:	f104 0e14 	add.w	lr, r4, #20
 8006830:	46a9      	mov	r9, r5
 8006832:	f04f 0c00 	mov.w	ip, #0
 8006836:	f85e 2b04 	ldr.w	r2, [lr], #4
 800683a:	f8d9 1000 	ldr.w	r1, [r9]
 800683e:	fa1f fb82 	uxth.w	fp, r2
 8006842:	b289      	uxth	r1, r1
 8006844:	fb0a 110b 	mla	r1, sl, fp, r1
 8006848:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800684c:	f8d9 2000 	ldr.w	r2, [r9]
 8006850:	4461      	add	r1, ip
 8006852:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006856:	fb0a c20b 	mla	r2, sl, fp, ip
 800685a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800685e:	b289      	uxth	r1, r1
 8006860:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006864:	4577      	cmp	r7, lr
 8006866:	f849 1b04 	str.w	r1, [r9], #4
 800686a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800686e:	d8e2      	bhi.n	8006836 <__multiply+0xb2>
 8006870:	9a01      	ldr	r2, [sp, #4]
 8006872:	f845 c002 	str.w	ip, [r5, r2]
 8006876:	9a03      	ldr	r2, [sp, #12]
 8006878:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800687c:	3304      	adds	r3, #4
 800687e:	f1b9 0f00 	cmp.w	r9, #0
 8006882:	d021      	beq.n	80068c8 <__multiply+0x144>
 8006884:	6829      	ldr	r1, [r5, #0]
 8006886:	f104 0c14 	add.w	ip, r4, #20
 800688a:	46ae      	mov	lr, r5
 800688c:	f04f 0a00 	mov.w	sl, #0
 8006890:	f8bc b000 	ldrh.w	fp, [ip]
 8006894:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006898:	fb09 220b 	mla	r2, r9, fp, r2
 800689c:	4452      	add	r2, sl
 800689e:	b289      	uxth	r1, r1
 80068a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80068a4:	f84e 1b04 	str.w	r1, [lr], #4
 80068a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80068ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80068b0:	f8be 1000 	ldrh.w	r1, [lr]
 80068b4:	fb09 110a 	mla	r1, r9, sl, r1
 80068b8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80068bc:	4567      	cmp	r7, ip
 80068be:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80068c2:	d8e5      	bhi.n	8006890 <__multiply+0x10c>
 80068c4:	9a01      	ldr	r2, [sp, #4]
 80068c6:	50a9      	str	r1, [r5, r2]
 80068c8:	3504      	adds	r5, #4
 80068ca:	e799      	b.n	8006800 <__multiply+0x7c>
 80068cc:	3e01      	subs	r6, #1
 80068ce:	e79b      	b.n	8006808 <__multiply+0x84>
 80068d0:	080077ee 	.word	0x080077ee
 80068d4:	080077ff 	.word	0x080077ff

080068d8 <__pow5mult>:
 80068d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068dc:	4615      	mov	r5, r2
 80068de:	f012 0203 	ands.w	r2, r2, #3
 80068e2:	4606      	mov	r6, r0
 80068e4:	460f      	mov	r7, r1
 80068e6:	d007      	beq.n	80068f8 <__pow5mult+0x20>
 80068e8:	4c25      	ldr	r4, [pc, #148]	; (8006980 <__pow5mult+0xa8>)
 80068ea:	3a01      	subs	r2, #1
 80068ec:	2300      	movs	r3, #0
 80068ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068f2:	f7ff fe9d 	bl	8006630 <__multadd>
 80068f6:	4607      	mov	r7, r0
 80068f8:	10ad      	asrs	r5, r5, #2
 80068fa:	d03d      	beq.n	8006978 <__pow5mult+0xa0>
 80068fc:	69f4      	ldr	r4, [r6, #28]
 80068fe:	b97c      	cbnz	r4, 8006920 <__pow5mult+0x48>
 8006900:	2010      	movs	r0, #16
 8006902:	f7ff fd7f 	bl	8006404 <malloc>
 8006906:	4602      	mov	r2, r0
 8006908:	61f0      	str	r0, [r6, #28]
 800690a:	b928      	cbnz	r0, 8006918 <__pow5mult+0x40>
 800690c:	4b1d      	ldr	r3, [pc, #116]	; (8006984 <__pow5mult+0xac>)
 800690e:	481e      	ldr	r0, [pc, #120]	; (8006988 <__pow5mult+0xb0>)
 8006910:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006914:	f7fe fe90 	bl	8005638 <__assert_func>
 8006918:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800691c:	6004      	str	r4, [r0, #0]
 800691e:	60c4      	str	r4, [r0, #12]
 8006920:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006924:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006928:	b94c      	cbnz	r4, 800693e <__pow5mult+0x66>
 800692a:	f240 2171 	movw	r1, #625	; 0x271
 800692e:	4630      	mov	r0, r6
 8006930:	f7ff ff12 	bl	8006758 <__i2b>
 8006934:	2300      	movs	r3, #0
 8006936:	f8c8 0008 	str.w	r0, [r8, #8]
 800693a:	4604      	mov	r4, r0
 800693c:	6003      	str	r3, [r0, #0]
 800693e:	f04f 0900 	mov.w	r9, #0
 8006942:	07eb      	lsls	r3, r5, #31
 8006944:	d50a      	bpl.n	800695c <__pow5mult+0x84>
 8006946:	4639      	mov	r1, r7
 8006948:	4622      	mov	r2, r4
 800694a:	4630      	mov	r0, r6
 800694c:	f7ff ff1a 	bl	8006784 <__multiply>
 8006950:	4639      	mov	r1, r7
 8006952:	4680      	mov	r8, r0
 8006954:	4630      	mov	r0, r6
 8006956:	f7ff fe49 	bl	80065ec <_Bfree>
 800695a:	4647      	mov	r7, r8
 800695c:	106d      	asrs	r5, r5, #1
 800695e:	d00b      	beq.n	8006978 <__pow5mult+0xa0>
 8006960:	6820      	ldr	r0, [r4, #0]
 8006962:	b938      	cbnz	r0, 8006974 <__pow5mult+0x9c>
 8006964:	4622      	mov	r2, r4
 8006966:	4621      	mov	r1, r4
 8006968:	4630      	mov	r0, r6
 800696a:	f7ff ff0b 	bl	8006784 <__multiply>
 800696e:	6020      	str	r0, [r4, #0]
 8006970:	f8c0 9000 	str.w	r9, [r0]
 8006974:	4604      	mov	r4, r0
 8006976:	e7e4      	b.n	8006942 <__pow5mult+0x6a>
 8006978:	4638      	mov	r0, r7
 800697a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800697e:	bf00      	nop
 8006980:	08007948 	.word	0x08007948
 8006984:	0800777f 	.word	0x0800777f
 8006988:	080077ff 	.word	0x080077ff

0800698c <__lshift>:
 800698c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006990:	460c      	mov	r4, r1
 8006992:	6849      	ldr	r1, [r1, #4]
 8006994:	6923      	ldr	r3, [r4, #16]
 8006996:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800699a:	68a3      	ldr	r3, [r4, #8]
 800699c:	4607      	mov	r7, r0
 800699e:	4691      	mov	r9, r2
 80069a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80069a4:	f108 0601 	add.w	r6, r8, #1
 80069a8:	42b3      	cmp	r3, r6
 80069aa:	db0b      	blt.n	80069c4 <__lshift+0x38>
 80069ac:	4638      	mov	r0, r7
 80069ae:	f7ff fddd 	bl	800656c <_Balloc>
 80069b2:	4605      	mov	r5, r0
 80069b4:	b948      	cbnz	r0, 80069ca <__lshift+0x3e>
 80069b6:	4602      	mov	r2, r0
 80069b8:	4b28      	ldr	r3, [pc, #160]	; (8006a5c <__lshift+0xd0>)
 80069ba:	4829      	ldr	r0, [pc, #164]	; (8006a60 <__lshift+0xd4>)
 80069bc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80069c0:	f7fe fe3a 	bl	8005638 <__assert_func>
 80069c4:	3101      	adds	r1, #1
 80069c6:	005b      	lsls	r3, r3, #1
 80069c8:	e7ee      	b.n	80069a8 <__lshift+0x1c>
 80069ca:	2300      	movs	r3, #0
 80069cc:	f100 0114 	add.w	r1, r0, #20
 80069d0:	f100 0210 	add.w	r2, r0, #16
 80069d4:	4618      	mov	r0, r3
 80069d6:	4553      	cmp	r3, sl
 80069d8:	db33      	blt.n	8006a42 <__lshift+0xb6>
 80069da:	6920      	ldr	r0, [r4, #16]
 80069dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069e0:	f104 0314 	add.w	r3, r4, #20
 80069e4:	f019 091f 	ands.w	r9, r9, #31
 80069e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80069ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80069f0:	d02b      	beq.n	8006a4a <__lshift+0xbe>
 80069f2:	f1c9 0e20 	rsb	lr, r9, #32
 80069f6:	468a      	mov	sl, r1
 80069f8:	2200      	movs	r2, #0
 80069fa:	6818      	ldr	r0, [r3, #0]
 80069fc:	fa00 f009 	lsl.w	r0, r0, r9
 8006a00:	4310      	orrs	r0, r2
 8006a02:	f84a 0b04 	str.w	r0, [sl], #4
 8006a06:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a0a:	459c      	cmp	ip, r3
 8006a0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a10:	d8f3      	bhi.n	80069fa <__lshift+0x6e>
 8006a12:	ebac 0304 	sub.w	r3, ip, r4
 8006a16:	3b15      	subs	r3, #21
 8006a18:	f023 0303 	bic.w	r3, r3, #3
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	f104 0015 	add.w	r0, r4, #21
 8006a22:	4584      	cmp	ip, r0
 8006a24:	bf38      	it	cc
 8006a26:	2304      	movcc	r3, #4
 8006a28:	50ca      	str	r2, [r1, r3]
 8006a2a:	b10a      	cbz	r2, 8006a30 <__lshift+0xa4>
 8006a2c:	f108 0602 	add.w	r6, r8, #2
 8006a30:	3e01      	subs	r6, #1
 8006a32:	4638      	mov	r0, r7
 8006a34:	612e      	str	r6, [r5, #16]
 8006a36:	4621      	mov	r1, r4
 8006a38:	f7ff fdd8 	bl	80065ec <_Bfree>
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a42:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a46:	3301      	adds	r3, #1
 8006a48:	e7c5      	b.n	80069d6 <__lshift+0x4a>
 8006a4a:	3904      	subs	r1, #4
 8006a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a50:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a54:	459c      	cmp	ip, r3
 8006a56:	d8f9      	bhi.n	8006a4c <__lshift+0xc0>
 8006a58:	e7ea      	b.n	8006a30 <__lshift+0xa4>
 8006a5a:	bf00      	nop
 8006a5c:	080077ee 	.word	0x080077ee
 8006a60:	080077ff 	.word	0x080077ff

08006a64 <__mcmp>:
 8006a64:	b530      	push	{r4, r5, lr}
 8006a66:	6902      	ldr	r2, [r0, #16]
 8006a68:	690c      	ldr	r4, [r1, #16]
 8006a6a:	1b12      	subs	r2, r2, r4
 8006a6c:	d10e      	bne.n	8006a8c <__mcmp+0x28>
 8006a6e:	f100 0314 	add.w	r3, r0, #20
 8006a72:	3114      	adds	r1, #20
 8006a74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006a78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006a7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006a80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006a84:	42a5      	cmp	r5, r4
 8006a86:	d003      	beq.n	8006a90 <__mcmp+0x2c>
 8006a88:	d305      	bcc.n	8006a96 <__mcmp+0x32>
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	4610      	mov	r0, r2
 8006a8e:	bd30      	pop	{r4, r5, pc}
 8006a90:	4283      	cmp	r3, r0
 8006a92:	d3f3      	bcc.n	8006a7c <__mcmp+0x18>
 8006a94:	e7fa      	b.n	8006a8c <__mcmp+0x28>
 8006a96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a9a:	e7f7      	b.n	8006a8c <__mcmp+0x28>

08006a9c <__mdiff>:
 8006a9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	4690      	mov	r8, r2
 8006aaa:	f7ff ffdb 	bl	8006a64 <__mcmp>
 8006aae:	1e05      	subs	r5, r0, #0
 8006ab0:	d110      	bne.n	8006ad4 <__mdiff+0x38>
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	f7ff fd59 	bl	800656c <_Balloc>
 8006aba:	b930      	cbnz	r0, 8006aca <__mdiff+0x2e>
 8006abc:	4b3a      	ldr	r3, [pc, #232]	; (8006ba8 <__mdiff+0x10c>)
 8006abe:	4602      	mov	r2, r0
 8006ac0:	f240 2137 	movw	r1, #567	; 0x237
 8006ac4:	4839      	ldr	r0, [pc, #228]	; (8006bac <__mdiff+0x110>)
 8006ac6:	f7fe fdb7 	bl	8005638 <__assert_func>
 8006aca:	2301      	movs	r3, #1
 8006acc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ad0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad4:	bfa4      	itt	ge
 8006ad6:	4643      	movge	r3, r8
 8006ad8:	46a0      	movge	r8, r4
 8006ada:	4630      	mov	r0, r6
 8006adc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006ae0:	bfa6      	itte	ge
 8006ae2:	461c      	movge	r4, r3
 8006ae4:	2500      	movge	r5, #0
 8006ae6:	2501      	movlt	r5, #1
 8006ae8:	f7ff fd40 	bl	800656c <_Balloc>
 8006aec:	b920      	cbnz	r0, 8006af8 <__mdiff+0x5c>
 8006aee:	4b2e      	ldr	r3, [pc, #184]	; (8006ba8 <__mdiff+0x10c>)
 8006af0:	4602      	mov	r2, r0
 8006af2:	f240 2145 	movw	r1, #581	; 0x245
 8006af6:	e7e5      	b.n	8006ac4 <__mdiff+0x28>
 8006af8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006afc:	6926      	ldr	r6, [r4, #16]
 8006afe:	60c5      	str	r5, [r0, #12]
 8006b00:	f104 0914 	add.w	r9, r4, #20
 8006b04:	f108 0514 	add.w	r5, r8, #20
 8006b08:	f100 0e14 	add.w	lr, r0, #20
 8006b0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006b10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006b14:	f108 0210 	add.w	r2, r8, #16
 8006b18:	46f2      	mov	sl, lr
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006b24:	fa11 f88b 	uxtah	r8, r1, fp
 8006b28:	b299      	uxth	r1, r3
 8006b2a:	0c1b      	lsrs	r3, r3, #16
 8006b2c:	eba8 0801 	sub.w	r8, r8, r1
 8006b30:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006b34:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006b38:	fa1f f888 	uxth.w	r8, r8
 8006b3c:	1419      	asrs	r1, r3, #16
 8006b3e:	454e      	cmp	r6, r9
 8006b40:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006b44:	f84a 3b04 	str.w	r3, [sl], #4
 8006b48:	d8e8      	bhi.n	8006b1c <__mdiff+0x80>
 8006b4a:	1b33      	subs	r3, r6, r4
 8006b4c:	3b15      	subs	r3, #21
 8006b4e:	f023 0303 	bic.w	r3, r3, #3
 8006b52:	3304      	adds	r3, #4
 8006b54:	3415      	adds	r4, #21
 8006b56:	42a6      	cmp	r6, r4
 8006b58:	bf38      	it	cc
 8006b5a:	2304      	movcc	r3, #4
 8006b5c:	441d      	add	r5, r3
 8006b5e:	4473      	add	r3, lr
 8006b60:	469e      	mov	lr, r3
 8006b62:	462e      	mov	r6, r5
 8006b64:	4566      	cmp	r6, ip
 8006b66:	d30e      	bcc.n	8006b86 <__mdiff+0xea>
 8006b68:	f10c 0203 	add.w	r2, ip, #3
 8006b6c:	1b52      	subs	r2, r2, r5
 8006b6e:	f022 0203 	bic.w	r2, r2, #3
 8006b72:	3d03      	subs	r5, #3
 8006b74:	45ac      	cmp	ip, r5
 8006b76:	bf38      	it	cc
 8006b78:	2200      	movcc	r2, #0
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006b80:	b17a      	cbz	r2, 8006ba2 <__mdiff+0x106>
 8006b82:	6107      	str	r7, [r0, #16]
 8006b84:	e7a4      	b.n	8006ad0 <__mdiff+0x34>
 8006b86:	f856 8b04 	ldr.w	r8, [r6], #4
 8006b8a:	fa11 f288 	uxtah	r2, r1, r8
 8006b8e:	1414      	asrs	r4, r2, #16
 8006b90:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006b94:	b292      	uxth	r2, r2
 8006b96:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006b9a:	f84e 2b04 	str.w	r2, [lr], #4
 8006b9e:	1421      	asrs	r1, r4, #16
 8006ba0:	e7e0      	b.n	8006b64 <__mdiff+0xc8>
 8006ba2:	3f01      	subs	r7, #1
 8006ba4:	e7ea      	b.n	8006b7c <__mdiff+0xe0>
 8006ba6:	bf00      	nop
 8006ba8:	080077ee 	.word	0x080077ee
 8006bac:	080077ff 	.word	0x080077ff

08006bb0 <__d2b>:
 8006bb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006bb4:	460f      	mov	r7, r1
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	ec59 8b10 	vmov	r8, r9, d0
 8006bbc:	4616      	mov	r6, r2
 8006bbe:	f7ff fcd5 	bl	800656c <_Balloc>
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	b930      	cbnz	r0, 8006bd4 <__d2b+0x24>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	4b24      	ldr	r3, [pc, #144]	; (8006c5c <__d2b+0xac>)
 8006bca:	4825      	ldr	r0, [pc, #148]	; (8006c60 <__d2b+0xb0>)
 8006bcc:	f240 310f 	movw	r1, #783	; 0x30f
 8006bd0:	f7fe fd32 	bl	8005638 <__assert_func>
 8006bd4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006bd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006bdc:	bb2d      	cbnz	r5, 8006c2a <__d2b+0x7a>
 8006bde:	9301      	str	r3, [sp, #4]
 8006be0:	f1b8 0300 	subs.w	r3, r8, #0
 8006be4:	d026      	beq.n	8006c34 <__d2b+0x84>
 8006be6:	4668      	mov	r0, sp
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	f7ff fd87 	bl	80066fc <__lo0bits>
 8006bee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006bf2:	b1e8      	cbz	r0, 8006c30 <__d2b+0x80>
 8006bf4:	f1c0 0320 	rsb	r3, r0, #32
 8006bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfc:	430b      	orrs	r3, r1
 8006bfe:	40c2      	lsrs	r2, r0
 8006c00:	6163      	str	r3, [r4, #20]
 8006c02:	9201      	str	r2, [sp, #4]
 8006c04:	9b01      	ldr	r3, [sp, #4]
 8006c06:	61a3      	str	r3, [r4, #24]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	bf14      	ite	ne
 8006c0c:	2202      	movne	r2, #2
 8006c0e:	2201      	moveq	r2, #1
 8006c10:	6122      	str	r2, [r4, #16]
 8006c12:	b1bd      	cbz	r5, 8006c44 <__d2b+0x94>
 8006c14:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006c18:	4405      	add	r5, r0
 8006c1a:	603d      	str	r5, [r7, #0]
 8006c1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c20:	6030      	str	r0, [r6, #0]
 8006c22:	4620      	mov	r0, r4
 8006c24:	b003      	add	sp, #12
 8006c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c2e:	e7d6      	b.n	8006bde <__d2b+0x2e>
 8006c30:	6161      	str	r1, [r4, #20]
 8006c32:	e7e7      	b.n	8006c04 <__d2b+0x54>
 8006c34:	a801      	add	r0, sp, #4
 8006c36:	f7ff fd61 	bl	80066fc <__lo0bits>
 8006c3a:	9b01      	ldr	r3, [sp, #4]
 8006c3c:	6163      	str	r3, [r4, #20]
 8006c3e:	3020      	adds	r0, #32
 8006c40:	2201      	movs	r2, #1
 8006c42:	e7e5      	b.n	8006c10 <__d2b+0x60>
 8006c44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c4c:	6038      	str	r0, [r7, #0]
 8006c4e:	6918      	ldr	r0, [r3, #16]
 8006c50:	f7ff fd34 	bl	80066bc <__hi0bits>
 8006c54:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c58:	e7e2      	b.n	8006c20 <__d2b+0x70>
 8006c5a:	bf00      	nop
 8006c5c:	080077ee 	.word	0x080077ee
 8006c60:	080077ff 	.word	0x080077ff

08006c64 <__ssputs_r>:
 8006c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c68:	688e      	ldr	r6, [r1, #8]
 8006c6a:	461f      	mov	r7, r3
 8006c6c:	42be      	cmp	r6, r7
 8006c6e:	680b      	ldr	r3, [r1, #0]
 8006c70:	4682      	mov	sl, r0
 8006c72:	460c      	mov	r4, r1
 8006c74:	4690      	mov	r8, r2
 8006c76:	d82c      	bhi.n	8006cd2 <__ssputs_r+0x6e>
 8006c78:	898a      	ldrh	r2, [r1, #12]
 8006c7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c7e:	d026      	beq.n	8006cce <__ssputs_r+0x6a>
 8006c80:	6965      	ldr	r5, [r4, #20]
 8006c82:	6909      	ldr	r1, [r1, #16]
 8006c84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c88:	eba3 0901 	sub.w	r9, r3, r1
 8006c8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c90:	1c7b      	adds	r3, r7, #1
 8006c92:	444b      	add	r3, r9
 8006c94:	106d      	asrs	r5, r5, #1
 8006c96:	429d      	cmp	r5, r3
 8006c98:	bf38      	it	cc
 8006c9a:	461d      	movcc	r5, r3
 8006c9c:	0553      	lsls	r3, r2, #21
 8006c9e:	d527      	bpl.n	8006cf0 <__ssputs_r+0x8c>
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	f7ff fbd7 	bl	8006454 <_malloc_r>
 8006ca6:	4606      	mov	r6, r0
 8006ca8:	b360      	cbz	r0, 8006d04 <__ssputs_r+0xa0>
 8006caa:	6921      	ldr	r1, [r4, #16]
 8006cac:	464a      	mov	r2, r9
 8006cae:	f7fe fcb5 	bl	800561c <memcpy>
 8006cb2:	89a3      	ldrh	r3, [r4, #12]
 8006cb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cbc:	81a3      	strh	r3, [r4, #12]
 8006cbe:	6126      	str	r6, [r4, #16]
 8006cc0:	6165      	str	r5, [r4, #20]
 8006cc2:	444e      	add	r6, r9
 8006cc4:	eba5 0509 	sub.w	r5, r5, r9
 8006cc8:	6026      	str	r6, [r4, #0]
 8006cca:	60a5      	str	r5, [r4, #8]
 8006ccc:	463e      	mov	r6, r7
 8006cce:	42be      	cmp	r6, r7
 8006cd0:	d900      	bls.n	8006cd4 <__ssputs_r+0x70>
 8006cd2:	463e      	mov	r6, r7
 8006cd4:	6820      	ldr	r0, [r4, #0]
 8006cd6:	4632      	mov	r2, r6
 8006cd8:	4641      	mov	r1, r8
 8006cda:	f000 fb81 	bl	80073e0 <memmove>
 8006cde:	68a3      	ldr	r3, [r4, #8]
 8006ce0:	1b9b      	subs	r3, r3, r6
 8006ce2:	60a3      	str	r3, [r4, #8]
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	4433      	add	r3, r6
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	2000      	movs	r0, #0
 8006cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cf0:	462a      	mov	r2, r5
 8006cf2:	f000 fbf0 	bl	80074d6 <_realloc_r>
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	d1e0      	bne.n	8006cbe <__ssputs_r+0x5a>
 8006cfc:	6921      	ldr	r1, [r4, #16]
 8006cfe:	4650      	mov	r0, sl
 8006d00:	f7ff fb34 	bl	800636c <_free_r>
 8006d04:	230c      	movs	r3, #12
 8006d06:	f8ca 3000 	str.w	r3, [sl]
 8006d0a:	89a3      	ldrh	r3, [r4, #12]
 8006d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d10:	81a3      	strh	r3, [r4, #12]
 8006d12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d16:	e7e9      	b.n	8006cec <__ssputs_r+0x88>

08006d18 <_svfiprintf_r>:
 8006d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d1c:	4698      	mov	r8, r3
 8006d1e:	898b      	ldrh	r3, [r1, #12]
 8006d20:	061b      	lsls	r3, r3, #24
 8006d22:	b09d      	sub	sp, #116	; 0x74
 8006d24:	4607      	mov	r7, r0
 8006d26:	460d      	mov	r5, r1
 8006d28:	4614      	mov	r4, r2
 8006d2a:	d50e      	bpl.n	8006d4a <_svfiprintf_r+0x32>
 8006d2c:	690b      	ldr	r3, [r1, #16]
 8006d2e:	b963      	cbnz	r3, 8006d4a <_svfiprintf_r+0x32>
 8006d30:	2140      	movs	r1, #64	; 0x40
 8006d32:	f7ff fb8f 	bl	8006454 <_malloc_r>
 8006d36:	6028      	str	r0, [r5, #0]
 8006d38:	6128      	str	r0, [r5, #16]
 8006d3a:	b920      	cbnz	r0, 8006d46 <_svfiprintf_r+0x2e>
 8006d3c:	230c      	movs	r3, #12
 8006d3e:	603b      	str	r3, [r7, #0]
 8006d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d44:	e0d0      	b.n	8006ee8 <_svfiprintf_r+0x1d0>
 8006d46:	2340      	movs	r3, #64	; 0x40
 8006d48:	616b      	str	r3, [r5, #20]
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d4e:	2320      	movs	r3, #32
 8006d50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d54:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d58:	2330      	movs	r3, #48	; 0x30
 8006d5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006f00 <_svfiprintf_r+0x1e8>
 8006d5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d62:	f04f 0901 	mov.w	r9, #1
 8006d66:	4623      	mov	r3, r4
 8006d68:	469a      	mov	sl, r3
 8006d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d6e:	b10a      	cbz	r2, 8006d74 <_svfiprintf_r+0x5c>
 8006d70:	2a25      	cmp	r2, #37	; 0x25
 8006d72:	d1f9      	bne.n	8006d68 <_svfiprintf_r+0x50>
 8006d74:	ebba 0b04 	subs.w	fp, sl, r4
 8006d78:	d00b      	beq.n	8006d92 <_svfiprintf_r+0x7a>
 8006d7a:	465b      	mov	r3, fp
 8006d7c:	4622      	mov	r2, r4
 8006d7e:	4629      	mov	r1, r5
 8006d80:	4638      	mov	r0, r7
 8006d82:	f7ff ff6f 	bl	8006c64 <__ssputs_r>
 8006d86:	3001      	adds	r0, #1
 8006d88:	f000 80a9 	beq.w	8006ede <_svfiprintf_r+0x1c6>
 8006d8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d8e:	445a      	add	r2, fp
 8006d90:	9209      	str	r2, [sp, #36]	; 0x24
 8006d92:	f89a 3000 	ldrb.w	r3, [sl]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f000 80a1 	beq.w	8006ede <_svfiprintf_r+0x1c6>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006da2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006da6:	f10a 0a01 	add.w	sl, sl, #1
 8006daa:	9304      	str	r3, [sp, #16]
 8006dac:	9307      	str	r3, [sp, #28]
 8006dae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006db2:	931a      	str	r3, [sp, #104]	; 0x68
 8006db4:	4654      	mov	r4, sl
 8006db6:	2205      	movs	r2, #5
 8006db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dbc:	4850      	ldr	r0, [pc, #320]	; (8006f00 <_svfiprintf_r+0x1e8>)
 8006dbe:	f7f9 fa07 	bl	80001d0 <memchr>
 8006dc2:	9a04      	ldr	r2, [sp, #16]
 8006dc4:	b9d8      	cbnz	r0, 8006dfe <_svfiprintf_r+0xe6>
 8006dc6:	06d0      	lsls	r0, r2, #27
 8006dc8:	bf44      	itt	mi
 8006dca:	2320      	movmi	r3, #32
 8006dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dd0:	0711      	lsls	r1, r2, #28
 8006dd2:	bf44      	itt	mi
 8006dd4:	232b      	movmi	r3, #43	; 0x2b
 8006dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dda:	f89a 3000 	ldrb.w	r3, [sl]
 8006dde:	2b2a      	cmp	r3, #42	; 0x2a
 8006de0:	d015      	beq.n	8006e0e <_svfiprintf_r+0xf6>
 8006de2:	9a07      	ldr	r2, [sp, #28]
 8006de4:	4654      	mov	r4, sl
 8006de6:	2000      	movs	r0, #0
 8006de8:	f04f 0c0a 	mov.w	ip, #10
 8006dec:	4621      	mov	r1, r4
 8006dee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006df2:	3b30      	subs	r3, #48	; 0x30
 8006df4:	2b09      	cmp	r3, #9
 8006df6:	d94d      	bls.n	8006e94 <_svfiprintf_r+0x17c>
 8006df8:	b1b0      	cbz	r0, 8006e28 <_svfiprintf_r+0x110>
 8006dfa:	9207      	str	r2, [sp, #28]
 8006dfc:	e014      	b.n	8006e28 <_svfiprintf_r+0x110>
 8006dfe:	eba0 0308 	sub.w	r3, r0, r8
 8006e02:	fa09 f303 	lsl.w	r3, r9, r3
 8006e06:	4313      	orrs	r3, r2
 8006e08:	9304      	str	r3, [sp, #16]
 8006e0a:	46a2      	mov	sl, r4
 8006e0c:	e7d2      	b.n	8006db4 <_svfiprintf_r+0x9c>
 8006e0e:	9b03      	ldr	r3, [sp, #12]
 8006e10:	1d19      	adds	r1, r3, #4
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	9103      	str	r1, [sp, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	bfbb      	ittet	lt
 8006e1a:	425b      	neglt	r3, r3
 8006e1c:	f042 0202 	orrlt.w	r2, r2, #2
 8006e20:	9307      	strge	r3, [sp, #28]
 8006e22:	9307      	strlt	r3, [sp, #28]
 8006e24:	bfb8      	it	lt
 8006e26:	9204      	strlt	r2, [sp, #16]
 8006e28:	7823      	ldrb	r3, [r4, #0]
 8006e2a:	2b2e      	cmp	r3, #46	; 0x2e
 8006e2c:	d10c      	bne.n	8006e48 <_svfiprintf_r+0x130>
 8006e2e:	7863      	ldrb	r3, [r4, #1]
 8006e30:	2b2a      	cmp	r3, #42	; 0x2a
 8006e32:	d134      	bne.n	8006e9e <_svfiprintf_r+0x186>
 8006e34:	9b03      	ldr	r3, [sp, #12]
 8006e36:	1d1a      	adds	r2, r3, #4
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	9203      	str	r2, [sp, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	bfb8      	it	lt
 8006e40:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006e44:	3402      	adds	r4, #2
 8006e46:	9305      	str	r3, [sp, #20]
 8006e48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006f10 <_svfiprintf_r+0x1f8>
 8006e4c:	7821      	ldrb	r1, [r4, #0]
 8006e4e:	2203      	movs	r2, #3
 8006e50:	4650      	mov	r0, sl
 8006e52:	f7f9 f9bd 	bl	80001d0 <memchr>
 8006e56:	b138      	cbz	r0, 8006e68 <_svfiprintf_r+0x150>
 8006e58:	9b04      	ldr	r3, [sp, #16]
 8006e5a:	eba0 000a 	sub.w	r0, r0, sl
 8006e5e:	2240      	movs	r2, #64	; 0x40
 8006e60:	4082      	lsls	r2, r0
 8006e62:	4313      	orrs	r3, r2
 8006e64:	3401      	adds	r4, #1
 8006e66:	9304      	str	r3, [sp, #16]
 8006e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e6c:	4825      	ldr	r0, [pc, #148]	; (8006f04 <_svfiprintf_r+0x1ec>)
 8006e6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e72:	2206      	movs	r2, #6
 8006e74:	f7f9 f9ac 	bl	80001d0 <memchr>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	d038      	beq.n	8006eee <_svfiprintf_r+0x1d6>
 8006e7c:	4b22      	ldr	r3, [pc, #136]	; (8006f08 <_svfiprintf_r+0x1f0>)
 8006e7e:	bb1b      	cbnz	r3, 8006ec8 <_svfiprintf_r+0x1b0>
 8006e80:	9b03      	ldr	r3, [sp, #12]
 8006e82:	3307      	adds	r3, #7
 8006e84:	f023 0307 	bic.w	r3, r3, #7
 8006e88:	3308      	adds	r3, #8
 8006e8a:	9303      	str	r3, [sp, #12]
 8006e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e8e:	4433      	add	r3, r6
 8006e90:	9309      	str	r3, [sp, #36]	; 0x24
 8006e92:	e768      	b.n	8006d66 <_svfiprintf_r+0x4e>
 8006e94:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e98:	460c      	mov	r4, r1
 8006e9a:	2001      	movs	r0, #1
 8006e9c:	e7a6      	b.n	8006dec <_svfiprintf_r+0xd4>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	3401      	adds	r4, #1
 8006ea2:	9305      	str	r3, [sp, #20]
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	f04f 0c0a 	mov.w	ip, #10
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006eb0:	3a30      	subs	r2, #48	; 0x30
 8006eb2:	2a09      	cmp	r2, #9
 8006eb4:	d903      	bls.n	8006ebe <_svfiprintf_r+0x1a6>
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d0c6      	beq.n	8006e48 <_svfiprintf_r+0x130>
 8006eba:	9105      	str	r1, [sp, #20]
 8006ebc:	e7c4      	b.n	8006e48 <_svfiprintf_r+0x130>
 8006ebe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e7f0      	b.n	8006eaa <_svfiprintf_r+0x192>
 8006ec8:	ab03      	add	r3, sp, #12
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	462a      	mov	r2, r5
 8006ece:	4b0f      	ldr	r3, [pc, #60]	; (8006f0c <_svfiprintf_r+0x1f4>)
 8006ed0:	a904      	add	r1, sp, #16
 8006ed2:	4638      	mov	r0, r7
 8006ed4:	f7fd fdb6 	bl	8004a44 <_printf_float>
 8006ed8:	1c42      	adds	r2, r0, #1
 8006eda:	4606      	mov	r6, r0
 8006edc:	d1d6      	bne.n	8006e8c <_svfiprintf_r+0x174>
 8006ede:	89ab      	ldrh	r3, [r5, #12]
 8006ee0:	065b      	lsls	r3, r3, #25
 8006ee2:	f53f af2d 	bmi.w	8006d40 <_svfiprintf_r+0x28>
 8006ee6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ee8:	b01d      	add	sp, #116	; 0x74
 8006eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eee:	ab03      	add	r3, sp, #12
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	462a      	mov	r2, r5
 8006ef4:	4b05      	ldr	r3, [pc, #20]	; (8006f0c <_svfiprintf_r+0x1f4>)
 8006ef6:	a904      	add	r1, sp, #16
 8006ef8:	4638      	mov	r0, r7
 8006efa:	f7fe f847 	bl	8004f8c <_printf_i>
 8006efe:	e7eb      	b.n	8006ed8 <_svfiprintf_r+0x1c0>
 8006f00:	08007954 	.word	0x08007954
 8006f04:	0800795e 	.word	0x0800795e
 8006f08:	08004a45 	.word	0x08004a45
 8006f0c:	08006c65 	.word	0x08006c65
 8006f10:	0800795a 	.word	0x0800795a

08006f14 <__sfputc_r>:
 8006f14:	6893      	ldr	r3, [r2, #8]
 8006f16:	3b01      	subs	r3, #1
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	b410      	push	{r4}
 8006f1c:	6093      	str	r3, [r2, #8]
 8006f1e:	da08      	bge.n	8006f32 <__sfputc_r+0x1e>
 8006f20:	6994      	ldr	r4, [r2, #24]
 8006f22:	42a3      	cmp	r3, r4
 8006f24:	db01      	blt.n	8006f2a <__sfputc_r+0x16>
 8006f26:	290a      	cmp	r1, #10
 8006f28:	d103      	bne.n	8006f32 <__sfputc_r+0x1e>
 8006f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f2e:	f7fe ba62 	b.w	80053f6 <__swbuf_r>
 8006f32:	6813      	ldr	r3, [r2, #0]
 8006f34:	1c58      	adds	r0, r3, #1
 8006f36:	6010      	str	r0, [r2, #0]
 8006f38:	7019      	strb	r1, [r3, #0]
 8006f3a:	4608      	mov	r0, r1
 8006f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <__sfputs_r>:
 8006f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f44:	4606      	mov	r6, r0
 8006f46:	460f      	mov	r7, r1
 8006f48:	4614      	mov	r4, r2
 8006f4a:	18d5      	adds	r5, r2, r3
 8006f4c:	42ac      	cmp	r4, r5
 8006f4e:	d101      	bne.n	8006f54 <__sfputs_r+0x12>
 8006f50:	2000      	movs	r0, #0
 8006f52:	e007      	b.n	8006f64 <__sfputs_r+0x22>
 8006f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f58:	463a      	mov	r2, r7
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	f7ff ffda 	bl	8006f14 <__sfputc_r>
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	d1f3      	bne.n	8006f4c <__sfputs_r+0xa>
 8006f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f68 <_vfiprintf_r>:
 8006f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6c:	460d      	mov	r5, r1
 8006f6e:	b09d      	sub	sp, #116	; 0x74
 8006f70:	4614      	mov	r4, r2
 8006f72:	4698      	mov	r8, r3
 8006f74:	4606      	mov	r6, r0
 8006f76:	b118      	cbz	r0, 8006f80 <_vfiprintf_r+0x18>
 8006f78:	6a03      	ldr	r3, [r0, #32]
 8006f7a:	b90b      	cbnz	r3, 8006f80 <_vfiprintf_r+0x18>
 8006f7c:	f7fe f9a2 	bl	80052c4 <__sinit>
 8006f80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f82:	07d9      	lsls	r1, r3, #31
 8006f84:	d405      	bmi.n	8006f92 <_vfiprintf_r+0x2a>
 8006f86:	89ab      	ldrh	r3, [r5, #12]
 8006f88:	059a      	lsls	r2, r3, #22
 8006f8a:	d402      	bmi.n	8006f92 <_vfiprintf_r+0x2a>
 8006f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f8e:	f7fe fb43 	bl	8005618 <__retarget_lock_acquire_recursive>
 8006f92:	89ab      	ldrh	r3, [r5, #12]
 8006f94:	071b      	lsls	r3, r3, #28
 8006f96:	d501      	bpl.n	8006f9c <_vfiprintf_r+0x34>
 8006f98:	692b      	ldr	r3, [r5, #16]
 8006f9a:	b99b      	cbnz	r3, 8006fc4 <_vfiprintf_r+0x5c>
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	f7fe fa66 	bl	8005470 <__swsetup_r>
 8006fa4:	b170      	cbz	r0, 8006fc4 <_vfiprintf_r+0x5c>
 8006fa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fa8:	07dc      	lsls	r4, r3, #31
 8006faa:	d504      	bpl.n	8006fb6 <_vfiprintf_r+0x4e>
 8006fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fb0:	b01d      	add	sp, #116	; 0x74
 8006fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb6:	89ab      	ldrh	r3, [r5, #12]
 8006fb8:	0598      	lsls	r0, r3, #22
 8006fba:	d4f7      	bmi.n	8006fac <_vfiprintf_r+0x44>
 8006fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fbe:	f7fe fb2c 	bl	800561a <__retarget_lock_release_recursive>
 8006fc2:	e7f3      	b.n	8006fac <_vfiprintf_r+0x44>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8006fc8:	2320      	movs	r3, #32
 8006fca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fce:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fd2:	2330      	movs	r3, #48	; 0x30
 8006fd4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007188 <_vfiprintf_r+0x220>
 8006fd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fdc:	f04f 0901 	mov.w	r9, #1
 8006fe0:	4623      	mov	r3, r4
 8006fe2:	469a      	mov	sl, r3
 8006fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fe8:	b10a      	cbz	r2, 8006fee <_vfiprintf_r+0x86>
 8006fea:	2a25      	cmp	r2, #37	; 0x25
 8006fec:	d1f9      	bne.n	8006fe2 <_vfiprintf_r+0x7a>
 8006fee:	ebba 0b04 	subs.w	fp, sl, r4
 8006ff2:	d00b      	beq.n	800700c <_vfiprintf_r+0xa4>
 8006ff4:	465b      	mov	r3, fp
 8006ff6:	4622      	mov	r2, r4
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	f7ff ffa1 	bl	8006f42 <__sfputs_r>
 8007000:	3001      	adds	r0, #1
 8007002:	f000 80a9 	beq.w	8007158 <_vfiprintf_r+0x1f0>
 8007006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007008:	445a      	add	r2, fp
 800700a:	9209      	str	r2, [sp, #36]	; 0x24
 800700c:	f89a 3000 	ldrb.w	r3, [sl]
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 80a1 	beq.w	8007158 <_vfiprintf_r+0x1f0>
 8007016:	2300      	movs	r3, #0
 8007018:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800701c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007020:	f10a 0a01 	add.w	sl, sl, #1
 8007024:	9304      	str	r3, [sp, #16]
 8007026:	9307      	str	r3, [sp, #28]
 8007028:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800702c:	931a      	str	r3, [sp, #104]	; 0x68
 800702e:	4654      	mov	r4, sl
 8007030:	2205      	movs	r2, #5
 8007032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007036:	4854      	ldr	r0, [pc, #336]	; (8007188 <_vfiprintf_r+0x220>)
 8007038:	f7f9 f8ca 	bl	80001d0 <memchr>
 800703c:	9a04      	ldr	r2, [sp, #16]
 800703e:	b9d8      	cbnz	r0, 8007078 <_vfiprintf_r+0x110>
 8007040:	06d1      	lsls	r1, r2, #27
 8007042:	bf44      	itt	mi
 8007044:	2320      	movmi	r3, #32
 8007046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800704a:	0713      	lsls	r3, r2, #28
 800704c:	bf44      	itt	mi
 800704e:	232b      	movmi	r3, #43	; 0x2b
 8007050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007054:	f89a 3000 	ldrb.w	r3, [sl]
 8007058:	2b2a      	cmp	r3, #42	; 0x2a
 800705a:	d015      	beq.n	8007088 <_vfiprintf_r+0x120>
 800705c:	9a07      	ldr	r2, [sp, #28]
 800705e:	4654      	mov	r4, sl
 8007060:	2000      	movs	r0, #0
 8007062:	f04f 0c0a 	mov.w	ip, #10
 8007066:	4621      	mov	r1, r4
 8007068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800706c:	3b30      	subs	r3, #48	; 0x30
 800706e:	2b09      	cmp	r3, #9
 8007070:	d94d      	bls.n	800710e <_vfiprintf_r+0x1a6>
 8007072:	b1b0      	cbz	r0, 80070a2 <_vfiprintf_r+0x13a>
 8007074:	9207      	str	r2, [sp, #28]
 8007076:	e014      	b.n	80070a2 <_vfiprintf_r+0x13a>
 8007078:	eba0 0308 	sub.w	r3, r0, r8
 800707c:	fa09 f303 	lsl.w	r3, r9, r3
 8007080:	4313      	orrs	r3, r2
 8007082:	9304      	str	r3, [sp, #16]
 8007084:	46a2      	mov	sl, r4
 8007086:	e7d2      	b.n	800702e <_vfiprintf_r+0xc6>
 8007088:	9b03      	ldr	r3, [sp, #12]
 800708a:	1d19      	adds	r1, r3, #4
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	9103      	str	r1, [sp, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	bfbb      	ittet	lt
 8007094:	425b      	neglt	r3, r3
 8007096:	f042 0202 	orrlt.w	r2, r2, #2
 800709a:	9307      	strge	r3, [sp, #28]
 800709c:	9307      	strlt	r3, [sp, #28]
 800709e:	bfb8      	it	lt
 80070a0:	9204      	strlt	r2, [sp, #16]
 80070a2:	7823      	ldrb	r3, [r4, #0]
 80070a4:	2b2e      	cmp	r3, #46	; 0x2e
 80070a6:	d10c      	bne.n	80070c2 <_vfiprintf_r+0x15a>
 80070a8:	7863      	ldrb	r3, [r4, #1]
 80070aa:	2b2a      	cmp	r3, #42	; 0x2a
 80070ac:	d134      	bne.n	8007118 <_vfiprintf_r+0x1b0>
 80070ae:	9b03      	ldr	r3, [sp, #12]
 80070b0:	1d1a      	adds	r2, r3, #4
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	9203      	str	r2, [sp, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	bfb8      	it	lt
 80070ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80070be:	3402      	adds	r4, #2
 80070c0:	9305      	str	r3, [sp, #20]
 80070c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007198 <_vfiprintf_r+0x230>
 80070c6:	7821      	ldrb	r1, [r4, #0]
 80070c8:	2203      	movs	r2, #3
 80070ca:	4650      	mov	r0, sl
 80070cc:	f7f9 f880 	bl	80001d0 <memchr>
 80070d0:	b138      	cbz	r0, 80070e2 <_vfiprintf_r+0x17a>
 80070d2:	9b04      	ldr	r3, [sp, #16]
 80070d4:	eba0 000a 	sub.w	r0, r0, sl
 80070d8:	2240      	movs	r2, #64	; 0x40
 80070da:	4082      	lsls	r2, r0
 80070dc:	4313      	orrs	r3, r2
 80070de:	3401      	adds	r4, #1
 80070e0:	9304      	str	r3, [sp, #16]
 80070e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070e6:	4829      	ldr	r0, [pc, #164]	; (800718c <_vfiprintf_r+0x224>)
 80070e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070ec:	2206      	movs	r2, #6
 80070ee:	f7f9 f86f 	bl	80001d0 <memchr>
 80070f2:	2800      	cmp	r0, #0
 80070f4:	d03f      	beq.n	8007176 <_vfiprintf_r+0x20e>
 80070f6:	4b26      	ldr	r3, [pc, #152]	; (8007190 <_vfiprintf_r+0x228>)
 80070f8:	bb1b      	cbnz	r3, 8007142 <_vfiprintf_r+0x1da>
 80070fa:	9b03      	ldr	r3, [sp, #12]
 80070fc:	3307      	adds	r3, #7
 80070fe:	f023 0307 	bic.w	r3, r3, #7
 8007102:	3308      	adds	r3, #8
 8007104:	9303      	str	r3, [sp, #12]
 8007106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007108:	443b      	add	r3, r7
 800710a:	9309      	str	r3, [sp, #36]	; 0x24
 800710c:	e768      	b.n	8006fe0 <_vfiprintf_r+0x78>
 800710e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007112:	460c      	mov	r4, r1
 8007114:	2001      	movs	r0, #1
 8007116:	e7a6      	b.n	8007066 <_vfiprintf_r+0xfe>
 8007118:	2300      	movs	r3, #0
 800711a:	3401      	adds	r4, #1
 800711c:	9305      	str	r3, [sp, #20]
 800711e:	4619      	mov	r1, r3
 8007120:	f04f 0c0a 	mov.w	ip, #10
 8007124:	4620      	mov	r0, r4
 8007126:	f810 2b01 	ldrb.w	r2, [r0], #1
 800712a:	3a30      	subs	r2, #48	; 0x30
 800712c:	2a09      	cmp	r2, #9
 800712e:	d903      	bls.n	8007138 <_vfiprintf_r+0x1d0>
 8007130:	2b00      	cmp	r3, #0
 8007132:	d0c6      	beq.n	80070c2 <_vfiprintf_r+0x15a>
 8007134:	9105      	str	r1, [sp, #20]
 8007136:	e7c4      	b.n	80070c2 <_vfiprintf_r+0x15a>
 8007138:	fb0c 2101 	mla	r1, ip, r1, r2
 800713c:	4604      	mov	r4, r0
 800713e:	2301      	movs	r3, #1
 8007140:	e7f0      	b.n	8007124 <_vfiprintf_r+0x1bc>
 8007142:	ab03      	add	r3, sp, #12
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	462a      	mov	r2, r5
 8007148:	4b12      	ldr	r3, [pc, #72]	; (8007194 <_vfiprintf_r+0x22c>)
 800714a:	a904      	add	r1, sp, #16
 800714c:	4630      	mov	r0, r6
 800714e:	f7fd fc79 	bl	8004a44 <_printf_float>
 8007152:	4607      	mov	r7, r0
 8007154:	1c78      	adds	r0, r7, #1
 8007156:	d1d6      	bne.n	8007106 <_vfiprintf_r+0x19e>
 8007158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800715a:	07d9      	lsls	r1, r3, #31
 800715c:	d405      	bmi.n	800716a <_vfiprintf_r+0x202>
 800715e:	89ab      	ldrh	r3, [r5, #12]
 8007160:	059a      	lsls	r2, r3, #22
 8007162:	d402      	bmi.n	800716a <_vfiprintf_r+0x202>
 8007164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007166:	f7fe fa58 	bl	800561a <__retarget_lock_release_recursive>
 800716a:	89ab      	ldrh	r3, [r5, #12]
 800716c:	065b      	lsls	r3, r3, #25
 800716e:	f53f af1d 	bmi.w	8006fac <_vfiprintf_r+0x44>
 8007172:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007174:	e71c      	b.n	8006fb0 <_vfiprintf_r+0x48>
 8007176:	ab03      	add	r3, sp, #12
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	462a      	mov	r2, r5
 800717c:	4b05      	ldr	r3, [pc, #20]	; (8007194 <_vfiprintf_r+0x22c>)
 800717e:	a904      	add	r1, sp, #16
 8007180:	4630      	mov	r0, r6
 8007182:	f7fd ff03 	bl	8004f8c <_printf_i>
 8007186:	e7e4      	b.n	8007152 <_vfiprintf_r+0x1ea>
 8007188:	08007954 	.word	0x08007954
 800718c:	0800795e 	.word	0x0800795e
 8007190:	08004a45 	.word	0x08004a45
 8007194:	08006f43 	.word	0x08006f43
 8007198:	0800795a 	.word	0x0800795a

0800719c <__sflush_r>:
 800719c:	898a      	ldrh	r2, [r1, #12]
 800719e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071a2:	4605      	mov	r5, r0
 80071a4:	0710      	lsls	r0, r2, #28
 80071a6:	460c      	mov	r4, r1
 80071a8:	d458      	bmi.n	800725c <__sflush_r+0xc0>
 80071aa:	684b      	ldr	r3, [r1, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	dc05      	bgt.n	80071bc <__sflush_r+0x20>
 80071b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	dc02      	bgt.n	80071bc <__sflush_r+0x20>
 80071b6:	2000      	movs	r0, #0
 80071b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071be:	2e00      	cmp	r6, #0
 80071c0:	d0f9      	beq.n	80071b6 <__sflush_r+0x1a>
 80071c2:	2300      	movs	r3, #0
 80071c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80071c8:	682f      	ldr	r7, [r5, #0]
 80071ca:	6a21      	ldr	r1, [r4, #32]
 80071cc:	602b      	str	r3, [r5, #0]
 80071ce:	d032      	beq.n	8007236 <__sflush_r+0x9a>
 80071d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80071d2:	89a3      	ldrh	r3, [r4, #12]
 80071d4:	075a      	lsls	r2, r3, #29
 80071d6:	d505      	bpl.n	80071e4 <__sflush_r+0x48>
 80071d8:	6863      	ldr	r3, [r4, #4]
 80071da:	1ac0      	subs	r0, r0, r3
 80071dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071de:	b10b      	cbz	r3, 80071e4 <__sflush_r+0x48>
 80071e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071e2:	1ac0      	subs	r0, r0, r3
 80071e4:	2300      	movs	r3, #0
 80071e6:	4602      	mov	r2, r0
 80071e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071ea:	6a21      	ldr	r1, [r4, #32]
 80071ec:	4628      	mov	r0, r5
 80071ee:	47b0      	blx	r6
 80071f0:	1c43      	adds	r3, r0, #1
 80071f2:	89a3      	ldrh	r3, [r4, #12]
 80071f4:	d106      	bne.n	8007204 <__sflush_r+0x68>
 80071f6:	6829      	ldr	r1, [r5, #0]
 80071f8:	291d      	cmp	r1, #29
 80071fa:	d82b      	bhi.n	8007254 <__sflush_r+0xb8>
 80071fc:	4a29      	ldr	r2, [pc, #164]	; (80072a4 <__sflush_r+0x108>)
 80071fe:	410a      	asrs	r2, r1
 8007200:	07d6      	lsls	r6, r2, #31
 8007202:	d427      	bmi.n	8007254 <__sflush_r+0xb8>
 8007204:	2200      	movs	r2, #0
 8007206:	6062      	str	r2, [r4, #4]
 8007208:	04d9      	lsls	r1, r3, #19
 800720a:	6922      	ldr	r2, [r4, #16]
 800720c:	6022      	str	r2, [r4, #0]
 800720e:	d504      	bpl.n	800721a <__sflush_r+0x7e>
 8007210:	1c42      	adds	r2, r0, #1
 8007212:	d101      	bne.n	8007218 <__sflush_r+0x7c>
 8007214:	682b      	ldr	r3, [r5, #0]
 8007216:	b903      	cbnz	r3, 800721a <__sflush_r+0x7e>
 8007218:	6560      	str	r0, [r4, #84]	; 0x54
 800721a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800721c:	602f      	str	r7, [r5, #0]
 800721e:	2900      	cmp	r1, #0
 8007220:	d0c9      	beq.n	80071b6 <__sflush_r+0x1a>
 8007222:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007226:	4299      	cmp	r1, r3
 8007228:	d002      	beq.n	8007230 <__sflush_r+0x94>
 800722a:	4628      	mov	r0, r5
 800722c:	f7ff f89e 	bl	800636c <_free_r>
 8007230:	2000      	movs	r0, #0
 8007232:	6360      	str	r0, [r4, #52]	; 0x34
 8007234:	e7c0      	b.n	80071b8 <__sflush_r+0x1c>
 8007236:	2301      	movs	r3, #1
 8007238:	4628      	mov	r0, r5
 800723a:	47b0      	blx	r6
 800723c:	1c41      	adds	r1, r0, #1
 800723e:	d1c8      	bne.n	80071d2 <__sflush_r+0x36>
 8007240:	682b      	ldr	r3, [r5, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d0c5      	beq.n	80071d2 <__sflush_r+0x36>
 8007246:	2b1d      	cmp	r3, #29
 8007248:	d001      	beq.n	800724e <__sflush_r+0xb2>
 800724a:	2b16      	cmp	r3, #22
 800724c:	d101      	bne.n	8007252 <__sflush_r+0xb6>
 800724e:	602f      	str	r7, [r5, #0]
 8007250:	e7b1      	b.n	80071b6 <__sflush_r+0x1a>
 8007252:	89a3      	ldrh	r3, [r4, #12]
 8007254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007258:	81a3      	strh	r3, [r4, #12]
 800725a:	e7ad      	b.n	80071b8 <__sflush_r+0x1c>
 800725c:	690f      	ldr	r7, [r1, #16]
 800725e:	2f00      	cmp	r7, #0
 8007260:	d0a9      	beq.n	80071b6 <__sflush_r+0x1a>
 8007262:	0793      	lsls	r3, r2, #30
 8007264:	680e      	ldr	r6, [r1, #0]
 8007266:	bf08      	it	eq
 8007268:	694b      	ldreq	r3, [r1, #20]
 800726a:	600f      	str	r7, [r1, #0]
 800726c:	bf18      	it	ne
 800726e:	2300      	movne	r3, #0
 8007270:	eba6 0807 	sub.w	r8, r6, r7
 8007274:	608b      	str	r3, [r1, #8]
 8007276:	f1b8 0f00 	cmp.w	r8, #0
 800727a:	dd9c      	ble.n	80071b6 <__sflush_r+0x1a>
 800727c:	6a21      	ldr	r1, [r4, #32]
 800727e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007280:	4643      	mov	r3, r8
 8007282:	463a      	mov	r2, r7
 8007284:	4628      	mov	r0, r5
 8007286:	47b0      	blx	r6
 8007288:	2800      	cmp	r0, #0
 800728a:	dc06      	bgt.n	800729a <__sflush_r+0xfe>
 800728c:	89a3      	ldrh	r3, [r4, #12]
 800728e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007292:	81a3      	strh	r3, [r4, #12]
 8007294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007298:	e78e      	b.n	80071b8 <__sflush_r+0x1c>
 800729a:	4407      	add	r7, r0
 800729c:	eba8 0800 	sub.w	r8, r8, r0
 80072a0:	e7e9      	b.n	8007276 <__sflush_r+0xda>
 80072a2:	bf00      	nop
 80072a4:	dfbffffe 	.word	0xdfbffffe

080072a8 <_fflush_r>:
 80072a8:	b538      	push	{r3, r4, r5, lr}
 80072aa:	690b      	ldr	r3, [r1, #16]
 80072ac:	4605      	mov	r5, r0
 80072ae:	460c      	mov	r4, r1
 80072b0:	b913      	cbnz	r3, 80072b8 <_fflush_r+0x10>
 80072b2:	2500      	movs	r5, #0
 80072b4:	4628      	mov	r0, r5
 80072b6:	bd38      	pop	{r3, r4, r5, pc}
 80072b8:	b118      	cbz	r0, 80072c2 <_fflush_r+0x1a>
 80072ba:	6a03      	ldr	r3, [r0, #32]
 80072bc:	b90b      	cbnz	r3, 80072c2 <_fflush_r+0x1a>
 80072be:	f7fe f801 	bl	80052c4 <__sinit>
 80072c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d0f3      	beq.n	80072b2 <_fflush_r+0xa>
 80072ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072cc:	07d0      	lsls	r0, r2, #31
 80072ce:	d404      	bmi.n	80072da <_fflush_r+0x32>
 80072d0:	0599      	lsls	r1, r3, #22
 80072d2:	d402      	bmi.n	80072da <_fflush_r+0x32>
 80072d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072d6:	f7fe f99f 	bl	8005618 <__retarget_lock_acquire_recursive>
 80072da:	4628      	mov	r0, r5
 80072dc:	4621      	mov	r1, r4
 80072de:	f7ff ff5d 	bl	800719c <__sflush_r>
 80072e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072e4:	07da      	lsls	r2, r3, #31
 80072e6:	4605      	mov	r5, r0
 80072e8:	d4e4      	bmi.n	80072b4 <_fflush_r+0xc>
 80072ea:	89a3      	ldrh	r3, [r4, #12]
 80072ec:	059b      	lsls	r3, r3, #22
 80072ee:	d4e1      	bmi.n	80072b4 <_fflush_r+0xc>
 80072f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072f2:	f7fe f992 	bl	800561a <__retarget_lock_release_recursive>
 80072f6:	e7dd      	b.n	80072b4 <_fflush_r+0xc>

080072f8 <fiprintf>:
 80072f8:	b40e      	push	{r1, r2, r3}
 80072fa:	b503      	push	{r0, r1, lr}
 80072fc:	4601      	mov	r1, r0
 80072fe:	ab03      	add	r3, sp, #12
 8007300:	4805      	ldr	r0, [pc, #20]	; (8007318 <fiprintf+0x20>)
 8007302:	f853 2b04 	ldr.w	r2, [r3], #4
 8007306:	6800      	ldr	r0, [r0, #0]
 8007308:	9301      	str	r3, [sp, #4]
 800730a:	f7ff fe2d 	bl	8006f68 <_vfiprintf_r>
 800730e:	b002      	add	sp, #8
 8007310:	f85d eb04 	ldr.w	lr, [sp], #4
 8007314:	b003      	add	sp, #12
 8007316:	4770      	bx	lr
 8007318:	200000f8 	.word	0x200000f8

0800731c <__swhatbuf_r>:
 800731c:	b570      	push	{r4, r5, r6, lr}
 800731e:	460c      	mov	r4, r1
 8007320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007324:	2900      	cmp	r1, #0
 8007326:	b096      	sub	sp, #88	; 0x58
 8007328:	4615      	mov	r5, r2
 800732a:	461e      	mov	r6, r3
 800732c:	da0d      	bge.n	800734a <__swhatbuf_r+0x2e>
 800732e:	89a3      	ldrh	r3, [r4, #12]
 8007330:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007334:	f04f 0100 	mov.w	r1, #0
 8007338:	bf0c      	ite	eq
 800733a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800733e:	2340      	movne	r3, #64	; 0x40
 8007340:	2000      	movs	r0, #0
 8007342:	6031      	str	r1, [r6, #0]
 8007344:	602b      	str	r3, [r5, #0]
 8007346:	b016      	add	sp, #88	; 0x58
 8007348:	bd70      	pop	{r4, r5, r6, pc}
 800734a:	466a      	mov	r2, sp
 800734c:	f000 f862 	bl	8007414 <_fstat_r>
 8007350:	2800      	cmp	r0, #0
 8007352:	dbec      	blt.n	800732e <__swhatbuf_r+0x12>
 8007354:	9901      	ldr	r1, [sp, #4]
 8007356:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800735a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800735e:	4259      	negs	r1, r3
 8007360:	4159      	adcs	r1, r3
 8007362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007366:	e7eb      	b.n	8007340 <__swhatbuf_r+0x24>

08007368 <__smakebuf_r>:
 8007368:	898b      	ldrh	r3, [r1, #12]
 800736a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800736c:	079d      	lsls	r5, r3, #30
 800736e:	4606      	mov	r6, r0
 8007370:	460c      	mov	r4, r1
 8007372:	d507      	bpl.n	8007384 <__smakebuf_r+0x1c>
 8007374:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	6123      	str	r3, [r4, #16]
 800737c:	2301      	movs	r3, #1
 800737e:	6163      	str	r3, [r4, #20]
 8007380:	b002      	add	sp, #8
 8007382:	bd70      	pop	{r4, r5, r6, pc}
 8007384:	ab01      	add	r3, sp, #4
 8007386:	466a      	mov	r2, sp
 8007388:	f7ff ffc8 	bl	800731c <__swhatbuf_r>
 800738c:	9900      	ldr	r1, [sp, #0]
 800738e:	4605      	mov	r5, r0
 8007390:	4630      	mov	r0, r6
 8007392:	f7ff f85f 	bl	8006454 <_malloc_r>
 8007396:	b948      	cbnz	r0, 80073ac <__smakebuf_r+0x44>
 8007398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800739c:	059a      	lsls	r2, r3, #22
 800739e:	d4ef      	bmi.n	8007380 <__smakebuf_r+0x18>
 80073a0:	f023 0303 	bic.w	r3, r3, #3
 80073a4:	f043 0302 	orr.w	r3, r3, #2
 80073a8:	81a3      	strh	r3, [r4, #12]
 80073aa:	e7e3      	b.n	8007374 <__smakebuf_r+0xc>
 80073ac:	89a3      	ldrh	r3, [r4, #12]
 80073ae:	6020      	str	r0, [r4, #0]
 80073b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073b4:	81a3      	strh	r3, [r4, #12]
 80073b6:	9b00      	ldr	r3, [sp, #0]
 80073b8:	6163      	str	r3, [r4, #20]
 80073ba:	9b01      	ldr	r3, [sp, #4]
 80073bc:	6120      	str	r0, [r4, #16]
 80073be:	b15b      	cbz	r3, 80073d8 <__smakebuf_r+0x70>
 80073c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073c4:	4630      	mov	r0, r6
 80073c6:	f000 f837 	bl	8007438 <_isatty_r>
 80073ca:	b128      	cbz	r0, 80073d8 <__smakebuf_r+0x70>
 80073cc:	89a3      	ldrh	r3, [r4, #12]
 80073ce:	f023 0303 	bic.w	r3, r3, #3
 80073d2:	f043 0301 	orr.w	r3, r3, #1
 80073d6:	81a3      	strh	r3, [r4, #12]
 80073d8:	89a3      	ldrh	r3, [r4, #12]
 80073da:	431d      	orrs	r5, r3
 80073dc:	81a5      	strh	r5, [r4, #12]
 80073de:	e7cf      	b.n	8007380 <__smakebuf_r+0x18>

080073e0 <memmove>:
 80073e0:	4288      	cmp	r0, r1
 80073e2:	b510      	push	{r4, lr}
 80073e4:	eb01 0402 	add.w	r4, r1, r2
 80073e8:	d902      	bls.n	80073f0 <memmove+0x10>
 80073ea:	4284      	cmp	r4, r0
 80073ec:	4623      	mov	r3, r4
 80073ee:	d807      	bhi.n	8007400 <memmove+0x20>
 80073f0:	1e43      	subs	r3, r0, #1
 80073f2:	42a1      	cmp	r1, r4
 80073f4:	d008      	beq.n	8007408 <memmove+0x28>
 80073f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073fe:	e7f8      	b.n	80073f2 <memmove+0x12>
 8007400:	4402      	add	r2, r0
 8007402:	4601      	mov	r1, r0
 8007404:	428a      	cmp	r2, r1
 8007406:	d100      	bne.n	800740a <memmove+0x2a>
 8007408:	bd10      	pop	{r4, pc}
 800740a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800740e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007412:	e7f7      	b.n	8007404 <memmove+0x24>

08007414 <_fstat_r>:
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	4d07      	ldr	r5, [pc, #28]	; (8007434 <_fstat_r+0x20>)
 8007418:	2300      	movs	r3, #0
 800741a:	4604      	mov	r4, r0
 800741c:	4608      	mov	r0, r1
 800741e:	4611      	mov	r1, r2
 8007420:	602b      	str	r3, [r5, #0]
 8007422:	f7fd f8ec 	bl	80045fe <_fstat>
 8007426:	1c43      	adds	r3, r0, #1
 8007428:	d102      	bne.n	8007430 <_fstat_r+0x1c>
 800742a:	682b      	ldr	r3, [r5, #0]
 800742c:	b103      	cbz	r3, 8007430 <_fstat_r+0x1c>
 800742e:	6023      	str	r3, [r4, #0]
 8007430:	bd38      	pop	{r3, r4, r5, pc}
 8007432:	bf00      	nop
 8007434:	20000560 	.word	0x20000560

08007438 <_isatty_r>:
 8007438:	b538      	push	{r3, r4, r5, lr}
 800743a:	4d06      	ldr	r5, [pc, #24]	; (8007454 <_isatty_r+0x1c>)
 800743c:	2300      	movs	r3, #0
 800743e:	4604      	mov	r4, r0
 8007440:	4608      	mov	r0, r1
 8007442:	602b      	str	r3, [r5, #0]
 8007444:	f7fd fa42 	bl	80048cc <_isatty>
 8007448:	1c43      	adds	r3, r0, #1
 800744a:	d102      	bne.n	8007452 <_isatty_r+0x1a>
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	b103      	cbz	r3, 8007452 <_isatty_r+0x1a>
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	bd38      	pop	{r3, r4, r5, pc}
 8007454:	20000560 	.word	0x20000560

08007458 <_sbrk_r>:
 8007458:	b538      	push	{r3, r4, r5, lr}
 800745a:	4d06      	ldr	r5, [pc, #24]	; (8007474 <_sbrk_r+0x1c>)
 800745c:	2300      	movs	r3, #0
 800745e:	4604      	mov	r4, r0
 8007460:	4608      	mov	r0, r1
 8007462:	602b      	str	r3, [r5, #0]
 8007464:	f7fa f8da 	bl	800161c <_sbrk>
 8007468:	1c43      	adds	r3, r0, #1
 800746a:	d102      	bne.n	8007472 <_sbrk_r+0x1a>
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	b103      	cbz	r3, 8007472 <_sbrk_r+0x1a>
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	bd38      	pop	{r3, r4, r5, pc}
 8007474:	20000560 	.word	0x20000560

08007478 <abort>:
 8007478:	b508      	push	{r3, lr}
 800747a:	2006      	movs	r0, #6
 800747c:	f000 f890 	bl	80075a0 <raise>
 8007480:	2001      	movs	r0, #1
 8007482:	f000 f8b9 	bl	80075f8 <_exit>

08007486 <_calloc_r>:
 8007486:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007488:	fba1 2402 	umull	r2, r4, r1, r2
 800748c:	b94c      	cbnz	r4, 80074a2 <_calloc_r+0x1c>
 800748e:	4611      	mov	r1, r2
 8007490:	9201      	str	r2, [sp, #4]
 8007492:	f7fe ffdf 	bl	8006454 <_malloc_r>
 8007496:	9a01      	ldr	r2, [sp, #4]
 8007498:	4605      	mov	r5, r0
 800749a:	b930      	cbnz	r0, 80074aa <_calloc_r+0x24>
 800749c:	4628      	mov	r0, r5
 800749e:	b003      	add	sp, #12
 80074a0:	bd30      	pop	{r4, r5, pc}
 80074a2:	220c      	movs	r2, #12
 80074a4:	6002      	str	r2, [r0, #0]
 80074a6:	2500      	movs	r5, #0
 80074a8:	e7f8      	b.n	800749c <_calloc_r+0x16>
 80074aa:	4621      	mov	r1, r4
 80074ac:	f7fe f838 	bl	8005520 <memset>
 80074b0:	e7f4      	b.n	800749c <_calloc_r+0x16>

080074b2 <__ascii_mbtowc>:
 80074b2:	b082      	sub	sp, #8
 80074b4:	b901      	cbnz	r1, 80074b8 <__ascii_mbtowc+0x6>
 80074b6:	a901      	add	r1, sp, #4
 80074b8:	b142      	cbz	r2, 80074cc <__ascii_mbtowc+0x1a>
 80074ba:	b14b      	cbz	r3, 80074d0 <__ascii_mbtowc+0x1e>
 80074bc:	7813      	ldrb	r3, [r2, #0]
 80074be:	600b      	str	r3, [r1, #0]
 80074c0:	7812      	ldrb	r2, [r2, #0]
 80074c2:	1e10      	subs	r0, r2, #0
 80074c4:	bf18      	it	ne
 80074c6:	2001      	movne	r0, #1
 80074c8:	b002      	add	sp, #8
 80074ca:	4770      	bx	lr
 80074cc:	4610      	mov	r0, r2
 80074ce:	e7fb      	b.n	80074c8 <__ascii_mbtowc+0x16>
 80074d0:	f06f 0001 	mvn.w	r0, #1
 80074d4:	e7f8      	b.n	80074c8 <__ascii_mbtowc+0x16>

080074d6 <_realloc_r>:
 80074d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074da:	4680      	mov	r8, r0
 80074dc:	4614      	mov	r4, r2
 80074de:	460e      	mov	r6, r1
 80074e0:	b921      	cbnz	r1, 80074ec <_realloc_r+0x16>
 80074e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074e6:	4611      	mov	r1, r2
 80074e8:	f7fe bfb4 	b.w	8006454 <_malloc_r>
 80074ec:	b92a      	cbnz	r2, 80074fa <_realloc_r+0x24>
 80074ee:	f7fe ff3d 	bl	800636c <_free_r>
 80074f2:	4625      	mov	r5, r4
 80074f4:	4628      	mov	r0, r5
 80074f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074fa:	f000 f86d 	bl	80075d8 <_malloc_usable_size_r>
 80074fe:	4284      	cmp	r4, r0
 8007500:	4607      	mov	r7, r0
 8007502:	d802      	bhi.n	800750a <_realloc_r+0x34>
 8007504:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007508:	d812      	bhi.n	8007530 <_realloc_r+0x5a>
 800750a:	4621      	mov	r1, r4
 800750c:	4640      	mov	r0, r8
 800750e:	f7fe ffa1 	bl	8006454 <_malloc_r>
 8007512:	4605      	mov	r5, r0
 8007514:	2800      	cmp	r0, #0
 8007516:	d0ed      	beq.n	80074f4 <_realloc_r+0x1e>
 8007518:	42bc      	cmp	r4, r7
 800751a:	4622      	mov	r2, r4
 800751c:	4631      	mov	r1, r6
 800751e:	bf28      	it	cs
 8007520:	463a      	movcs	r2, r7
 8007522:	f7fe f87b 	bl	800561c <memcpy>
 8007526:	4631      	mov	r1, r6
 8007528:	4640      	mov	r0, r8
 800752a:	f7fe ff1f 	bl	800636c <_free_r>
 800752e:	e7e1      	b.n	80074f4 <_realloc_r+0x1e>
 8007530:	4635      	mov	r5, r6
 8007532:	e7df      	b.n	80074f4 <_realloc_r+0x1e>

08007534 <__ascii_wctomb>:
 8007534:	b149      	cbz	r1, 800754a <__ascii_wctomb+0x16>
 8007536:	2aff      	cmp	r2, #255	; 0xff
 8007538:	bf85      	ittet	hi
 800753a:	238a      	movhi	r3, #138	; 0x8a
 800753c:	6003      	strhi	r3, [r0, #0]
 800753e:	700a      	strbls	r2, [r1, #0]
 8007540:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007544:	bf98      	it	ls
 8007546:	2001      	movls	r0, #1
 8007548:	4770      	bx	lr
 800754a:	4608      	mov	r0, r1
 800754c:	4770      	bx	lr

0800754e <_raise_r>:
 800754e:	291f      	cmp	r1, #31
 8007550:	b538      	push	{r3, r4, r5, lr}
 8007552:	4604      	mov	r4, r0
 8007554:	460d      	mov	r5, r1
 8007556:	d904      	bls.n	8007562 <_raise_r+0x14>
 8007558:	2316      	movs	r3, #22
 800755a:	6003      	str	r3, [r0, #0]
 800755c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007560:	bd38      	pop	{r3, r4, r5, pc}
 8007562:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007564:	b112      	cbz	r2, 800756c <_raise_r+0x1e>
 8007566:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800756a:	b94b      	cbnz	r3, 8007580 <_raise_r+0x32>
 800756c:	4620      	mov	r0, r4
 800756e:	f000 f831 	bl	80075d4 <_getpid_r>
 8007572:	462a      	mov	r2, r5
 8007574:	4601      	mov	r1, r0
 8007576:	4620      	mov	r0, r4
 8007578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800757c:	f000 b818 	b.w	80075b0 <_kill_r>
 8007580:	2b01      	cmp	r3, #1
 8007582:	d00a      	beq.n	800759a <_raise_r+0x4c>
 8007584:	1c59      	adds	r1, r3, #1
 8007586:	d103      	bne.n	8007590 <_raise_r+0x42>
 8007588:	2316      	movs	r3, #22
 800758a:	6003      	str	r3, [r0, #0]
 800758c:	2001      	movs	r0, #1
 800758e:	e7e7      	b.n	8007560 <_raise_r+0x12>
 8007590:	2400      	movs	r4, #0
 8007592:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007596:	4628      	mov	r0, r5
 8007598:	4798      	blx	r3
 800759a:	2000      	movs	r0, #0
 800759c:	e7e0      	b.n	8007560 <_raise_r+0x12>
	...

080075a0 <raise>:
 80075a0:	4b02      	ldr	r3, [pc, #8]	; (80075ac <raise+0xc>)
 80075a2:	4601      	mov	r1, r0
 80075a4:	6818      	ldr	r0, [r3, #0]
 80075a6:	f7ff bfd2 	b.w	800754e <_raise_r>
 80075aa:	bf00      	nop
 80075ac:	200000f8 	.word	0x200000f8

080075b0 <_kill_r>:
 80075b0:	b538      	push	{r3, r4, r5, lr}
 80075b2:	4d07      	ldr	r5, [pc, #28]	; (80075d0 <_kill_r+0x20>)
 80075b4:	2300      	movs	r3, #0
 80075b6:	4604      	mov	r4, r0
 80075b8:	4608      	mov	r0, r1
 80075ba:	4611      	mov	r1, r2
 80075bc:	602b      	str	r3, [r5, #0]
 80075be:	f000 f813 	bl	80075e8 <_kill>
 80075c2:	1c43      	adds	r3, r0, #1
 80075c4:	d102      	bne.n	80075cc <_kill_r+0x1c>
 80075c6:	682b      	ldr	r3, [r5, #0]
 80075c8:	b103      	cbz	r3, 80075cc <_kill_r+0x1c>
 80075ca:	6023      	str	r3, [r4, #0]
 80075cc:	bd38      	pop	{r3, r4, r5, pc}
 80075ce:	bf00      	nop
 80075d0:	20000560 	.word	0x20000560

080075d4 <_getpid_r>:
 80075d4:	f7fc bff0 	b.w	80045b8 <_getpid>

080075d8 <_malloc_usable_size_r>:
 80075d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075dc:	1f18      	subs	r0, r3, #4
 80075de:	2b00      	cmp	r3, #0
 80075e0:	bfbc      	itt	lt
 80075e2:	580b      	ldrlt	r3, [r1, r0]
 80075e4:	18c0      	addlt	r0, r0, r3
 80075e6:	4770      	bx	lr

080075e8 <_kill>:
 80075e8:	4b02      	ldr	r3, [pc, #8]	; (80075f4 <_kill+0xc>)
 80075ea:	2258      	movs	r2, #88	; 0x58
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075f2:	4770      	bx	lr
 80075f4:	20000560 	.word	0x20000560

080075f8 <_exit>:
 80075f8:	e7fe      	b.n	80075f8 <_exit>
	...

080075fc <_init>:
 80075fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fe:	bf00      	nop
 8007600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007602:	bc08      	pop	{r3}
 8007604:	469e      	mov	lr, r3
 8007606:	4770      	bx	lr

08007608 <_fini>:
 8007608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760a:	bf00      	nop
 800760c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800760e:	bc08      	pop	{r3}
 8007610:	469e      	mov	lr, r3
 8007612:	4770      	bx	lr
