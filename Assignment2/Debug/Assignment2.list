
Assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005310  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  080054a0  080054a0  000154a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005868  08005868  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005868  08005868  00015868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005870  08005870  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005870  08005870  00015870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005874  08005874  00015874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08005878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  200001d4  08005a4c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  08005a4c  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000716b  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001322  00000000  00000000  000273b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006c0  00000000  00000000  000286d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000505  00000000  00000000  00028d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000267e4  00000000  00000000  0002929d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000078c0  00000000  00000000  0004fa81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee72b  00000000  00000000  00057341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e88  00000000  00000000  00145a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001488f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005488 	.word	0x08005488

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08005488 	.word	0x08005488

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <main>:
static void UART1_Init(void);
 
UART_HandleTypeDef huart1;
 

int main(void) {
 8000ea4:	b5b0      	push	{r4, r5, r7, lr}
 8000ea6:	b0a2      	sub	sp, #136	; 0x88
 8000ea8:	af00      	add	r7, sp, #0
    char received_message[100];  // Define a buffer to store received messages
    int message_length = 0;     // Initialize the message length
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    /* Reset of all peripherals, Initializes Systick etc. */
    HAL_Init();
 8000eb0:	f000 fa55 	bl	800135e <HAL_Init>

    /* UART initialization */
    UART1_Init();
 8000eb4:	f000 f87e 	bl	8000fb4 <UART1_Init>

    // Initialize the program by printing "Waiting for message:"
    char prompt[] = "Waiting for message:\r\n";
 8000eb8:	4b3b      	ldr	r3, [pc, #236]	; (8000fa8 <main+0x104>)
 8000eba:	f107 0408 	add.w	r4, r7, #8
 8000ebe:	461d      	mov	r5, r3
 8000ec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ec4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ec8:	6020      	str	r0, [r4, #0]
 8000eca:	3404      	adds	r4, #4
 8000ecc:	8021      	strh	r1, [r4, #0]
 8000ece:	3402      	adds	r4, #2
 8000ed0:	0c0b      	lsrs	r3, r1, #16
 8000ed2:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*)prompt, strlen(prompt), 0xFFFF);
 8000ed4:	f107 0308 	add.w	r3, r7, #8
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff f9c9 	bl	8000270 <strlen>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	f107 0108 	add.w	r1, r7, #8
 8000ee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eea:	4830      	ldr	r0, [pc, #192]	; (8000fac <main+0x108>)
 8000eec:	f000 fe6e 	bl	8001bcc <HAL_UART_Transmit>

    while (1) {
        // Receive a message from the user and store it in the received_message buffer
        while (1) {
            char received_char;
            HAL_UART_Receive(&huart1, (uint8_t*)&received_char, 1, HAL_MAX_DELAY);
 8000ef0:	1cf9      	adds	r1, r7, #3
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	482c      	ldr	r0, [pc, #176]	; (8000fac <main+0x108>)
 8000efa:	f000 fefa 	bl	8001cf2 <HAL_UART_Receive>

            if (received_char == '\r' || message_length >= 99) {
 8000efe:	78fb      	ldrb	r3, [r7, #3]
 8000f00:	2b0d      	cmp	r3, #13
 8000f02:	d00e      	beq.n	8000f22 <main+0x7e>
 8000f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f08:	2b62      	cmp	r3, #98	; 0x62
 8000f0a:	dc0a      	bgt.n	8000f22 <main+0x7e>
                // If Enter key is pressed or message length exceeds buffer size, break
                break;
            }

            received_message[message_length++] = received_char;
 8000f0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f10:	1c5a      	adds	r2, r3, #1
 8000f12:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8000f16:	78fa      	ldrb	r2, [r7, #3]
 8000f18:	3388      	adds	r3, #136	; 0x88
 8000f1a:	443b      	add	r3, r7
 8000f1c:	f803 2c68 	strb.w	r2, [r3, #-104]
        while (1) {
 8000f20:	e7e6      	b.n	8000ef0 <main+0x4c>
        }

        // Null-terminate the received message
        received_message[message_length] = '\0';
 8000f22:	f107 0220 	add.w	r2, r7, #32
 8000f26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f2a:	4413      	add	r3, r2
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]

        // Print the received message
        HAL_UART_Transmit(&huart1, (uint8_t*)received_message, strlen(received_message), 0xFFFF);
 8000f30:	f107 0320 	add.w	r3, r7, #32
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff f99b 	bl	8000270 <strlen>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	f107 0120 	add.w	r1, r7, #32
 8000f42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f46:	4819      	ldr	r0, [pc, #100]	; (8000fac <main+0x108>)
 8000f48:	f000 fe40 	bl	8001bcc <HAL_UART_Transmit>

        // Add a new line to separate messages
        char new_line[] = "\r\n";
 8000f4c:	4a18      	ldr	r2, [pc, #96]	; (8000fb0 <main+0x10c>)
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	6812      	ldr	r2, [r2, #0]
 8000f52:	4611      	mov	r1, r2
 8000f54:	8019      	strh	r1, [r3, #0]
 8000f56:	3302      	adds	r3, #2
 8000f58:	0c12      	lsrs	r2, r2, #16
 8000f5a:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, (uint8_t*)new_line, strlen(new_line), 0xFFFF);
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff f986 	bl	8000270 <strlen>
 8000f64:	4603      	mov	r3, r0
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	1d39      	adds	r1, r7, #4
 8000f6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f6e:	480f      	ldr	r0, [pc, #60]	; (8000fac <main+0x108>)
 8000f70:	f000 fe2c 	bl	8001bcc <HAL_UART_Transmit>

        // Clear the buffer and reset the message length
        memset(received_message, 0, sizeof(received_message));
 8000f74:	f107 0320 	add.w	r3, r7, #32
 8000f78:	2264      	movs	r2, #100	; 0x64
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f002 fbc1 	bl	8003704 <memset>
        message_length = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        // Reprint "Waiting for message:" for the next message
        HAL_UART_Transmit(&huart1, (uint8_t*)prompt, strlen(prompt), 0xFFFF);
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff f96f 	bl	8000270 <strlen>
 8000f92:	4603      	mov	r3, r0
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	f107 0108 	add.w	r1, r7, #8
 8000f9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f9e:	4803      	ldr	r0, [pc, #12]	; (8000fac <main+0x108>)
 8000fa0:	f000 fe14 	bl	8001bcc <HAL_UART_Transmit>
    while (1) {
 8000fa4:	e7a4      	b.n	8000ef0 <main+0x4c>
 8000fa6:	bf00      	nop
 8000fa8:	080054a0 	.word	0x080054a0
 8000fac:	200001f0 	.word	0x200001f0
 8000fb0:	080054b8 	.word	0x080054b8

08000fb4 <UART1_Init>:




static void UART1_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
    /* Pin configuration for UART. BSP_COM_Init() can do this automatically */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fba:	4b26      	ldr	r3, [pc, #152]	; (8001054 <UART1_Init+0xa0>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	4a25      	ldr	r2, [pc, #148]	; (8001054 <UART1_Init+0xa0>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc6:	4b23      	ldr	r3, [pc, #140]	; (8001054 <UART1_Init+0xa0>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000fe4:	23c0      	movs	r3, #192	; 0xc0
 8000fe6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4817      	ldr	r0, [pc, #92]	; (8001058 <UART1_Init+0xa4>)
 8000ffa:	f000 fb07 	bl	800160c <HAL_GPIO_Init>
 
    /* Configuring UART1 */
    huart1.Instance = USART1;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <UART1_Init+0xa8>)
 8001000:	4a17      	ldr	r2, [pc, #92]	; (8001060 <UART1_Init+0xac>)
 8001002:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <UART1_Init+0xa8>)
 8001006:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800100a:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <UART1_Init+0xa8>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8001012:	4b12      	ldr	r3, [pc, #72]	; (800105c <UART1_Init+0xa8>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8001018:	4b10      	ldr	r3, [pc, #64]	; (800105c <UART1_Init+0xa8>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <UART1_Init+0xa8>)
 8001020:	220c      	movs	r2, #12
 8001022:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <UART1_Init+0xa8>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <UART1_Init+0xa8>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <UART1_Init+0xa8>)
 8001032:	2200      	movs	r2, #0
 8001034:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <UART1_Init+0xa8>)
 8001038:	2200      	movs	r2, #0
 800103a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK)
 800103c:	4807      	ldr	r0, [pc, #28]	; (800105c <UART1_Init+0xa8>)
 800103e:	f000 fd77 	bl	8001b30 <HAL_UART_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d000      	beq.n	800104a <UART1_Init+0x96>
    {
      while(1);
 8001048:	e7fe      	b.n	8001048 <UART1_Init+0x94>
    }
 
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000
 8001058:	48000400 	.word	0x48000400
 800105c:	200001f0 	.word	0x200001f0
 8001060:	40013800 	.word	0x40013800

08001064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <HAL_MspInit+0x44>)
 800106c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106e:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <HAL_MspInit+0x44>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6613      	str	r3, [r2, #96]	; 0x60
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <HAL_MspInit+0x44>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <HAL_MspInit+0x44>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001086:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <HAL_MspInit+0x44>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108c:	6593      	str	r3, [r2, #88]	; 0x58
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_MspInit+0x44>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000

080010ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08c      	sub	sp, #48	; 0x30
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a2e      	ldr	r2, [pc, #184]	; (8001184 <HAL_UART_MspInit+0xd8>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d128      	bne.n	8001120 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ce:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <HAL_UART_MspInit+0xdc>)
 80010d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d2:	4a2d      	ldr	r2, [pc, #180]	; (8001188 <HAL_UART_MspInit+0xdc>)
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d8:	6613      	str	r3, [r2, #96]	; 0x60
 80010da:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <HAL_UART_MspInit+0xdc>)
 80010dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e2:	61bb      	str	r3, [r7, #24]
 80010e4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <HAL_UART_MspInit+0xdc>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	4a27      	ldr	r2, [pc, #156]	; (8001188 <HAL_UART_MspInit+0xdc>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f2:	4b25      	ldr	r3, [pc, #148]	; (8001188 <HAL_UART_MspInit+0xdc>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80010fe:	23c0      	movs	r3, #192	; 0xc0
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800110e:	2307      	movs	r3, #7
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	481c      	ldr	r0, [pc, #112]	; (800118c <HAL_UART_MspInit+0xe0>)
 800111a:	f000 fa77 	bl	800160c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800111e:	e02d      	b.n	800117c <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a1a      	ldr	r2, [pc, #104]	; (8001190 <HAL_UART_MspInit+0xe4>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d128      	bne.n	800117c <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_UART_MspInit+0xdc>)
 800112c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112e:	4a16      	ldr	r2, [pc, #88]	; (8001188 <HAL_UART_MspInit+0xdc>)
 8001130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001134:	6593      	str	r3, [r2, #88]	; 0x58
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <HAL_UART_MspInit+0xdc>)
 8001138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_UART_MspInit+0xdc>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	4a10      	ldr	r2, [pc, #64]	; (8001188 <HAL_UART_MspInit+0xdc>)
 8001148:	f043 0308 	orr.w	r3, r3, #8
 800114c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_UART_MspInit+0xdc>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800115a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800115e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800116c:	2307      	movs	r3, #7
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	4807      	ldr	r0, [pc, #28]	; (8001194 <HAL_UART_MspInit+0xe8>)
 8001178:	f000 fa48 	bl	800160c <HAL_GPIO_Init>
}
 800117c:	bf00      	nop
 800117e:	3730      	adds	r7, #48	; 0x30
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40013800 	.word	0x40013800
 8001188:	40021000 	.word	0x40021000
 800118c:	48000400 	.word	0x48000400
 8001190:	40004800 	.word	0x40004800
 8001194:	48000c00 	.word	0x48000c00

08001198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <HardFault_Handler+0x4>

080011ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <MemManage_Handler+0x4>

080011b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <BusFault_Handler+0x4>

080011b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <UsageFault_Handler+0x4>

080011be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ec:	f000 f90a 	bl	8001404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80011f8:	2020      	movs	r0, #32
 80011fa:	f000 fbb1 	bl	8001960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80011fe:	2040      	movs	r0, #64	; 0x40
 8001200:	f000 fbae 	bl	8001960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001204:	2080      	movs	r0, #128	; 0x80
 8001206:	f000 fbab 	bl	8001960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800120a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800120e:	f000 fba7 	bl	8001960 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}

08001216 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800121a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800121e:	f000 fb9f 	bl	8001960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001222:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001226:	f000 fb9b 	bl	8001960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800122a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800122e:	f000 fb97 	bl	8001960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001232:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001236:	f000 fb93 	bl	8001960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800123a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800123e:	f000 fb8f 	bl	8001960 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void* _sbrk(int incr)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
    extern char end asm("end");
    static char *heap_end = 0;
    char *prev_heap_end;

    if (heap_end == 0)
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <_sbrk+0x50>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <_sbrk+0x16>
        heap_end = &end;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <_sbrk+0x50>)
 800125a:	4a10      	ldr	r2, [pc, #64]	; (800129c <_sbrk+0x54>)
 800125c:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <_sbrk+0x50>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	60fb      	str	r3, [r7, #12]
    if (heap_end + incr > stack_ptr)
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <_sbrk+0x50>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4413      	add	r3, r2
 800126c:	466a      	mov	r2, sp
 800126e:	4293      	cmp	r3, r2
 8001270:	d907      	bls.n	8001282 <_sbrk+0x3a>
    {
        errno = ENOMEM;
 8001272:	f002 fa99 	bl	80037a8 <__errno>
 8001276:	4603      	mov	r3, r0
 8001278:	220c      	movs	r2, #12
 800127a:	601a      	str	r2, [r3, #0]
        return (void*)-1;
 800127c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001280:	e006      	b.n	8001290 <_sbrk+0x48>
    }

    heap_end += incr;
 8001282:	4b05      	ldr	r3, [pc, #20]	; (8001298 <_sbrk+0x50>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	4a03      	ldr	r2, [pc, #12]	; (8001298 <_sbrk+0x50>)
 800128c:	6013      	str	r3, [r2, #0]

    return (void*)prev_heap_end;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000270 	.word	0x20000270
 800129c:	20000468 	.word	0x20000468

080012a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <SystemInit+0x64>)
 80012a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012aa:	4a16      	ldr	r2, [pc, #88]	; (8001304 <SystemInit+0x64>)
 80012ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <SystemInit+0x68>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a13      	ldr	r2, [pc, #76]	; (8001308 <SystemInit+0x68>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <SystemInit+0x68>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <SystemInit+0x68>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a0f      	ldr	r2, [pc, #60]	; (8001308 <SystemInit+0x68>)
 80012cc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80012d0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80012d4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <SystemInit+0x68>)
 80012d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012dc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <SystemInit+0x68>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a09      	ldr	r2, [pc, #36]	; (8001308 <SystemInit+0x68>)
 80012e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <SystemInit+0x68>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <SystemInit+0x64>)
 80012f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012f6:	609a      	str	r2, [r3, #8]
#endif
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00
 8001308:	40021000 	.word	0x40021000

0800130c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800130c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001344 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001310:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001312:	e003      	b.n	800131c <LoopCopyDataInit>

08001314 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001316:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001318:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800131a:	3104      	adds	r1, #4

0800131c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800131c:	480b      	ldr	r0, [pc, #44]	; (800134c <LoopForever+0xa>)
	ldr	r3, =_edata
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001320:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001322:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001324:	d3f6      	bcc.n	8001314 <CopyDataInit>
	ldr	r2, =_sbss
 8001326:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001328:	e002      	b.n	8001330 <LoopFillZerobss>

0800132a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800132a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800132c:	f842 3b04 	str.w	r3, [r2], #4

08001330 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <LoopForever+0x16>)
	cmp	r2, r3
 8001332:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001334:	d3f9      	bcc.n	800132a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001336:	f7ff ffb3 	bl	80012a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800133a:	f002 fa3b 	bl	80037b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800133e:	f7ff fdb1 	bl	8000ea4 <main>

08001342 <LoopForever>:

LoopForever:
    b LoopForever
 8001342:	e7fe      	b.n	8001342 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001344:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001348:	08005878 	.word	0x08005878
	ldr	r0, =_sdata
 800134c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001350:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 8001354:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 8001358:	20000464 	.word	0x20000464

0800135c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC1_2_IRQHandler>

0800135e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001368:	2003      	movs	r0, #3
 800136a:	f000 f91b 	bl	80015a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800136e:	2000      	movs	r0, #0
 8001370:	f000 f80e 	bl	8001390 <HAL_InitTick>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	71fb      	strb	r3, [r7, #7]
 800137e:	e001      	b.n	8001384 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001380:	f7ff fe70 	bl	8001064 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001384:	79fb      	ldrb	r3, [r7, #7]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800139c:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <HAL_InitTick+0x68>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d022      	beq.n	80013ea <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_InitTick+0x6c>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <HAL_InitTick+0x68>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80013b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 f91a 	bl	80015f2 <HAL_SYSTICK_Config>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10f      	bne.n	80013e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b0f      	cmp	r3, #15
 80013c8:	d809      	bhi.n	80013de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ca:	2200      	movs	r2, #0
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d2:	f000 f8f2 	bl	80015ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <HAL_InitTick+0x70>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	e007      	b.n	80013ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	73fb      	strb	r3, [r7, #15]
 80013e2:	e004      	b.n	80013ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	73fb      	strb	r3, [r7, #15]
 80013e8:	e001      	b.n	80013ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000008 	.word	0x20000008
 80013fc:	20000000 	.word	0x20000000
 8001400:	20000004 	.word	0x20000004

08001404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <HAL_IncTick+0x1c>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <HAL_IncTick+0x20>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4413      	add	r3, r2
 8001412:	4a03      	ldr	r2, [pc, #12]	; (8001420 <HAL_IncTick+0x1c>)
 8001414:	6013      	str	r3, [r2, #0]
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	20000274 	.word	0x20000274
 8001424:	20000008 	.word	0x20000008

08001428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return uwTick;
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <HAL_GetTick+0x14>)
 800142e:	681b      	ldr	r3, [r3, #0]
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000274 	.word	0x20000274

08001440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800145c:	4013      	ands	r3, r2
 800145e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800146c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001472:	4a04      	ldr	r2, [pc, #16]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	60d3      	str	r3, [r2, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <__NVIC_GetPriorityGrouping+0x18>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	f003 0307 	and.w	r3, r3, #7
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db0a      	blt.n	80014ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	490c      	ldr	r1, [pc, #48]	; (80014f0 <__NVIC_SetPriority+0x4c>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014cc:	e00a      	b.n	80014e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	; (80014f4 <__NVIC_SetPriority+0x50>)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	3b04      	subs	r3, #4
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	761a      	strb	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f1c3 0307 	rsb	r3, r3, #7
 8001512:	2b04      	cmp	r3, #4
 8001514:	bf28      	it	cs
 8001516:	2304      	movcs	r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3304      	adds	r3, #4
 800151e:	2b06      	cmp	r3, #6
 8001520:	d902      	bls.n	8001528 <NVIC_EncodePriority+0x30>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3b03      	subs	r3, #3
 8001526:	e000      	b.n	800152a <NVIC_EncodePriority+0x32>
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001540:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43d9      	mvns	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	4313      	orrs	r3, r2
         );
}
 8001552:	4618      	mov	r0, r3
 8001554:	3724      	adds	r7, #36	; 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001570:	d301      	bcc.n	8001576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001572:	2301      	movs	r3, #1
 8001574:	e00f      	b.n	8001596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <SysTick_Config+0x40>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157e:	210f      	movs	r1, #15
 8001580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001584:	f7ff ff8e 	bl	80014a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <SysTick_Config+0x40>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <SysTick_Config+0x40>)
 8001590:	2207      	movs	r2, #7
 8001592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	e000e010 	.word	0xe000e010

080015a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ff47 	bl	8001440 <__NVIC_SetPriorityGrouping>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015cc:	f7ff ff5c 	bl	8001488 <__NVIC_GetPriorityGrouping>
 80015d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	6978      	ldr	r0, [r7, #20]
 80015d8:	f7ff ff8e 	bl	80014f8 <NVIC_EncodePriority>
 80015dc:	4602      	mov	r2, r0
 80015de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff5d 	bl	80014a4 <__NVIC_SetPriority>
}
 80015ea:	bf00      	nop
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ffb0 	bl	8001560 <SysTick_Config>
 8001600:	4603      	mov	r3, r0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800160c:	b480      	push	{r7}
 800160e:	b087      	sub	sp, #28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161a:	e17f      	b.n	800191c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	2101      	movs	r1, #1
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	4013      	ands	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 8171 	beq.w	8001916 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d00b      	beq.n	8001654 <HAL_GPIO_Init+0x48>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b02      	cmp	r3, #2
 8001642:	d007      	beq.n	8001654 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001648:	2b11      	cmp	r3, #17
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b12      	cmp	r3, #18
 8001652:	d130      	bne.n	80016b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	2203      	movs	r2, #3
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800168a:	2201      	movs	r2, #1
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	091b      	lsrs	r3, r3, #4
 80016a0:	f003 0201 	and.w	r2, r3, #1
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d118      	bne.n	80016f4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016c8:	2201      	movs	r2, #1
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	08db      	lsrs	r3, r3, #3
 80016de:	f003 0201 	and.w	r2, r3, #1
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	2203      	movs	r2, #3
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d003      	beq.n	8001734 <HAL_GPIO_Init+0x128>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b12      	cmp	r3, #18
 8001732:	d123      	bne.n	800177c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	08da      	lsrs	r2, r3, #3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3208      	adds	r2, #8
 800173c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	220f      	movs	r2, #15
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	691a      	ldr	r2, [r3, #16]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	08da      	lsrs	r2, r3, #3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3208      	adds	r2, #8
 8001776:	6939      	ldr	r1, [r7, #16]
 8001778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	2203      	movs	r2, #3
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0203 	and.w	r2, r3, #3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 80ac 	beq.w	8001916 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	4b5f      	ldr	r3, [pc, #380]	; (800193c <HAL_GPIO_Init+0x330>)
 80017c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c2:	4a5e      	ldr	r2, [pc, #376]	; (800193c <HAL_GPIO_Init+0x330>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6613      	str	r3, [r2, #96]	; 0x60
 80017ca:	4b5c      	ldr	r3, [pc, #368]	; (800193c <HAL_GPIO_Init+0x330>)
 80017cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017d6:	4a5a      	ldr	r2, [pc, #360]	; (8001940 <HAL_GPIO_Init+0x334>)
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	3302      	adds	r3, #2
 80017de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	220f      	movs	r2, #15
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4013      	ands	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001800:	d025      	beq.n	800184e <HAL_GPIO_Init+0x242>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a4f      	ldr	r2, [pc, #316]	; (8001944 <HAL_GPIO_Init+0x338>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d01f      	beq.n	800184a <HAL_GPIO_Init+0x23e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a4e      	ldr	r2, [pc, #312]	; (8001948 <HAL_GPIO_Init+0x33c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d019      	beq.n	8001846 <HAL_GPIO_Init+0x23a>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a4d      	ldr	r2, [pc, #308]	; (800194c <HAL_GPIO_Init+0x340>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d013      	beq.n	8001842 <HAL_GPIO_Init+0x236>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a4c      	ldr	r2, [pc, #304]	; (8001950 <HAL_GPIO_Init+0x344>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d00d      	beq.n	800183e <HAL_GPIO_Init+0x232>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a4b      	ldr	r2, [pc, #300]	; (8001954 <HAL_GPIO_Init+0x348>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d007      	beq.n	800183a <HAL_GPIO_Init+0x22e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a4a      	ldr	r2, [pc, #296]	; (8001958 <HAL_GPIO_Init+0x34c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d101      	bne.n	8001836 <HAL_GPIO_Init+0x22a>
 8001832:	2306      	movs	r3, #6
 8001834:	e00c      	b.n	8001850 <HAL_GPIO_Init+0x244>
 8001836:	2307      	movs	r3, #7
 8001838:	e00a      	b.n	8001850 <HAL_GPIO_Init+0x244>
 800183a:	2305      	movs	r3, #5
 800183c:	e008      	b.n	8001850 <HAL_GPIO_Init+0x244>
 800183e:	2304      	movs	r3, #4
 8001840:	e006      	b.n	8001850 <HAL_GPIO_Init+0x244>
 8001842:	2303      	movs	r3, #3
 8001844:	e004      	b.n	8001850 <HAL_GPIO_Init+0x244>
 8001846:	2302      	movs	r3, #2
 8001848:	e002      	b.n	8001850 <HAL_GPIO_Init+0x244>
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <HAL_GPIO_Init+0x244>
 800184e:	2300      	movs	r3, #0
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	f002 0203 	and.w	r2, r2, #3
 8001856:	0092      	lsls	r2, r2, #2
 8001858:	4093      	lsls	r3, r2
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001860:	4937      	ldr	r1, [pc, #220]	; (8001940 <HAL_GPIO_Init+0x334>)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	3302      	adds	r3, #2
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800186e:	4b3b      	ldr	r3, [pc, #236]	; (800195c <HAL_GPIO_Init+0x350>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001892:	4a32      	ldr	r2, [pc, #200]	; (800195c <HAL_GPIO_Init+0x350>)
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001898:	4b30      	ldr	r3, [pc, #192]	; (800195c <HAL_GPIO_Init+0x350>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018bc:	4a27      	ldr	r2, [pc, #156]	; (800195c <HAL_GPIO_Init+0x350>)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018c2:	4b26      	ldr	r3, [pc, #152]	; (800195c <HAL_GPIO_Init+0x350>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018e6:	4a1d      	ldr	r2, [pc, #116]	; (800195c <HAL_GPIO_Init+0x350>)
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <HAL_GPIO_Init+0x350>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001910:	4a12      	ldr	r2, [pc, #72]	; (800195c <HAL_GPIO_Init+0x350>)
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fa22 f303 	lsr.w	r3, r2, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	f47f ae78 	bne.w	800161c <HAL_GPIO_Init+0x10>
  }
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	371c      	adds	r7, #28
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
 8001940:	40010000 	.word	0x40010000
 8001944:	48000400 	.word	0x48000400
 8001948:	48000800 	.word	0x48000800
 800194c:	48000c00 	.word	0x48000c00
 8001950:	48001000 	.word	0x48001000
 8001954:	48001400 	.word	0x48001400
 8001958:	48001800 	.word	0x48001800
 800195c:	40010400 	.word	0x40010400

08001960 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800196c:	695a      	ldr	r2, [r3, #20]
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	4013      	ands	r3, r2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d006      	beq.n	8001984 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001976:	4a05      	ldr	r2, [pc, #20]	; (800198c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800197c:	88fb      	ldrh	r3, [r7, #6]
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f806 	bl	8001990 <HAL_GPIO_EXTI_Callback>
  }
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40010400 	.word	0x40010400

08001990 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b089      	sub	sp, #36	; 0x24
 80019ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b6:	4b3e      	ldr	r3, [pc, #248]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019c0:	4b3b      	ldr	r3, [pc, #236]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <HAL_RCC_GetSysClockFreq+0x34>
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	2b0c      	cmp	r3, #12
 80019d4:	d121      	bne.n	8001a1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d11e      	bne.n	8001a1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019dc:	4b34      	ldr	r3, [pc, #208]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d107      	bne.n	80019f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019e8:	4b31      	ldr	r3, [pc, #196]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80019ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ee:	0a1b      	lsrs	r3, r3, #8
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	e005      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019f8:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	091b      	lsrs	r3, r3, #4
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a04:	4a2b      	ldr	r2, [pc, #172]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10d      	bne.n	8001a30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a18:	e00a      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d102      	bne.n	8001a26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a20:	4b25      	ldr	r3, [pc, #148]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a22:	61bb      	str	r3, [r7, #24]
 8001a24:	e004      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a2c:	4b23      	ldr	r3, [pc, #140]	; (8001abc <HAL_RCC_GetSysClockFreq+0x114>)
 8001a2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	2b0c      	cmp	r3, #12
 8001a34:	d134      	bne.n	8001aa0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a36:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d003      	beq.n	8001a4e <HAL_RCC_GetSysClockFreq+0xa6>
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d003      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0xac>
 8001a4c:	e005      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a50:	617b      	str	r3, [r7, #20]
      break;
 8001a52:	e005      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a54:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_RCC_GetSysClockFreq+0x114>)
 8001a56:	617b      	str	r3, [r7, #20]
      break;
 8001a58:	e002      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	617b      	str	r3, [r7, #20]
      break;
 8001a5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a60:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	0a1b      	lsrs	r3, r3, #8
 8001a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	fb03 f202 	mul.w	r2, r3, r2
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	0e5b      	lsrs	r3, r3, #25
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	3301      	adds	r3, #1
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001aa0:	69bb      	ldr	r3, [r7, #24]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3724      	adds	r7, #36	; 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	080054c4 	.word	0x080054c4
 8001ab8:	00f42400 	.word	0x00f42400
 8001abc:	007a1200 	.word	0x007a1200

08001ac0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000000 	.word	0x20000000

08001ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001adc:	f7ff fff0 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	0a1b      	lsrs	r3, r3, #8
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	4904      	ldr	r1, [pc, #16]	; (8001b00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001aee:	5ccb      	ldrb	r3, [r1, r3]
 8001af0:	f003 031f 	and.w	r3, r3, #31
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40021000 	.word	0x40021000
 8001b00:	080054bc 	.word	0x080054bc

08001b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b08:	f7ff ffda 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	0adb      	lsrs	r3, r3, #11
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	4904      	ldr	r1, [pc, #16]	; (8001b2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b1a:	5ccb      	ldrb	r3, [r1, r3]
 8001b1c:	f003 031f 	and.w	r3, r3, #31
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	080054bc 	.word	0x080054bc

08001b30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e040      	b.n	8001bc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d106      	bne.n	8001b58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff faaa 	bl	80010ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2224      	movs	r2, #36	; 0x24
 8001b5c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0201 	bic.w	r2, r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f98c 	bl	8001e8c <UART_SetConfig>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e022      	b.n	8001bc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 fd20 	bl	80025cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001baa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 fda7 	bl	8002710 <UART_CheckIdleState>
 8001bc2:	4603      	mov	r3, r0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af02      	add	r7, sp, #8
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	603b      	str	r3, [r7, #0]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be0:	2b20      	cmp	r3, #32
 8001be2:	f040 8081 	bne.w	8001ce8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <HAL_UART_Transmit+0x26>
 8001bec:	88fb      	ldrh	r3, [r7, #6]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e079      	b.n	8001cea <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_UART_Transmit+0x38>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e072      	b.n	8001cea <HAL_UART_Transmit+0x11e>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2221      	movs	r2, #33	; 0x21
 8001c16:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001c18:	f7ff fc06 	bl	8001428 <HAL_GetTick>
 8001c1c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	88fa      	ldrh	r2, [r7, #6]
 8001c22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	88fa      	ldrh	r2, [r7, #6]
 8001c2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c36:	d108      	bne.n	8001c4a <HAL_UART_Transmit+0x7e>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d104      	bne.n	8001c4a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	61bb      	str	r3, [r7, #24]
 8001c48:	e003      	b.n	8001c52 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8001c5a:	e02d      	b.n	8001cb8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2200      	movs	r2, #0
 8001c64:	2180      	movs	r1, #128	; 0x80
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 fd97 	bl	800279a <UART_WaitOnFlagUntilTimeout>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e039      	b.n	8001cea <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10b      	bne.n	8001c94 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	881a      	ldrh	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c88:	b292      	uxth	r2, r2
 8001c8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	3302      	adds	r3, #2
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	e008      	b.n	8001ca6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	781a      	ldrb	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	b292      	uxth	r2, r2
 8001c9e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1cb      	bne.n	8001c5c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2140      	movs	r1, #64	; 0x40
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f000 fd63 	bl	800279a <UART_WaitOnFlagUntilTimeout>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e005      	b.n	8001cea <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e000      	b.n	8001cea <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8001ce8:	2302      	movs	r3, #2
  }
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3720      	adds	r7, #32
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b08a      	sub	sp, #40	; 0x28
 8001cf6:	af02      	add	r7, sp, #8
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d06:	2b20      	cmp	r3, #32
 8001d08:	f040 80bb 	bne.w	8001e82 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <HAL_UART_Receive+0x26>
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0b3      	b.n	8001e84 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_UART_Receive+0x38>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e0ac      	b.n	8001e84 <HAL_UART_Receive+0x192>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2222      	movs	r2, #34	; 0x22
 8001d3c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001d3e:	f7ff fb73 	bl	8001428 <HAL_GetTick>
 8001d42:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	88fa      	ldrh	r2, [r7, #6]
 8001d48:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	88fa      	ldrh	r2, [r7, #6]
 8001d50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d5c:	d10e      	bne.n	8001d7c <HAL_UART_Receive+0x8a>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d105      	bne.n	8001d72 <HAL_UART_Receive+0x80>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001d6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001d70:	e02d      	b.n	8001dce <HAL_UART_Receive+0xdc>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	22ff      	movs	r2, #255	; 0xff
 8001d76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001d7a:	e028      	b.n	8001dce <HAL_UART_Receive+0xdc>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10d      	bne.n	8001da0 <HAL_UART_Receive+0xae>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d104      	bne.n	8001d96 <HAL_UART_Receive+0xa4>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	22ff      	movs	r2, #255	; 0xff
 8001d90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001d94:	e01b      	b.n	8001dce <HAL_UART_Receive+0xdc>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	227f      	movs	r2, #127	; 0x7f
 8001d9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001d9e:	e016      	b.n	8001dce <HAL_UART_Receive+0xdc>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001da8:	d10d      	bne.n	8001dc6 <HAL_UART_Receive+0xd4>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d104      	bne.n	8001dbc <HAL_UART_Receive+0xca>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	227f      	movs	r2, #127	; 0x7f
 8001db6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001dba:	e008      	b.n	8001dce <HAL_UART_Receive+0xdc>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	223f      	movs	r2, #63	; 0x3f
 8001dc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001dc4:	e003      	b.n	8001dce <HAL_UART_Receive+0xdc>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001dd4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dde:	d108      	bne.n	8001df2 <HAL_UART_Receive+0x100>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d104      	bne.n	8001df2 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	61bb      	str	r3, [r7, #24]
 8001df0:	e003      	b.n	8001dfa <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8001e02:	e033      	b.n	8001e6c <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2120      	movs	r1, #32
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 fcc3 	bl	800279a <UART_WaitOnFlagUntilTimeout>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e032      	b.n	8001e84 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10c      	bne.n	8001e3e <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	8a7b      	ldrh	r3, [r7, #18]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	3302      	adds	r3, #2
 8001e3a:	61bb      	str	r3, [r7, #24]
 8001e3c:	e00d      	b.n	8001e5a <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	8a7b      	ldrh	r3, [r7, #18]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	3301      	adds	r3, #1
 8001e58:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1c5      	bne.n	8001e04 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e000      	b.n	8001e84 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8001e82:	2302      	movs	r3, #2
  }
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3720      	adds	r7, #32
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e90:	b0a0      	sub	sp, #128	; 0x80
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	431a      	orrs	r2, r3
 8001eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	67fb      	str	r3, [r7, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	49a4      	ldr	r1, [pc, #656]	; (8002154 <UART_SetConfig+0x2c8>)
 8001ec4:	4019      	ands	r1, r3
 8001ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ecc:	430b      	orrs	r3, r1
 8001ece:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001edc:	68d9      	ldr	r1, [r3, #12]
 8001ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	ea40 0301 	orr.w	r3, r0, r1
 8001ee6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	4b99      	ldr	r3, [pc, #612]	; (8002158 <UART_SetConfig+0x2cc>)
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d004      	beq.n	8001f02 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001ef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001efa:	6a1a      	ldr	r2, [r3, #32]
 8001efc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001efe:	4313      	orrs	r3, r2
 8001f00:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001f0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f12:	430b      	orrs	r3, r1
 8001f14:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	4b90      	ldr	r3, [pc, #576]	; (800215c <UART_SetConfig+0x2d0>)
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d125      	bne.n	8001f6c <UART_SetConfig+0xe0>
 8001f20:	4b8f      	ldr	r3, [pc, #572]	; (8002160 <UART_SetConfig+0x2d4>)
 8001f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d81a      	bhi.n	8001f64 <UART_SetConfig+0xd8>
 8001f2e:	a201      	add	r2, pc, #4	; (adr r2, 8001f34 <UART_SetConfig+0xa8>)
 8001f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f34:	08001f45 	.word	0x08001f45
 8001f38:	08001f55 	.word	0x08001f55
 8001f3c:	08001f4d 	.word	0x08001f4d
 8001f40:	08001f5d 	.word	0x08001f5d
 8001f44:	2301      	movs	r3, #1
 8001f46:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001f4a:	e116      	b.n	800217a <UART_SetConfig+0x2ee>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001f52:	e112      	b.n	800217a <UART_SetConfig+0x2ee>
 8001f54:	2304      	movs	r3, #4
 8001f56:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001f5a:	e10e      	b.n	800217a <UART_SetConfig+0x2ee>
 8001f5c:	2308      	movs	r3, #8
 8001f5e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001f62:	e10a      	b.n	800217a <UART_SetConfig+0x2ee>
 8001f64:	2310      	movs	r3, #16
 8001f66:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001f6a:	e106      	b.n	800217a <UART_SetConfig+0x2ee>
 8001f6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b7c      	ldr	r3, [pc, #496]	; (8002164 <UART_SetConfig+0x2d8>)
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d138      	bne.n	8001fe8 <UART_SetConfig+0x15c>
 8001f76:	4b7a      	ldr	r3, [pc, #488]	; (8002160 <UART_SetConfig+0x2d4>)
 8001f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7c:	f003 030c 	and.w	r3, r3, #12
 8001f80:	2b0c      	cmp	r3, #12
 8001f82:	d82d      	bhi.n	8001fe0 <UART_SetConfig+0x154>
 8001f84:	a201      	add	r2, pc, #4	; (adr r2, 8001f8c <UART_SetConfig+0x100>)
 8001f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8a:	bf00      	nop
 8001f8c:	08001fc1 	.word	0x08001fc1
 8001f90:	08001fe1 	.word	0x08001fe1
 8001f94:	08001fe1 	.word	0x08001fe1
 8001f98:	08001fe1 	.word	0x08001fe1
 8001f9c:	08001fd1 	.word	0x08001fd1
 8001fa0:	08001fe1 	.word	0x08001fe1
 8001fa4:	08001fe1 	.word	0x08001fe1
 8001fa8:	08001fe1 	.word	0x08001fe1
 8001fac:	08001fc9 	.word	0x08001fc9
 8001fb0:	08001fe1 	.word	0x08001fe1
 8001fb4:	08001fe1 	.word	0x08001fe1
 8001fb8:	08001fe1 	.word	0x08001fe1
 8001fbc:	08001fd9 	.word	0x08001fd9
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001fc6:	e0d8      	b.n	800217a <UART_SetConfig+0x2ee>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001fce:	e0d4      	b.n	800217a <UART_SetConfig+0x2ee>
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001fd6:	e0d0      	b.n	800217a <UART_SetConfig+0x2ee>
 8001fd8:	2308      	movs	r3, #8
 8001fda:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001fde:	e0cc      	b.n	800217a <UART_SetConfig+0x2ee>
 8001fe0:	2310      	movs	r3, #16
 8001fe2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001fe6:	e0c8      	b.n	800217a <UART_SetConfig+0x2ee>
 8001fe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b5e      	ldr	r3, [pc, #376]	; (8002168 <UART_SetConfig+0x2dc>)
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d125      	bne.n	800203e <UART_SetConfig+0x1b2>
 8001ff2:	4b5b      	ldr	r3, [pc, #364]	; (8002160 <UART_SetConfig+0x2d4>)
 8001ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001ffc:	2b30      	cmp	r3, #48	; 0x30
 8001ffe:	d016      	beq.n	800202e <UART_SetConfig+0x1a2>
 8002000:	2b30      	cmp	r3, #48	; 0x30
 8002002:	d818      	bhi.n	8002036 <UART_SetConfig+0x1aa>
 8002004:	2b20      	cmp	r3, #32
 8002006:	d00a      	beq.n	800201e <UART_SetConfig+0x192>
 8002008:	2b20      	cmp	r3, #32
 800200a:	d814      	bhi.n	8002036 <UART_SetConfig+0x1aa>
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <UART_SetConfig+0x18a>
 8002010:	2b10      	cmp	r3, #16
 8002012:	d008      	beq.n	8002026 <UART_SetConfig+0x19a>
 8002014:	e00f      	b.n	8002036 <UART_SetConfig+0x1aa>
 8002016:	2300      	movs	r3, #0
 8002018:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800201c:	e0ad      	b.n	800217a <UART_SetConfig+0x2ee>
 800201e:	2302      	movs	r3, #2
 8002020:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002024:	e0a9      	b.n	800217a <UART_SetConfig+0x2ee>
 8002026:	2304      	movs	r3, #4
 8002028:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800202c:	e0a5      	b.n	800217a <UART_SetConfig+0x2ee>
 800202e:	2308      	movs	r3, #8
 8002030:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002034:	e0a1      	b.n	800217a <UART_SetConfig+0x2ee>
 8002036:	2310      	movs	r3, #16
 8002038:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800203c:	e09d      	b.n	800217a <UART_SetConfig+0x2ee>
 800203e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	4b4a      	ldr	r3, [pc, #296]	; (800216c <UART_SetConfig+0x2e0>)
 8002044:	429a      	cmp	r2, r3
 8002046:	d125      	bne.n	8002094 <UART_SetConfig+0x208>
 8002048:	4b45      	ldr	r3, [pc, #276]	; (8002160 <UART_SetConfig+0x2d4>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002052:	2bc0      	cmp	r3, #192	; 0xc0
 8002054:	d016      	beq.n	8002084 <UART_SetConfig+0x1f8>
 8002056:	2bc0      	cmp	r3, #192	; 0xc0
 8002058:	d818      	bhi.n	800208c <UART_SetConfig+0x200>
 800205a:	2b80      	cmp	r3, #128	; 0x80
 800205c:	d00a      	beq.n	8002074 <UART_SetConfig+0x1e8>
 800205e:	2b80      	cmp	r3, #128	; 0x80
 8002060:	d814      	bhi.n	800208c <UART_SetConfig+0x200>
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <UART_SetConfig+0x1e0>
 8002066:	2b40      	cmp	r3, #64	; 0x40
 8002068:	d008      	beq.n	800207c <UART_SetConfig+0x1f0>
 800206a:	e00f      	b.n	800208c <UART_SetConfig+0x200>
 800206c:	2300      	movs	r3, #0
 800206e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002072:	e082      	b.n	800217a <UART_SetConfig+0x2ee>
 8002074:	2302      	movs	r3, #2
 8002076:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800207a:	e07e      	b.n	800217a <UART_SetConfig+0x2ee>
 800207c:	2304      	movs	r3, #4
 800207e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002082:	e07a      	b.n	800217a <UART_SetConfig+0x2ee>
 8002084:	2308      	movs	r3, #8
 8002086:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800208a:	e076      	b.n	800217a <UART_SetConfig+0x2ee>
 800208c:	2310      	movs	r3, #16
 800208e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002092:	e072      	b.n	800217a <UART_SetConfig+0x2ee>
 8002094:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b35      	ldr	r3, [pc, #212]	; (8002170 <UART_SetConfig+0x2e4>)
 800209a:	429a      	cmp	r2, r3
 800209c:	d12a      	bne.n	80020f4 <UART_SetConfig+0x268>
 800209e:	4b30      	ldr	r3, [pc, #192]	; (8002160 <UART_SetConfig+0x2d4>)
 80020a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020ac:	d01a      	beq.n	80020e4 <UART_SetConfig+0x258>
 80020ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020b2:	d81b      	bhi.n	80020ec <UART_SetConfig+0x260>
 80020b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020b8:	d00c      	beq.n	80020d4 <UART_SetConfig+0x248>
 80020ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020be:	d815      	bhi.n	80020ec <UART_SetConfig+0x260>
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <UART_SetConfig+0x240>
 80020c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020c8:	d008      	beq.n	80020dc <UART_SetConfig+0x250>
 80020ca:	e00f      	b.n	80020ec <UART_SetConfig+0x260>
 80020cc:	2300      	movs	r3, #0
 80020ce:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80020d2:	e052      	b.n	800217a <UART_SetConfig+0x2ee>
 80020d4:	2302      	movs	r3, #2
 80020d6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80020da:	e04e      	b.n	800217a <UART_SetConfig+0x2ee>
 80020dc:	2304      	movs	r3, #4
 80020de:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80020e2:	e04a      	b.n	800217a <UART_SetConfig+0x2ee>
 80020e4:	2308      	movs	r3, #8
 80020e6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80020ea:	e046      	b.n	800217a <UART_SetConfig+0x2ee>
 80020ec:	2310      	movs	r3, #16
 80020ee:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80020f2:	e042      	b.n	800217a <UART_SetConfig+0x2ee>
 80020f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b17      	ldr	r3, [pc, #92]	; (8002158 <UART_SetConfig+0x2cc>)
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d13a      	bne.n	8002174 <UART_SetConfig+0x2e8>
 80020fe:	4b18      	ldr	r3, [pc, #96]	; (8002160 <UART_SetConfig+0x2d4>)
 8002100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002104:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002108:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800210c:	d01a      	beq.n	8002144 <UART_SetConfig+0x2b8>
 800210e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002112:	d81b      	bhi.n	800214c <UART_SetConfig+0x2c0>
 8002114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002118:	d00c      	beq.n	8002134 <UART_SetConfig+0x2a8>
 800211a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800211e:	d815      	bhi.n	800214c <UART_SetConfig+0x2c0>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <UART_SetConfig+0x2a0>
 8002124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002128:	d008      	beq.n	800213c <UART_SetConfig+0x2b0>
 800212a:	e00f      	b.n	800214c <UART_SetConfig+0x2c0>
 800212c:	2300      	movs	r3, #0
 800212e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002132:	e022      	b.n	800217a <UART_SetConfig+0x2ee>
 8002134:	2302      	movs	r3, #2
 8002136:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800213a:	e01e      	b.n	800217a <UART_SetConfig+0x2ee>
 800213c:	2304      	movs	r3, #4
 800213e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002142:	e01a      	b.n	800217a <UART_SetConfig+0x2ee>
 8002144:	2308      	movs	r3, #8
 8002146:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800214a:	e016      	b.n	800217a <UART_SetConfig+0x2ee>
 800214c:	2310      	movs	r3, #16
 800214e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002152:	e012      	b.n	800217a <UART_SetConfig+0x2ee>
 8002154:	efff69f3 	.word	0xefff69f3
 8002158:	40008000 	.word	0x40008000
 800215c:	40013800 	.word	0x40013800
 8002160:	40021000 	.word	0x40021000
 8002164:	40004400 	.word	0x40004400
 8002168:	40004800 	.word	0x40004800
 800216c:	40004c00 	.word	0x40004c00
 8002170:	40005000 	.word	0x40005000
 8002174:	2310      	movs	r3, #16
 8002176:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800217a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4bb6      	ldr	r3, [pc, #728]	; (8002458 <UART_SetConfig+0x5cc>)
 8002180:	429a      	cmp	r2, r3
 8002182:	f040 810c 	bne.w	800239e <UART_SetConfig+0x512>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002186:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800218a:	2b08      	cmp	r3, #8
 800218c:	d823      	bhi.n	80021d6 <UART_SetConfig+0x34a>
 800218e:	a201      	add	r2, pc, #4	; (adr r2, 8002194 <UART_SetConfig+0x308>)
 8002190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002194:	080021b9 	.word	0x080021b9
 8002198:	080021d7 	.word	0x080021d7
 800219c:	080021c1 	.word	0x080021c1
 80021a0:	080021d7 	.word	0x080021d7
 80021a4:	080021c7 	.word	0x080021c7
 80021a8:	080021d7 	.word	0x080021d7
 80021ac:	080021d7 	.word	0x080021d7
 80021b0:	080021d7 	.word	0x080021d7
 80021b4:	080021cf 	.word	0x080021cf
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80021b8:	f7ff fc8e 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
 80021bc:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 80021be:	e00e      	b.n	80021de <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80021c0:	4ba6      	ldr	r3, [pc, #664]	; (800245c <UART_SetConfig+0x5d0>)
 80021c2:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 80021c4:	e00b      	b.n	80021de <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80021c6:	f7ff fbef 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 80021ca:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 80021cc:	e007      	b.n	80021de <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80021ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021d2:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 80021d4:	e003      	b.n	80021de <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 80021dc:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80021de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 81e5 	beq.w	80025b0 <UART_SetConfig+0x724>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80021e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	441a      	add	r2, r3
 80021f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d305      	bcc.n	8002202 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80021f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80021fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021fe:	4293      	cmp	r3, r2
 8002200:	d903      	bls.n	800220a <UART_SetConfig+0x37e>
      {
        ret = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8002208:	e1d2      	b.n	80025b0 <UART_SetConfig+0x724>
      }
      else
      {
        switch (clocksource)
 800220a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800220e:	2b08      	cmp	r3, #8
 8002210:	f200 80b0 	bhi.w	8002374 <UART_SetConfig+0x4e8>
 8002214:	a201      	add	r2, pc, #4	; (adr r2, 800221c <UART_SetConfig+0x390>)
 8002216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221a:	bf00      	nop
 800221c:	08002241 	.word	0x08002241
 8002220:	08002375 	.word	0x08002375
 8002224:	080022a1 	.word	0x080022a1
 8002228:	08002375 	.word	0x08002375
 800222c:	080022e1 	.word	0x080022e1
 8002230:	08002375 	.word	0x08002375
 8002234:	08002375 	.word	0x08002375
 8002238:	08002375 	.word	0x08002375
 800223c:	0800233d 	.word	0x0800233d
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8002240:	f7ff fc4a 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
 8002244:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002246:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002248:	2200      	movs	r2, #0
 800224a:	4698      	mov	r8, r3
 800224c:	4691      	mov	r9, r2
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800225a:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 800225e:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8002262:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002264:	6849      	ldr	r1, [r1, #4]
 8002266:	0849      	lsrs	r1, r1, #1
 8002268:	2000      	movs	r0, #0
 800226a:	6539      	str	r1, [r7, #80]	; 0x50
 800226c:	6578      	str	r0, [r7, #84]	; 0x54
 800226e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002272:	4621      	mov	r1, r4
 8002274:	1851      	adds	r1, r2, r1
 8002276:	64b9      	str	r1, [r7, #72]	; 0x48
 8002278:	4629      	mov	r1, r5
 800227a:	eb43 0101 	adc.w	r1, r3, r1
 800227e:	64f9      	str	r1, [r7, #76]	; 0x4c
 8002280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	643b      	str	r3, [r7, #64]	; 0x40
 8002288:	647a      	str	r2, [r7, #68]	; 0x44
 800228a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800228e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002292:	f7fe fc89 	bl	8000ba8 <__aeabi_uldivmod>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4613      	mov	r3, r2
 800229c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 800229e:	e06d      	b.n	800237c <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80022a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	085b      	lsrs	r3, r3, #1
 80022a6:	2200      	movs	r2, #0
 80022a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80022aa:	63fa      	str	r2, [r7, #60]	; 0x3c
 80022ac:	4b6c      	ldr	r3, [pc, #432]	; (8002460 <UART_SetConfig+0x5d4>)
 80022ae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80022b2:	4602      	mov	r2, r0
 80022b4:	18d3      	adds	r3, r2, r3
 80022b6:	633b      	str	r3, [r7, #48]	; 0x30
 80022b8:	460b      	mov	r3, r1
 80022ba:	f143 0300 	adc.w	r3, r3, #0
 80022be:	637b      	str	r3, [r7, #52]	; 0x34
 80022c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80022c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022ce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80022d2:	f7fe fc69 	bl	8000ba8 <__aeabi_uldivmod>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	4613      	mov	r3, r2
 80022dc:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 80022de:	e04d      	b.n	800237c <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80022e0:	f7ff fb62 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 80022e4:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80022e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022e8:	2200      	movs	r2, #0
 80022ea:	461c      	mov	r4, r3
 80022ec:	4615      	mov	r5, r2
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	022b      	lsls	r3, r5, #8
 80022f8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80022fc:	0222      	lsls	r2, r4, #8
 80022fe:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002300:	6849      	ldr	r1, [r1, #4]
 8002302:	0849      	lsrs	r1, r1, #1
 8002304:	2000      	movs	r0, #0
 8002306:	6239      	str	r1, [r7, #32]
 8002308:	6278      	str	r0, [r7, #36]	; 0x24
 800230a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800230e:	4621      	mov	r1, r4
 8002310:	1851      	adds	r1, r2, r1
 8002312:	61b9      	str	r1, [r7, #24]
 8002314:	4629      	mov	r1, r5
 8002316:	eb43 0101 	adc.w	r1, r3, r1
 800231a:	61f9      	str	r1, [r7, #28]
 800231c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	617a      	str	r2, [r7, #20]
 8002326:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800232a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800232e:	f7fe fc3b 	bl	8000ba8 <__aeabi_uldivmod>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4613      	mov	r3, r2
 8002338:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 800233a:	e01f      	b.n	800237c <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800233c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	085b      	lsrs	r3, r3, #1
 8002342:	2200      	movs	r2, #0
 8002344:	469a      	mov	sl, r3
 8002346:	4693      	mov	fp, r2
 8002348:	f51a 0300 	adds.w	r3, sl, #8388608	; 0x800000
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	f14b 0300 	adc.w	r3, fp, #0
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	607a      	str	r2, [r7, #4]
 800235e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002362:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002366:	f7fe fc1f 	bl	8000ba8 <__aeabi_uldivmod>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4613      	mov	r3, r2
 8002370:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8002372:	e003      	b.n	800237c <UART_SetConfig+0x4f0>
          default:
            ret = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            break;
 800237a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800237c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800237e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002382:	d308      	bcc.n	8002396 <UART_SetConfig+0x50a>
 8002384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800238a:	d204      	bcs.n	8002396 <UART_SetConfig+0x50a>
        {
          huart->Instance->BRR = usartdiv;
 800238c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002392:	60da      	str	r2, [r3, #12]
 8002394:	e10c      	b.n	80025b0 <UART_SetConfig+0x724>
        }
        else
        {
          ret = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800239c:	e108      	b.n	80025b0 <UART_SetConfig+0x724>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800239e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023a6:	f040 808f 	bne.w	80024c8 <UART_SetConfig+0x63c>
  {
    switch (clocksource)
 80023aa:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d864      	bhi.n	800247c <UART_SetConfig+0x5f0>
 80023b2:	a201      	add	r2, pc, #4	; (adr r2, 80023b8 <UART_SetConfig+0x52c>)
 80023b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b8:	080023dd 	.word	0x080023dd
 80023bc:	080023fd 	.word	0x080023fd
 80023c0:	0800241d 	.word	0x0800241d
 80023c4:	0800247d 	.word	0x0800247d
 80023c8:	08002439 	.word	0x08002439
 80023cc:	0800247d 	.word	0x0800247d
 80023d0:	0800247d 	.word	0x0800247d
 80023d4:	0800247d 	.word	0x0800247d
 80023d8:	08002465 	.word	0x08002465
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023dc:	f7ff fb7c 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
 80023e0:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80023e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023e4:	005a      	lsls	r2, r3, #1
 80023e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	085b      	lsrs	r3, r3, #1
 80023ec:	441a      	add	r2, r3
 80023ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80023fa:	e043      	b.n	8002484 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80023fc:	f7ff fb82 	bl	8001b04 <HAL_RCC_GetPCLK2Freq>
 8002400:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002402:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002404:	005a      	lsls	r2, r3, #1
 8002406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	085b      	lsrs	r3, r3, #1
 800240c:	441a      	add	r2, r3
 800240e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	fbb2 f3f3 	udiv	r3, r2, r3
 8002416:	b29b      	uxth	r3, r3
 8002418:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800241a:	e033      	b.n	8002484 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800241c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	085b      	lsrs	r3, r3, #1
 8002422:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002426:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800242a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800242c:	6852      	ldr	r2, [r2, #4]
 800242e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002432:	b29b      	uxth	r3, r3
 8002434:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8002436:	e025      	b.n	8002484 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002438:	f7ff fab6 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 800243c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800243e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002440:	005a      	lsls	r2, r3, #1
 8002442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	085b      	lsrs	r3, r3, #1
 8002448:	441a      	add	r2, r3
 800244a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002452:	b29b      	uxth	r3, r3
 8002454:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8002456:	e015      	b.n	8002484 <UART_SetConfig+0x5f8>
 8002458:	40008000 	.word	0x40008000
 800245c:	00f42400 	.word	0x00f42400
 8002460:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	085b      	lsrs	r3, r3, #1
 800246a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800246e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	fbb2 f3f3 	udiv	r3, r2, r3
 8002476:	b29b      	uxth	r3, r3
 8002478:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800247a:	e003      	b.n	8002484 <UART_SetConfig+0x5f8>
      default:
        ret = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8002482:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002484:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002486:	2b0f      	cmp	r3, #15
 8002488:	d91a      	bls.n	80024c0 <UART_SetConfig+0x634>
 800248a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800248c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002490:	d216      	bcs.n	80024c0 <UART_SetConfig+0x634>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002494:	b29b      	uxth	r3, r3
 8002496:	f023 030f 	bic.w	r3, r3, #15
 800249a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800249e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024a0:	085b      	lsrs	r3, r3, #1
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      huart->Instance->BRR = brrtemp;
 80024b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	e077      	b.n	80025b0 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80024c6:	e073      	b.n	80025b0 <UART_SetConfig+0x724>
    }
  }
  else
  {
    switch (clocksource)
 80024c8:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d85c      	bhi.n	800258a <UART_SetConfig+0x6fe>
 80024d0:	a201      	add	r2, pc, #4	; (adr r2, 80024d8 <UART_SetConfig+0x64c>)
 80024d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d6:	bf00      	nop
 80024d8:	080024fd 	.word	0x080024fd
 80024dc:	0800251b 	.word	0x0800251b
 80024e0:	08002539 	.word	0x08002539
 80024e4:	0800258b 	.word	0x0800258b
 80024e8:	08002555 	.word	0x08002555
 80024ec:	0800258b 	.word	0x0800258b
 80024f0:	0800258b 	.word	0x0800258b
 80024f4:	0800258b 	.word	0x0800258b
 80024f8:	08002573 	.word	0x08002573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024fc:	f7ff faec 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
 8002500:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	085a      	lsrs	r2, r3, #1
 8002508:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800250a:	441a      	add	r2, r3
 800250c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	fbb2 f3f3 	udiv	r3, r2, r3
 8002514:	b29b      	uxth	r3, r3
 8002516:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8002518:	e03b      	b.n	8002592 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800251a:	f7ff faf3 	bl	8001b04 <HAL_RCC_GetPCLK2Freq>
 800251e:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	085a      	lsrs	r2, r3, #1
 8002526:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002528:	441a      	add	r2, r3
 800252a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002532:	b29b      	uxth	r3, r3
 8002534:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8002536:	e02c      	b.n	8002592 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	085b      	lsrs	r3, r3, #1
 800253e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002542:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002546:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002548:	6852      	ldr	r2, [r2, #4]
 800254a:	fbb3 f3f2 	udiv	r3, r3, r2
 800254e:	b29b      	uxth	r3, r3
 8002550:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8002552:	e01e      	b.n	8002592 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002554:	f7ff fa28 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 8002558:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800255a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	085a      	lsrs	r2, r3, #1
 8002560:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002562:	441a      	add	r2, r3
 8002564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	fbb2 f3f3 	udiv	r3, r2, r3
 800256c:	b29b      	uxth	r3, r3
 800256e:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8002570:	e00f      	b.n	8002592 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800257c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	fbb2 f3f3 	udiv	r3, r2, r3
 8002584:	b29b      	uxth	r3, r3
 8002586:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8002588:	e003      	b.n	8002592 <UART_SetConfig+0x706>
      default:
        ret = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8002590:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002594:	2b0f      	cmp	r3, #15
 8002596:	d908      	bls.n	80025aa <UART_SetConfig+0x71e>
 8002598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800259a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800259e:	d204      	bcs.n	80025aa <UART_SetConfig+0x71e>
    {
      huart->Instance->BRR = usartdiv;
 80025a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80025a6:	60da      	str	r2, [r3, #12]
 80025a8:	e002      	b.n	80025b0 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80025b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025b2:	2200      	movs	r2, #0
 80025b4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80025b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025b8:	2200      	movs	r2, #0
 80025ba:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80025bc:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3780      	adds	r7, #128	; 0x80
 80025c4:	46bd      	mov	sp, r7
 80025c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ca:	bf00      	nop

080025cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00a      	beq.n	80025f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d01a      	beq.n	80026e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026ca:	d10a      	bne.n	80026e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	605a      	str	r2, [r3, #4]
  }
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af02      	add	r7, sp, #8
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800271e:	f7fe fe83 	bl	8001428 <HAL_GetTick>
 8002722:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b08      	cmp	r3, #8
 8002730:	d10e      	bne.n	8002750 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002732:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f82a 	bl	800279a <UART_WaitOnFlagUntilTimeout>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e020      	b.n	8002792 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b04      	cmp	r3, #4
 800275c:	d10e      	bne.n	800277c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800275e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f814 	bl	800279a <UART_WaitOnFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e00a      	b.n	8002792 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2220      	movs	r2, #32
 8002780:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2220      	movs	r2, #32
 8002786:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b084      	sub	sp, #16
 800279e:	af00      	add	r7, sp, #0
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	603b      	str	r3, [r7, #0]
 80027a6:	4613      	mov	r3, r2
 80027a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027aa:	e05d      	b.n	8002868 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027b2:	d059      	beq.n	8002868 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b4:	f7fe fe38 	bl	8001428 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d302      	bcc.n	80027ca <UART_WaitOnFlagUntilTimeout+0x30>
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d11b      	bne.n	8002802 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027d8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0201 	bic.w	r2, r2, #1
 80027e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2220      	movs	r2, #32
 80027ee:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e042      	b.n	8002888 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d02b      	beq.n	8002868 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800281a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800281e:	d123      	bne.n	8002868 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002828:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002838:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0201 	bic.w	r2, r2, #1
 8002848:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2220      	movs	r2, #32
 800284e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2220      	movs	r2, #32
 800285a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e00f      	b.n	8002888 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	69da      	ldr	r2, [r3, #28]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	4013      	ands	r3, r2
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	429a      	cmp	r2, r3
 8002876:	bf0c      	ite	eq
 8002878:	2301      	moveq	r3, #1
 800287a:	2300      	movne	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	429a      	cmp	r2, r3
 8002884:	d092      	beq.n	80027ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <findslot>:
 8002890:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <findslot+0x2c>)
 8002892:	b510      	push	{r4, lr}
 8002894:	4604      	mov	r4, r0
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	b118      	cbz	r0, 80028a2 <findslot+0x12>
 800289a:	6a03      	ldr	r3, [r0, #32]
 800289c:	b90b      	cbnz	r3, 80028a2 <findslot+0x12>
 800289e:	f000 fe23 	bl	80034e8 <__sinit>
 80028a2:	2c13      	cmp	r4, #19
 80028a4:	d807      	bhi.n	80028b6 <findslot+0x26>
 80028a6:	4806      	ldr	r0, [pc, #24]	; (80028c0 <findslot+0x30>)
 80028a8:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80028ac:	3201      	adds	r2, #1
 80028ae:	d002      	beq.n	80028b6 <findslot+0x26>
 80028b0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80028b4:	bd10      	pop	{r4, pc}
 80028b6:	2000      	movs	r0, #0
 80028b8:	e7fc      	b.n	80028b4 <findslot+0x24>
 80028ba:	bf00      	nop
 80028bc:	20000064 	.word	0x20000064
 80028c0:	20000278 	.word	0x20000278

080028c4 <error>:
 80028c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c6:	4604      	mov	r4, r0
 80028c8:	f000 ff6e 	bl	80037a8 <__errno>
 80028cc:	2613      	movs	r6, #19
 80028ce:	4605      	mov	r5, r0
 80028d0:	2700      	movs	r7, #0
 80028d2:	4630      	mov	r0, r6
 80028d4:	4639      	mov	r1, r7
 80028d6:	beab      	bkpt	0x00ab
 80028d8:	4606      	mov	r6, r0
 80028da:	602e      	str	r6, [r5, #0]
 80028dc:	4620      	mov	r0, r4
 80028de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080028e0 <checkerror>:
 80028e0:	1c43      	adds	r3, r0, #1
 80028e2:	d101      	bne.n	80028e8 <checkerror+0x8>
 80028e4:	f7ff bfee 	b.w	80028c4 <error>
 80028e8:	4770      	bx	lr

080028ea <_swiread>:
 80028ea:	b530      	push	{r4, r5, lr}
 80028ec:	b085      	sub	sp, #20
 80028ee:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80028f2:	9203      	str	r2, [sp, #12]
 80028f4:	2406      	movs	r4, #6
 80028f6:	ad01      	add	r5, sp, #4
 80028f8:	4620      	mov	r0, r4
 80028fa:	4629      	mov	r1, r5
 80028fc:	beab      	bkpt	0x00ab
 80028fe:	4604      	mov	r4, r0
 8002900:	4620      	mov	r0, r4
 8002902:	f7ff ffed 	bl	80028e0 <checkerror>
 8002906:	b005      	add	sp, #20
 8002908:	bd30      	pop	{r4, r5, pc}

0800290a <_read>:
 800290a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800290c:	4615      	mov	r5, r2
 800290e:	9101      	str	r1, [sp, #4]
 8002910:	f7ff ffbe 	bl	8002890 <findslot>
 8002914:	9901      	ldr	r1, [sp, #4]
 8002916:	4604      	mov	r4, r0
 8002918:	b938      	cbnz	r0, 800292a <_read+0x20>
 800291a:	f000 ff45 	bl	80037a8 <__errno>
 800291e:	2309      	movs	r3, #9
 8002920:	6003      	str	r3, [r0, #0]
 8002922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002926:	b003      	add	sp, #12
 8002928:	bd30      	pop	{r4, r5, pc}
 800292a:	6800      	ldr	r0, [r0, #0]
 800292c:	462a      	mov	r2, r5
 800292e:	f7ff ffdc 	bl	80028ea <_swiread>
 8002932:	1c43      	adds	r3, r0, #1
 8002934:	d0f7      	beq.n	8002926 <_read+0x1c>
 8002936:	6863      	ldr	r3, [r4, #4]
 8002938:	1a2a      	subs	r2, r5, r0
 800293a:	4413      	add	r3, r2
 800293c:	6063      	str	r3, [r4, #4]
 800293e:	4610      	mov	r0, r2
 8002940:	e7f1      	b.n	8002926 <_read+0x1c>

08002942 <_swilseek>:
 8002942:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002944:	460c      	mov	r4, r1
 8002946:	4616      	mov	r6, r2
 8002948:	f7ff ffa2 	bl	8002890 <findslot>
 800294c:	4605      	mov	r5, r0
 800294e:	b940      	cbnz	r0, 8002962 <_swilseek+0x20>
 8002950:	f000 ff2a 	bl	80037a8 <__errno>
 8002954:	2309      	movs	r3, #9
 8002956:	6003      	str	r3, [r0, #0]
 8002958:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800295c:	4620      	mov	r0, r4
 800295e:	b003      	add	sp, #12
 8002960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002962:	2e02      	cmp	r6, #2
 8002964:	d903      	bls.n	800296e <_swilseek+0x2c>
 8002966:	f000 ff1f 	bl	80037a8 <__errno>
 800296a:	2316      	movs	r3, #22
 800296c:	e7f3      	b.n	8002956 <_swilseek+0x14>
 800296e:	2e01      	cmp	r6, #1
 8002970:	d112      	bne.n	8002998 <_swilseek+0x56>
 8002972:	6843      	ldr	r3, [r0, #4]
 8002974:	18e4      	adds	r4, r4, r3
 8002976:	d4f6      	bmi.n	8002966 <_swilseek+0x24>
 8002978:	682b      	ldr	r3, [r5, #0]
 800297a:	260a      	movs	r6, #10
 800297c:	e9cd 3400 	strd	r3, r4, [sp]
 8002980:	466f      	mov	r7, sp
 8002982:	4630      	mov	r0, r6
 8002984:	4639      	mov	r1, r7
 8002986:	beab      	bkpt	0x00ab
 8002988:	4606      	mov	r6, r0
 800298a:	4630      	mov	r0, r6
 800298c:	f7ff ffa8 	bl	80028e0 <checkerror>
 8002990:	2800      	cmp	r0, #0
 8002992:	dbe1      	blt.n	8002958 <_swilseek+0x16>
 8002994:	606c      	str	r4, [r5, #4]
 8002996:	e7e1      	b.n	800295c <_swilseek+0x1a>
 8002998:	2e02      	cmp	r6, #2
 800299a:	6803      	ldr	r3, [r0, #0]
 800299c:	d1ec      	bne.n	8002978 <_swilseek+0x36>
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	260c      	movs	r6, #12
 80029a2:	466f      	mov	r7, sp
 80029a4:	4630      	mov	r0, r6
 80029a6:	4639      	mov	r1, r7
 80029a8:	beab      	bkpt	0x00ab
 80029aa:	4606      	mov	r6, r0
 80029ac:	4630      	mov	r0, r6
 80029ae:	f7ff ff97 	bl	80028e0 <checkerror>
 80029b2:	1c43      	adds	r3, r0, #1
 80029b4:	d0d0      	beq.n	8002958 <_swilseek+0x16>
 80029b6:	4404      	add	r4, r0
 80029b8:	e7de      	b.n	8002978 <_swilseek+0x36>

080029ba <_lseek>:
 80029ba:	f7ff bfc2 	b.w	8002942 <_swilseek>

080029be <_swiwrite>:
 80029be:	b530      	push	{r4, r5, lr}
 80029c0:	b085      	sub	sp, #20
 80029c2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80029c6:	9203      	str	r2, [sp, #12]
 80029c8:	2405      	movs	r4, #5
 80029ca:	ad01      	add	r5, sp, #4
 80029cc:	4620      	mov	r0, r4
 80029ce:	4629      	mov	r1, r5
 80029d0:	beab      	bkpt	0x00ab
 80029d2:	4604      	mov	r4, r0
 80029d4:	4620      	mov	r0, r4
 80029d6:	f7ff ff83 	bl	80028e0 <checkerror>
 80029da:	b005      	add	sp, #20
 80029dc:	bd30      	pop	{r4, r5, pc}

080029de <_write>:
 80029de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80029e0:	4615      	mov	r5, r2
 80029e2:	9101      	str	r1, [sp, #4]
 80029e4:	f7ff ff54 	bl	8002890 <findslot>
 80029e8:	9901      	ldr	r1, [sp, #4]
 80029ea:	4604      	mov	r4, r0
 80029ec:	b930      	cbnz	r0, 80029fc <_write+0x1e>
 80029ee:	f000 fedb 	bl	80037a8 <__errno>
 80029f2:	2309      	movs	r3, #9
 80029f4:	6003      	str	r3, [r0, #0]
 80029f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029fa:	e012      	b.n	8002a22 <_write+0x44>
 80029fc:	6800      	ldr	r0, [r0, #0]
 80029fe:	462a      	mov	r2, r5
 8002a00:	f7ff ffdd 	bl	80029be <_swiwrite>
 8002a04:	2800      	cmp	r0, #0
 8002a06:	dbf6      	blt.n	80029f6 <_write+0x18>
 8002a08:	6862      	ldr	r2, [r4, #4]
 8002a0a:	1a2b      	subs	r3, r5, r0
 8002a0c:	441a      	add	r2, r3
 8002a0e:	42a8      	cmp	r0, r5
 8002a10:	6062      	str	r2, [r4, #4]
 8002a12:	d105      	bne.n	8002a20 <_write+0x42>
 8002a14:	2000      	movs	r0, #0
 8002a16:	b003      	add	sp, #12
 8002a18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a1c:	f7ff bf52 	b.w	80028c4 <error>
 8002a20:	4618      	mov	r0, r3
 8002a22:	b003      	add	sp, #12
 8002a24:	bd30      	pop	{r4, r5, pc}

08002a26 <_swiclose>:
 8002a26:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a28:	2402      	movs	r4, #2
 8002a2a:	9001      	str	r0, [sp, #4]
 8002a2c:	ad01      	add	r5, sp, #4
 8002a2e:	4620      	mov	r0, r4
 8002a30:	4629      	mov	r1, r5
 8002a32:	beab      	bkpt	0x00ab
 8002a34:	4604      	mov	r4, r0
 8002a36:	4620      	mov	r0, r4
 8002a38:	f7ff ff52 	bl	80028e0 <checkerror>
 8002a3c:	b003      	add	sp, #12
 8002a3e:	bd30      	pop	{r4, r5, pc}

08002a40 <_close>:
 8002a40:	b538      	push	{r3, r4, r5, lr}
 8002a42:	4605      	mov	r5, r0
 8002a44:	f7ff ff24 	bl	8002890 <findslot>
 8002a48:	4604      	mov	r4, r0
 8002a4a:	b930      	cbnz	r0, 8002a5a <_close+0x1a>
 8002a4c:	f000 feac 	bl	80037a8 <__errno>
 8002a50:	2309      	movs	r3, #9
 8002a52:	6003      	str	r3, [r0, #0]
 8002a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a58:	bd38      	pop	{r3, r4, r5, pc}
 8002a5a:	3d01      	subs	r5, #1
 8002a5c:	2d01      	cmp	r5, #1
 8002a5e:	d809      	bhi.n	8002a74 <_close+0x34>
 8002a60:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <_close+0x48>)
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d104      	bne.n	8002a74 <_close+0x34>
 8002a6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a6e:	6003      	str	r3, [r0, #0]
 8002a70:	2000      	movs	r0, #0
 8002a72:	e7f1      	b.n	8002a58 <_close+0x18>
 8002a74:	6820      	ldr	r0, [r4, #0]
 8002a76:	f7ff ffd6 	bl	8002a26 <_swiclose>
 8002a7a:	2800      	cmp	r0, #0
 8002a7c:	d1ec      	bne.n	8002a58 <_close+0x18>
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a82:	6023      	str	r3, [r4, #0]
 8002a84:	e7e8      	b.n	8002a58 <_close+0x18>
 8002a86:	bf00      	nop
 8002a88:	20000278 	.word	0x20000278

08002a8c <_getpid>:
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	4770      	bx	lr

08002a90 <_swistat>:
 8002a90:	b570      	push	{r4, r5, r6, lr}
 8002a92:	460c      	mov	r4, r1
 8002a94:	f7ff fefc 	bl	8002890 <findslot>
 8002a98:	4605      	mov	r5, r0
 8002a9a:	b930      	cbnz	r0, 8002aaa <_swistat+0x1a>
 8002a9c:	f000 fe84 	bl	80037a8 <__errno>
 8002aa0:	2309      	movs	r3, #9
 8002aa2:	6003      	str	r3, [r0, #0]
 8002aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002aa8:	bd70      	pop	{r4, r5, r6, pc}
 8002aaa:	6863      	ldr	r3, [r4, #4]
 8002aac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ab0:	6063      	str	r3, [r4, #4]
 8002ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ab6:	64a3      	str	r3, [r4, #72]	; 0x48
 8002ab8:	260c      	movs	r6, #12
 8002aba:	4630      	mov	r0, r6
 8002abc:	4629      	mov	r1, r5
 8002abe:	beab      	bkpt	0x00ab
 8002ac0:	4605      	mov	r5, r0
 8002ac2:	4628      	mov	r0, r5
 8002ac4:	f7ff ff0c 	bl	80028e0 <checkerror>
 8002ac8:	1c43      	adds	r3, r0, #1
 8002aca:	bf1c      	itt	ne
 8002acc:	6120      	strne	r0, [r4, #16]
 8002ace:	2000      	movne	r0, #0
 8002ad0:	e7ea      	b.n	8002aa8 <_swistat+0x18>

08002ad2 <_fstat>:
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	b510      	push	{r4, lr}
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4604      	mov	r4, r0
 8002ada:	2258      	movs	r2, #88	; 0x58
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fe11 	bl	8003704 <memset>
 8002ae2:	4601      	mov	r1, r0
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002aea:	f7ff bfd1 	b.w	8002a90 <_swistat>

08002aee <_isatty>:
 8002aee:	b570      	push	{r4, r5, r6, lr}
 8002af0:	f7ff fece 	bl	8002890 <findslot>
 8002af4:	2509      	movs	r5, #9
 8002af6:	4604      	mov	r4, r0
 8002af8:	b920      	cbnz	r0, 8002b04 <_isatty+0x16>
 8002afa:	f000 fe55 	bl	80037a8 <__errno>
 8002afe:	6005      	str	r5, [r0, #0]
 8002b00:	4620      	mov	r0, r4
 8002b02:	bd70      	pop	{r4, r5, r6, pc}
 8002b04:	4628      	mov	r0, r5
 8002b06:	4621      	mov	r1, r4
 8002b08:	beab      	bkpt	0x00ab
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	2c01      	cmp	r4, #1
 8002b0e:	d0f7      	beq.n	8002b00 <_isatty+0x12>
 8002b10:	f000 fe4a 	bl	80037a8 <__errno>
 8002b14:	2400      	movs	r4, #0
 8002b16:	4605      	mov	r5, r0
 8002b18:	2613      	movs	r6, #19
 8002b1a:	4630      	mov	r0, r6
 8002b1c:	4621      	mov	r1, r4
 8002b1e:	beab      	bkpt	0x00ab
 8002b20:	4606      	mov	r6, r0
 8002b22:	602e      	str	r6, [r5, #0]
 8002b24:	e7ec      	b.n	8002b00 <_isatty+0x12>

08002b26 <__cvt>:
 8002b26:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b2a:	ec55 4b10 	vmov	r4, r5, d0
 8002b2e:	2d00      	cmp	r5, #0
 8002b30:	460e      	mov	r6, r1
 8002b32:	4619      	mov	r1, r3
 8002b34:	462b      	mov	r3, r5
 8002b36:	bfbb      	ittet	lt
 8002b38:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002b3c:	461d      	movlt	r5, r3
 8002b3e:	2300      	movge	r3, #0
 8002b40:	232d      	movlt	r3, #45	; 0x2d
 8002b42:	700b      	strb	r3, [r1, #0]
 8002b44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002b46:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002b4a:	4691      	mov	r9, r2
 8002b4c:	f023 0820 	bic.w	r8, r3, #32
 8002b50:	bfbc      	itt	lt
 8002b52:	4622      	movlt	r2, r4
 8002b54:	4614      	movlt	r4, r2
 8002b56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002b5a:	d005      	beq.n	8002b68 <__cvt+0x42>
 8002b5c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002b60:	d100      	bne.n	8002b64 <__cvt+0x3e>
 8002b62:	3601      	adds	r6, #1
 8002b64:	2102      	movs	r1, #2
 8002b66:	e000      	b.n	8002b6a <__cvt+0x44>
 8002b68:	2103      	movs	r1, #3
 8002b6a:	ab03      	add	r3, sp, #12
 8002b6c:	9301      	str	r3, [sp, #4]
 8002b6e:	ab02      	add	r3, sp, #8
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	ec45 4b10 	vmov	d0, r4, r5
 8002b76:	4653      	mov	r3, sl
 8002b78:	4632      	mov	r2, r6
 8002b7a:	f000 fef5 	bl	8003968 <_dtoa_r>
 8002b7e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002b82:	4607      	mov	r7, r0
 8002b84:	d102      	bne.n	8002b8c <__cvt+0x66>
 8002b86:	f019 0f01 	tst.w	r9, #1
 8002b8a:	d022      	beq.n	8002bd2 <__cvt+0xac>
 8002b8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002b90:	eb07 0906 	add.w	r9, r7, r6
 8002b94:	d110      	bne.n	8002bb8 <__cvt+0x92>
 8002b96:	783b      	ldrb	r3, [r7, #0]
 8002b98:	2b30      	cmp	r3, #48	; 0x30
 8002b9a:	d10a      	bne.n	8002bb2 <__cvt+0x8c>
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	f7fd ff90 	bl	8000ac8 <__aeabi_dcmpeq>
 8002ba8:	b918      	cbnz	r0, 8002bb2 <__cvt+0x8c>
 8002baa:	f1c6 0601 	rsb	r6, r6, #1
 8002bae:	f8ca 6000 	str.w	r6, [sl]
 8002bb2:	f8da 3000 	ldr.w	r3, [sl]
 8002bb6:	4499      	add	r9, r3
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2300      	movs	r3, #0
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	4629      	mov	r1, r5
 8002bc0:	f7fd ff82 	bl	8000ac8 <__aeabi_dcmpeq>
 8002bc4:	b108      	cbz	r0, 8002bca <__cvt+0xa4>
 8002bc6:	f8cd 900c 	str.w	r9, [sp, #12]
 8002bca:	2230      	movs	r2, #48	; 0x30
 8002bcc:	9b03      	ldr	r3, [sp, #12]
 8002bce:	454b      	cmp	r3, r9
 8002bd0:	d307      	bcc.n	8002be2 <__cvt+0xbc>
 8002bd2:	9b03      	ldr	r3, [sp, #12]
 8002bd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002bd6:	1bdb      	subs	r3, r3, r7
 8002bd8:	4638      	mov	r0, r7
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	b004      	add	sp, #16
 8002bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002be2:	1c59      	adds	r1, r3, #1
 8002be4:	9103      	str	r1, [sp, #12]
 8002be6:	701a      	strb	r2, [r3, #0]
 8002be8:	e7f0      	b.n	8002bcc <__cvt+0xa6>

08002bea <__exponent>:
 8002bea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bec:	4603      	mov	r3, r0
 8002bee:	2900      	cmp	r1, #0
 8002bf0:	bfb8      	it	lt
 8002bf2:	4249      	neglt	r1, r1
 8002bf4:	f803 2b02 	strb.w	r2, [r3], #2
 8002bf8:	bfb4      	ite	lt
 8002bfa:	222d      	movlt	r2, #45	; 0x2d
 8002bfc:	222b      	movge	r2, #43	; 0x2b
 8002bfe:	2909      	cmp	r1, #9
 8002c00:	7042      	strb	r2, [r0, #1]
 8002c02:	dd2a      	ble.n	8002c5a <__exponent+0x70>
 8002c04:	f10d 0207 	add.w	r2, sp, #7
 8002c08:	4617      	mov	r7, r2
 8002c0a:	260a      	movs	r6, #10
 8002c0c:	4694      	mov	ip, r2
 8002c0e:	fb91 f5f6 	sdiv	r5, r1, r6
 8002c12:	fb06 1415 	mls	r4, r6, r5, r1
 8002c16:	3430      	adds	r4, #48	; 0x30
 8002c18:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8002c1c:	460c      	mov	r4, r1
 8002c1e:	2c63      	cmp	r4, #99	; 0x63
 8002c20:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8002c24:	4629      	mov	r1, r5
 8002c26:	dcf1      	bgt.n	8002c0c <__exponent+0x22>
 8002c28:	3130      	adds	r1, #48	; 0x30
 8002c2a:	f1ac 0402 	sub.w	r4, ip, #2
 8002c2e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002c32:	1c41      	adds	r1, r0, #1
 8002c34:	4622      	mov	r2, r4
 8002c36:	42ba      	cmp	r2, r7
 8002c38:	d30a      	bcc.n	8002c50 <__exponent+0x66>
 8002c3a:	f10d 0209 	add.w	r2, sp, #9
 8002c3e:	eba2 020c 	sub.w	r2, r2, ip
 8002c42:	42bc      	cmp	r4, r7
 8002c44:	bf88      	it	hi
 8002c46:	2200      	movhi	r2, #0
 8002c48:	4413      	add	r3, r2
 8002c4a:	1a18      	subs	r0, r3, r0
 8002c4c:	b003      	add	sp, #12
 8002c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c50:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002c54:	f801 5f01 	strb.w	r5, [r1, #1]!
 8002c58:	e7ed      	b.n	8002c36 <__exponent+0x4c>
 8002c5a:	2330      	movs	r3, #48	; 0x30
 8002c5c:	3130      	adds	r1, #48	; 0x30
 8002c5e:	7083      	strb	r3, [r0, #2]
 8002c60:	70c1      	strb	r1, [r0, #3]
 8002c62:	1d03      	adds	r3, r0, #4
 8002c64:	e7f1      	b.n	8002c4a <__exponent+0x60>
	...

08002c68 <_printf_float>:
 8002c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c6c:	ed2d 8b02 	vpush	{d8}
 8002c70:	b08d      	sub	sp, #52	; 0x34
 8002c72:	460c      	mov	r4, r1
 8002c74:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002c78:	4616      	mov	r6, r2
 8002c7a:	461f      	mov	r7, r3
 8002c7c:	4605      	mov	r5, r0
 8002c7e:	f000 fd49 	bl	8003714 <_localeconv_r>
 8002c82:	f8d0 a000 	ldr.w	sl, [r0]
 8002c86:	4650      	mov	r0, sl
 8002c88:	f7fd faf2 	bl	8000270 <strlen>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	930a      	str	r3, [sp, #40]	; 0x28
 8002c90:	6823      	ldr	r3, [r4, #0]
 8002c92:	9305      	str	r3, [sp, #20]
 8002c94:	f8d8 3000 	ldr.w	r3, [r8]
 8002c98:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002c9c:	3307      	adds	r3, #7
 8002c9e:	f023 0307 	bic.w	r3, r3, #7
 8002ca2:	f103 0208 	add.w	r2, r3, #8
 8002ca6:	f8c8 2000 	str.w	r2, [r8]
 8002caa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002cae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002cb2:	9307      	str	r3, [sp, #28]
 8002cb4:	f8cd 8018 	str.w	r8, [sp, #24]
 8002cb8:	ee08 0a10 	vmov	s16, r0
 8002cbc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8002cc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002cc4:	4b9e      	ldr	r3, [pc, #632]	; (8002f40 <_printf_float+0x2d8>)
 8002cc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cca:	f7fd ff2f 	bl	8000b2c <__aeabi_dcmpun>
 8002cce:	bb88      	cbnz	r0, 8002d34 <_printf_float+0xcc>
 8002cd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002cd4:	4b9a      	ldr	r3, [pc, #616]	; (8002f40 <_printf_float+0x2d8>)
 8002cd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cda:	f7fd ff09 	bl	8000af0 <__aeabi_dcmple>
 8002cde:	bb48      	cbnz	r0, 8002d34 <_printf_float+0xcc>
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	4640      	mov	r0, r8
 8002ce6:	4649      	mov	r1, r9
 8002ce8:	f7fd fef8 	bl	8000adc <__aeabi_dcmplt>
 8002cec:	b110      	cbz	r0, 8002cf4 <_printf_float+0x8c>
 8002cee:	232d      	movs	r3, #45	; 0x2d
 8002cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cf4:	4a93      	ldr	r2, [pc, #588]	; (8002f44 <_printf_float+0x2dc>)
 8002cf6:	4b94      	ldr	r3, [pc, #592]	; (8002f48 <_printf_float+0x2e0>)
 8002cf8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002cfc:	bf94      	ite	ls
 8002cfe:	4690      	movls	r8, r2
 8002d00:	4698      	movhi	r8, r3
 8002d02:	2303      	movs	r3, #3
 8002d04:	6123      	str	r3, [r4, #16]
 8002d06:	9b05      	ldr	r3, [sp, #20]
 8002d08:	f023 0304 	bic.w	r3, r3, #4
 8002d0c:	6023      	str	r3, [r4, #0]
 8002d0e:	f04f 0900 	mov.w	r9, #0
 8002d12:	9700      	str	r7, [sp, #0]
 8002d14:	4633      	mov	r3, r6
 8002d16:	aa0b      	add	r2, sp, #44	; 0x2c
 8002d18:	4621      	mov	r1, r4
 8002d1a:	4628      	mov	r0, r5
 8002d1c:	f000 f9da 	bl	80030d4 <_printf_common>
 8002d20:	3001      	adds	r0, #1
 8002d22:	f040 8090 	bne.w	8002e46 <_printf_float+0x1de>
 8002d26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d2a:	b00d      	add	sp, #52	; 0x34
 8002d2c:	ecbd 8b02 	vpop	{d8}
 8002d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d34:	4642      	mov	r2, r8
 8002d36:	464b      	mov	r3, r9
 8002d38:	4640      	mov	r0, r8
 8002d3a:	4649      	mov	r1, r9
 8002d3c:	f7fd fef6 	bl	8000b2c <__aeabi_dcmpun>
 8002d40:	b140      	cbz	r0, 8002d54 <_printf_float+0xec>
 8002d42:	464b      	mov	r3, r9
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bfbc      	itt	lt
 8002d48:	232d      	movlt	r3, #45	; 0x2d
 8002d4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002d4e:	4a7f      	ldr	r2, [pc, #508]	; (8002f4c <_printf_float+0x2e4>)
 8002d50:	4b7f      	ldr	r3, [pc, #508]	; (8002f50 <_printf_float+0x2e8>)
 8002d52:	e7d1      	b.n	8002cf8 <_printf_float+0x90>
 8002d54:	6863      	ldr	r3, [r4, #4]
 8002d56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002d5a:	9206      	str	r2, [sp, #24]
 8002d5c:	1c5a      	adds	r2, r3, #1
 8002d5e:	d13f      	bne.n	8002de0 <_printf_float+0x178>
 8002d60:	2306      	movs	r3, #6
 8002d62:	6063      	str	r3, [r4, #4]
 8002d64:	9b05      	ldr	r3, [sp, #20]
 8002d66:	6861      	ldr	r1, [r4, #4]
 8002d68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	9303      	str	r3, [sp, #12]
 8002d70:	ab0a      	add	r3, sp, #40	; 0x28
 8002d72:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002d76:	ab09      	add	r3, sp, #36	; 0x24
 8002d78:	ec49 8b10 	vmov	d0, r8, r9
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	6022      	str	r2, [r4, #0]
 8002d80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002d84:	4628      	mov	r0, r5
 8002d86:	f7ff fece 	bl	8002b26 <__cvt>
 8002d8a:	9b06      	ldr	r3, [sp, #24]
 8002d8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002d8e:	2b47      	cmp	r3, #71	; 0x47
 8002d90:	4680      	mov	r8, r0
 8002d92:	d108      	bne.n	8002da6 <_printf_float+0x13e>
 8002d94:	1cc8      	adds	r0, r1, #3
 8002d96:	db02      	blt.n	8002d9e <_printf_float+0x136>
 8002d98:	6863      	ldr	r3, [r4, #4]
 8002d9a:	4299      	cmp	r1, r3
 8002d9c:	dd41      	ble.n	8002e22 <_printf_float+0x1ba>
 8002d9e:	f1ab 0302 	sub.w	r3, fp, #2
 8002da2:	fa5f fb83 	uxtb.w	fp, r3
 8002da6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002daa:	d820      	bhi.n	8002dee <_printf_float+0x186>
 8002dac:	3901      	subs	r1, #1
 8002dae:	465a      	mov	r2, fp
 8002db0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002db4:	9109      	str	r1, [sp, #36]	; 0x24
 8002db6:	f7ff ff18 	bl	8002bea <__exponent>
 8002dba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002dbc:	1813      	adds	r3, r2, r0
 8002dbe:	2a01      	cmp	r2, #1
 8002dc0:	4681      	mov	r9, r0
 8002dc2:	6123      	str	r3, [r4, #16]
 8002dc4:	dc02      	bgt.n	8002dcc <_printf_float+0x164>
 8002dc6:	6822      	ldr	r2, [r4, #0]
 8002dc8:	07d2      	lsls	r2, r2, #31
 8002dca:	d501      	bpl.n	8002dd0 <_printf_float+0x168>
 8002dcc:	3301      	adds	r3, #1
 8002dce:	6123      	str	r3, [r4, #16]
 8002dd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d09c      	beq.n	8002d12 <_printf_float+0xaa>
 8002dd8:	232d      	movs	r3, #45	; 0x2d
 8002dda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dde:	e798      	b.n	8002d12 <_printf_float+0xaa>
 8002de0:	9a06      	ldr	r2, [sp, #24]
 8002de2:	2a47      	cmp	r2, #71	; 0x47
 8002de4:	d1be      	bne.n	8002d64 <_printf_float+0xfc>
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1bc      	bne.n	8002d64 <_printf_float+0xfc>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e7b9      	b.n	8002d62 <_printf_float+0xfa>
 8002dee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002df2:	d118      	bne.n	8002e26 <_printf_float+0x1be>
 8002df4:	2900      	cmp	r1, #0
 8002df6:	6863      	ldr	r3, [r4, #4]
 8002df8:	dd0b      	ble.n	8002e12 <_printf_float+0x1aa>
 8002dfa:	6121      	str	r1, [r4, #16]
 8002dfc:	b913      	cbnz	r3, 8002e04 <_printf_float+0x19c>
 8002dfe:	6822      	ldr	r2, [r4, #0]
 8002e00:	07d0      	lsls	r0, r2, #31
 8002e02:	d502      	bpl.n	8002e0a <_printf_float+0x1a2>
 8002e04:	3301      	adds	r3, #1
 8002e06:	440b      	add	r3, r1
 8002e08:	6123      	str	r3, [r4, #16]
 8002e0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8002e0c:	f04f 0900 	mov.w	r9, #0
 8002e10:	e7de      	b.n	8002dd0 <_printf_float+0x168>
 8002e12:	b913      	cbnz	r3, 8002e1a <_printf_float+0x1b2>
 8002e14:	6822      	ldr	r2, [r4, #0]
 8002e16:	07d2      	lsls	r2, r2, #31
 8002e18:	d501      	bpl.n	8002e1e <_printf_float+0x1b6>
 8002e1a:	3302      	adds	r3, #2
 8002e1c:	e7f4      	b.n	8002e08 <_printf_float+0x1a0>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e7f2      	b.n	8002e08 <_printf_float+0x1a0>
 8002e22:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e28:	4299      	cmp	r1, r3
 8002e2a:	db05      	blt.n	8002e38 <_printf_float+0x1d0>
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	6121      	str	r1, [r4, #16]
 8002e30:	07d8      	lsls	r0, r3, #31
 8002e32:	d5ea      	bpl.n	8002e0a <_printf_float+0x1a2>
 8002e34:	1c4b      	adds	r3, r1, #1
 8002e36:	e7e7      	b.n	8002e08 <_printf_float+0x1a0>
 8002e38:	2900      	cmp	r1, #0
 8002e3a:	bfd4      	ite	le
 8002e3c:	f1c1 0202 	rsble	r2, r1, #2
 8002e40:	2201      	movgt	r2, #1
 8002e42:	4413      	add	r3, r2
 8002e44:	e7e0      	b.n	8002e08 <_printf_float+0x1a0>
 8002e46:	6823      	ldr	r3, [r4, #0]
 8002e48:	055a      	lsls	r2, r3, #21
 8002e4a:	d407      	bmi.n	8002e5c <_printf_float+0x1f4>
 8002e4c:	6923      	ldr	r3, [r4, #16]
 8002e4e:	4642      	mov	r2, r8
 8002e50:	4631      	mov	r1, r6
 8002e52:	4628      	mov	r0, r5
 8002e54:	47b8      	blx	r7
 8002e56:	3001      	adds	r0, #1
 8002e58:	d12c      	bne.n	8002eb4 <_printf_float+0x24c>
 8002e5a:	e764      	b.n	8002d26 <_printf_float+0xbe>
 8002e5c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002e60:	f240 80e0 	bls.w	8003024 <_printf_float+0x3bc>
 8002e64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f7fd fe2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8002e70:	2800      	cmp	r0, #0
 8002e72:	d034      	beq.n	8002ede <_printf_float+0x276>
 8002e74:	4a37      	ldr	r2, [pc, #220]	; (8002f54 <_printf_float+0x2ec>)
 8002e76:	2301      	movs	r3, #1
 8002e78:	4631      	mov	r1, r6
 8002e7a:	4628      	mov	r0, r5
 8002e7c:	47b8      	blx	r7
 8002e7e:	3001      	adds	r0, #1
 8002e80:	f43f af51 	beq.w	8002d26 <_printf_float+0xbe>
 8002e84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	db02      	blt.n	8002e92 <_printf_float+0x22a>
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	07d8      	lsls	r0, r3, #31
 8002e90:	d510      	bpl.n	8002eb4 <_printf_float+0x24c>
 8002e92:	ee18 3a10 	vmov	r3, s16
 8002e96:	4652      	mov	r2, sl
 8002e98:	4631      	mov	r1, r6
 8002e9a:	4628      	mov	r0, r5
 8002e9c:	47b8      	blx	r7
 8002e9e:	3001      	adds	r0, #1
 8002ea0:	f43f af41 	beq.w	8002d26 <_printf_float+0xbe>
 8002ea4:	f04f 0800 	mov.w	r8, #0
 8002ea8:	f104 091a 	add.w	r9, r4, #26
 8002eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	4543      	cmp	r3, r8
 8002eb2:	dc09      	bgt.n	8002ec8 <_printf_float+0x260>
 8002eb4:	6823      	ldr	r3, [r4, #0]
 8002eb6:	079b      	lsls	r3, r3, #30
 8002eb8:	f100 8107 	bmi.w	80030ca <_printf_float+0x462>
 8002ebc:	68e0      	ldr	r0, [r4, #12]
 8002ebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002ec0:	4298      	cmp	r0, r3
 8002ec2:	bfb8      	it	lt
 8002ec4:	4618      	movlt	r0, r3
 8002ec6:	e730      	b.n	8002d2a <_printf_float+0xc2>
 8002ec8:	2301      	movs	r3, #1
 8002eca:	464a      	mov	r2, r9
 8002ecc:	4631      	mov	r1, r6
 8002ece:	4628      	mov	r0, r5
 8002ed0:	47b8      	blx	r7
 8002ed2:	3001      	adds	r0, #1
 8002ed4:	f43f af27 	beq.w	8002d26 <_printf_float+0xbe>
 8002ed8:	f108 0801 	add.w	r8, r8, #1
 8002edc:	e7e6      	b.n	8002eac <_printf_float+0x244>
 8002ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	dc39      	bgt.n	8002f58 <_printf_float+0x2f0>
 8002ee4:	4a1b      	ldr	r2, [pc, #108]	; (8002f54 <_printf_float+0x2ec>)
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	4631      	mov	r1, r6
 8002eea:	4628      	mov	r0, r5
 8002eec:	47b8      	blx	r7
 8002eee:	3001      	adds	r0, #1
 8002ef0:	f43f af19 	beq.w	8002d26 <_printf_float+0xbe>
 8002ef4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	d102      	bne.n	8002f02 <_printf_float+0x29a>
 8002efc:	6823      	ldr	r3, [r4, #0]
 8002efe:	07d9      	lsls	r1, r3, #31
 8002f00:	d5d8      	bpl.n	8002eb4 <_printf_float+0x24c>
 8002f02:	ee18 3a10 	vmov	r3, s16
 8002f06:	4652      	mov	r2, sl
 8002f08:	4631      	mov	r1, r6
 8002f0a:	4628      	mov	r0, r5
 8002f0c:	47b8      	blx	r7
 8002f0e:	3001      	adds	r0, #1
 8002f10:	f43f af09 	beq.w	8002d26 <_printf_float+0xbe>
 8002f14:	f04f 0900 	mov.w	r9, #0
 8002f18:	f104 0a1a 	add.w	sl, r4, #26
 8002f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f1e:	425b      	negs	r3, r3
 8002f20:	454b      	cmp	r3, r9
 8002f22:	dc01      	bgt.n	8002f28 <_printf_float+0x2c0>
 8002f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f26:	e792      	b.n	8002e4e <_printf_float+0x1e6>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	4652      	mov	r2, sl
 8002f2c:	4631      	mov	r1, r6
 8002f2e:	4628      	mov	r0, r5
 8002f30:	47b8      	blx	r7
 8002f32:	3001      	adds	r0, #1
 8002f34:	f43f aef7 	beq.w	8002d26 <_printf_float+0xbe>
 8002f38:	f109 0901 	add.w	r9, r9, #1
 8002f3c:	e7ee      	b.n	8002f1c <_printf_float+0x2b4>
 8002f3e:	bf00      	nop
 8002f40:	7fefffff 	.word	0x7fefffff
 8002f44:	080054f4 	.word	0x080054f4
 8002f48:	080054f8 	.word	0x080054f8
 8002f4c:	080054fc 	.word	0x080054fc
 8002f50:	08005500 	.word	0x08005500
 8002f54:	08005504 	.word	0x08005504
 8002f58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	bfa8      	it	ge
 8002f60:	461a      	movge	r2, r3
 8002f62:	2a00      	cmp	r2, #0
 8002f64:	4691      	mov	r9, r2
 8002f66:	dc37      	bgt.n	8002fd8 <_printf_float+0x370>
 8002f68:	f04f 0b00 	mov.w	fp, #0
 8002f6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f70:	f104 021a 	add.w	r2, r4, #26
 8002f74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f76:	9305      	str	r3, [sp, #20]
 8002f78:	eba3 0309 	sub.w	r3, r3, r9
 8002f7c:	455b      	cmp	r3, fp
 8002f7e:	dc33      	bgt.n	8002fe8 <_printf_float+0x380>
 8002f80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f84:	429a      	cmp	r2, r3
 8002f86:	db3b      	blt.n	8003000 <_printf_float+0x398>
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	07da      	lsls	r2, r3, #31
 8002f8c:	d438      	bmi.n	8003000 <_printf_float+0x398>
 8002f8e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002f92:	eba2 0903 	sub.w	r9, r2, r3
 8002f96:	9b05      	ldr	r3, [sp, #20]
 8002f98:	1ad2      	subs	r2, r2, r3
 8002f9a:	4591      	cmp	r9, r2
 8002f9c:	bfa8      	it	ge
 8002f9e:	4691      	movge	r9, r2
 8002fa0:	f1b9 0f00 	cmp.w	r9, #0
 8002fa4:	dc35      	bgt.n	8003012 <_printf_float+0x3aa>
 8002fa6:	f04f 0800 	mov.w	r8, #0
 8002faa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002fae:	f104 0a1a 	add.w	sl, r4, #26
 8002fb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	eba3 0309 	sub.w	r3, r3, r9
 8002fbc:	4543      	cmp	r3, r8
 8002fbe:	f77f af79 	ble.w	8002eb4 <_printf_float+0x24c>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	4652      	mov	r2, sl
 8002fc6:	4631      	mov	r1, r6
 8002fc8:	4628      	mov	r0, r5
 8002fca:	47b8      	blx	r7
 8002fcc:	3001      	adds	r0, #1
 8002fce:	f43f aeaa 	beq.w	8002d26 <_printf_float+0xbe>
 8002fd2:	f108 0801 	add.w	r8, r8, #1
 8002fd6:	e7ec      	b.n	8002fb2 <_printf_float+0x34a>
 8002fd8:	4613      	mov	r3, r2
 8002fda:	4631      	mov	r1, r6
 8002fdc:	4642      	mov	r2, r8
 8002fde:	4628      	mov	r0, r5
 8002fe0:	47b8      	blx	r7
 8002fe2:	3001      	adds	r0, #1
 8002fe4:	d1c0      	bne.n	8002f68 <_printf_float+0x300>
 8002fe6:	e69e      	b.n	8002d26 <_printf_float+0xbe>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	4631      	mov	r1, r6
 8002fec:	4628      	mov	r0, r5
 8002fee:	9205      	str	r2, [sp, #20]
 8002ff0:	47b8      	blx	r7
 8002ff2:	3001      	adds	r0, #1
 8002ff4:	f43f ae97 	beq.w	8002d26 <_printf_float+0xbe>
 8002ff8:	9a05      	ldr	r2, [sp, #20]
 8002ffa:	f10b 0b01 	add.w	fp, fp, #1
 8002ffe:	e7b9      	b.n	8002f74 <_printf_float+0x30c>
 8003000:	ee18 3a10 	vmov	r3, s16
 8003004:	4652      	mov	r2, sl
 8003006:	4631      	mov	r1, r6
 8003008:	4628      	mov	r0, r5
 800300a:	47b8      	blx	r7
 800300c:	3001      	adds	r0, #1
 800300e:	d1be      	bne.n	8002f8e <_printf_float+0x326>
 8003010:	e689      	b.n	8002d26 <_printf_float+0xbe>
 8003012:	9a05      	ldr	r2, [sp, #20]
 8003014:	464b      	mov	r3, r9
 8003016:	4442      	add	r2, r8
 8003018:	4631      	mov	r1, r6
 800301a:	4628      	mov	r0, r5
 800301c:	47b8      	blx	r7
 800301e:	3001      	adds	r0, #1
 8003020:	d1c1      	bne.n	8002fa6 <_printf_float+0x33e>
 8003022:	e680      	b.n	8002d26 <_printf_float+0xbe>
 8003024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003026:	2a01      	cmp	r2, #1
 8003028:	dc01      	bgt.n	800302e <_printf_float+0x3c6>
 800302a:	07db      	lsls	r3, r3, #31
 800302c:	d53a      	bpl.n	80030a4 <_printf_float+0x43c>
 800302e:	2301      	movs	r3, #1
 8003030:	4642      	mov	r2, r8
 8003032:	4631      	mov	r1, r6
 8003034:	4628      	mov	r0, r5
 8003036:	47b8      	blx	r7
 8003038:	3001      	adds	r0, #1
 800303a:	f43f ae74 	beq.w	8002d26 <_printf_float+0xbe>
 800303e:	ee18 3a10 	vmov	r3, s16
 8003042:	4652      	mov	r2, sl
 8003044:	4631      	mov	r1, r6
 8003046:	4628      	mov	r0, r5
 8003048:	47b8      	blx	r7
 800304a:	3001      	adds	r0, #1
 800304c:	f43f ae6b 	beq.w	8002d26 <_printf_float+0xbe>
 8003050:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003054:	2200      	movs	r2, #0
 8003056:	2300      	movs	r3, #0
 8003058:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800305c:	f7fd fd34 	bl	8000ac8 <__aeabi_dcmpeq>
 8003060:	b9d8      	cbnz	r0, 800309a <_printf_float+0x432>
 8003062:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8003066:	f108 0201 	add.w	r2, r8, #1
 800306a:	4631      	mov	r1, r6
 800306c:	4628      	mov	r0, r5
 800306e:	47b8      	blx	r7
 8003070:	3001      	adds	r0, #1
 8003072:	d10e      	bne.n	8003092 <_printf_float+0x42a>
 8003074:	e657      	b.n	8002d26 <_printf_float+0xbe>
 8003076:	2301      	movs	r3, #1
 8003078:	4652      	mov	r2, sl
 800307a:	4631      	mov	r1, r6
 800307c:	4628      	mov	r0, r5
 800307e:	47b8      	blx	r7
 8003080:	3001      	adds	r0, #1
 8003082:	f43f ae50 	beq.w	8002d26 <_printf_float+0xbe>
 8003086:	f108 0801 	add.w	r8, r8, #1
 800308a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800308c:	3b01      	subs	r3, #1
 800308e:	4543      	cmp	r3, r8
 8003090:	dcf1      	bgt.n	8003076 <_printf_float+0x40e>
 8003092:	464b      	mov	r3, r9
 8003094:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003098:	e6da      	b.n	8002e50 <_printf_float+0x1e8>
 800309a:	f04f 0800 	mov.w	r8, #0
 800309e:	f104 0a1a 	add.w	sl, r4, #26
 80030a2:	e7f2      	b.n	800308a <_printf_float+0x422>
 80030a4:	2301      	movs	r3, #1
 80030a6:	4642      	mov	r2, r8
 80030a8:	e7df      	b.n	800306a <_printf_float+0x402>
 80030aa:	2301      	movs	r3, #1
 80030ac:	464a      	mov	r2, r9
 80030ae:	4631      	mov	r1, r6
 80030b0:	4628      	mov	r0, r5
 80030b2:	47b8      	blx	r7
 80030b4:	3001      	adds	r0, #1
 80030b6:	f43f ae36 	beq.w	8002d26 <_printf_float+0xbe>
 80030ba:	f108 0801 	add.w	r8, r8, #1
 80030be:	68e3      	ldr	r3, [r4, #12]
 80030c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80030c2:	1a5b      	subs	r3, r3, r1
 80030c4:	4543      	cmp	r3, r8
 80030c6:	dcf0      	bgt.n	80030aa <_printf_float+0x442>
 80030c8:	e6f8      	b.n	8002ebc <_printf_float+0x254>
 80030ca:	f04f 0800 	mov.w	r8, #0
 80030ce:	f104 0919 	add.w	r9, r4, #25
 80030d2:	e7f4      	b.n	80030be <_printf_float+0x456>

080030d4 <_printf_common>:
 80030d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030d8:	4616      	mov	r6, r2
 80030da:	4699      	mov	r9, r3
 80030dc:	688a      	ldr	r2, [r1, #8]
 80030de:	690b      	ldr	r3, [r1, #16]
 80030e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030e4:	4293      	cmp	r3, r2
 80030e6:	bfb8      	it	lt
 80030e8:	4613      	movlt	r3, r2
 80030ea:	6033      	str	r3, [r6, #0]
 80030ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030f0:	4607      	mov	r7, r0
 80030f2:	460c      	mov	r4, r1
 80030f4:	b10a      	cbz	r2, 80030fa <_printf_common+0x26>
 80030f6:	3301      	adds	r3, #1
 80030f8:	6033      	str	r3, [r6, #0]
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	0699      	lsls	r1, r3, #26
 80030fe:	bf42      	ittt	mi
 8003100:	6833      	ldrmi	r3, [r6, #0]
 8003102:	3302      	addmi	r3, #2
 8003104:	6033      	strmi	r3, [r6, #0]
 8003106:	6825      	ldr	r5, [r4, #0]
 8003108:	f015 0506 	ands.w	r5, r5, #6
 800310c:	d106      	bne.n	800311c <_printf_common+0x48>
 800310e:	f104 0a19 	add.w	sl, r4, #25
 8003112:	68e3      	ldr	r3, [r4, #12]
 8003114:	6832      	ldr	r2, [r6, #0]
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	42ab      	cmp	r3, r5
 800311a:	dc26      	bgt.n	800316a <_printf_common+0x96>
 800311c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003120:	1e13      	subs	r3, r2, #0
 8003122:	6822      	ldr	r2, [r4, #0]
 8003124:	bf18      	it	ne
 8003126:	2301      	movne	r3, #1
 8003128:	0692      	lsls	r2, r2, #26
 800312a:	d42b      	bmi.n	8003184 <_printf_common+0xb0>
 800312c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003130:	4649      	mov	r1, r9
 8003132:	4638      	mov	r0, r7
 8003134:	47c0      	blx	r8
 8003136:	3001      	adds	r0, #1
 8003138:	d01e      	beq.n	8003178 <_printf_common+0xa4>
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	6922      	ldr	r2, [r4, #16]
 800313e:	f003 0306 	and.w	r3, r3, #6
 8003142:	2b04      	cmp	r3, #4
 8003144:	bf02      	ittt	eq
 8003146:	68e5      	ldreq	r5, [r4, #12]
 8003148:	6833      	ldreq	r3, [r6, #0]
 800314a:	1aed      	subeq	r5, r5, r3
 800314c:	68a3      	ldr	r3, [r4, #8]
 800314e:	bf0c      	ite	eq
 8003150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003154:	2500      	movne	r5, #0
 8003156:	4293      	cmp	r3, r2
 8003158:	bfc4      	itt	gt
 800315a:	1a9b      	subgt	r3, r3, r2
 800315c:	18ed      	addgt	r5, r5, r3
 800315e:	2600      	movs	r6, #0
 8003160:	341a      	adds	r4, #26
 8003162:	42b5      	cmp	r5, r6
 8003164:	d11a      	bne.n	800319c <_printf_common+0xc8>
 8003166:	2000      	movs	r0, #0
 8003168:	e008      	b.n	800317c <_printf_common+0xa8>
 800316a:	2301      	movs	r3, #1
 800316c:	4652      	mov	r2, sl
 800316e:	4649      	mov	r1, r9
 8003170:	4638      	mov	r0, r7
 8003172:	47c0      	blx	r8
 8003174:	3001      	adds	r0, #1
 8003176:	d103      	bne.n	8003180 <_printf_common+0xac>
 8003178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800317c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003180:	3501      	adds	r5, #1
 8003182:	e7c6      	b.n	8003112 <_printf_common+0x3e>
 8003184:	18e1      	adds	r1, r4, r3
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	2030      	movs	r0, #48	; 0x30
 800318a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800318e:	4422      	add	r2, r4
 8003190:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003194:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003198:	3302      	adds	r3, #2
 800319a:	e7c7      	b.n	800312c <_printf_common+0x58>
 800319c:	2301      	movs	r3, #1
 800319e:	4622      	mov	r2, r4
 80031a0:	4649      	mov	r1, r9
 80031a2:	4638      	mov	r0, r7
 80031a4:	47c0      	blx	r8
 80031a6:	3001      	adds	r0, #1
 80031a8:	d0e6      	beq.n	8003178 <_printf_common+0xa4>
 80031aa:	3601      	adds	r6, #1
 80031ac:	e7d9      	b.n	8003162 <_printf_common+0x8e>
	...

080031b0 <_printf_i>:
 80031b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031b4:	7e0f      	ldrb	r7, [r1, #24]
 80031b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80031b8:	2f78      	cmp	r7, #120	; 0x78
 80031ba:	4691      	mov	r9, r2
 80031bc:	4680      	mov	r8, r0
 80031be:	460c      	mov	r4, r1
 80031c0:	469a      	mov	sl, r3
 80031c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80031c6:	d807      	bhi.n	80031d8 <_printf_i+0x28>
 80031c8:	2f62      	cmp	r7, #98	; 0x62
 80031ca:	d80a      	bhi.n	80031e2 <_printf_i+0x32>
 80031cc:	2f00      	cmp	r7, #0
 80031ce:	f000 80d4 	beq.w	800337a <_printf_i+0x1ca>
 80031d2:	2f58      	cmp	r7, #88	; 0x58
 80031d4:	f000 80c0 	beq.w	8003358 <_printf_i+0x1a8>
 80031d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031e0:	e03a      	b.n	8003258 <_printf_i+0xa8>
 80031e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031e6:	2b15      	cmp	r3, #21
 80031e8:	d8f6      	bhi.n	80031d8 <_printf_i+0x28>
 80031ea:	a101      	add	r1, pc, #4	; (adr r1, 80031f0 <_printf_i+0x40>)
 80031ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031f0:	08003249 	.word	0x08003249
 80031f4:	0800325d 	.word	0x0800325d
 80031f8:	080031d9 	.word	0x080031d9
 80031fc:	080031d9 	.word	0x080031d9
 8003200:	080031d9 	.word	0x080031d9
 8003204:	080031d9 	.word	0x080031d9
 8003208:	0800325d 	.word	0x0800325d
 800320c:	080031d9 	.word	0x080031d9
 8003210:	080031d9 	.word	0x080031d9
 8003214:	080031d9 	.word	0x080031d9
 8003218:	080031d9 	.word	0x080031d9
 800321c:	08003361 	.word	0x08003361
 8003220:	08003289 	.word	0x08003289
 8003224:	0800331b 	.word	0x0800331b
 8003228:	080031d9 	.word	0x080031d9
 800322c:	080031d9 	.word	0x080031d9
 8003230:	08003383 	.word	0x08003383
 8003234:	080031d9 	.word	0x080031d9
 8003238:	08003289 	.word	0x08003289
 800323c:	080031d9 	.word	0x080031d9
 8003240:	080031d9 	.word	0x080031d9
 8003244:	08003323 	.word	0x08003323
 8003248:	682b      	ldr	r3, [r5, #0]
 800324a:	1d1a      	adds	r2, r3, #4
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	602a      	str	r2, [r5, #0]
 8003250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003254:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003258:	2301      	movs	r3, #1
 800325a:	e09f      	b.n	800339c <_printf_i+0x1ec>
 800325c:	6820      	ldr	r0, [r4, #0]
 800325e:	682b      	ldr	r3, [r5, #0]
 8003260:	0607      	lsls	r7, r0, #24
 8003262:	f103 0104 	add.w	r1, r3, #4
 8003266:	6029      	str	r1, [r5, #0]
 8003268:	d501      	bpl.n	800326e <_printf_i+0xbe>
 800326a:	681e      	ldr	r6, [r3, #0]
 800326c:	e003      	b.n	8003276 <_printf_i+0xc6>
 800326e:	0646      	lsls	r6, r0, #25
 8003270:	d5fb      	bpl.n	800326a <_printf_i+0xba>
 8003272:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003276:	2e00      	cmp	r6, #0
 8003278:	da03      	bge.n	8003282 <_printf_i+0xd2>
 800327a:	232d      	movs	r3, #45	; 0x2d
 800327c:	4276      	negs	r6, r6
 800327e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003282:	485a      	ldr	r0, [pc, #360]	; (80033ec <_printf_i+0x23c>)
 8003284:	230a      	movs	r3, #10
 8003286:	e012      	b.n	80032ae <_printf_i+0xfe>
 8003288:	682b      	ldr	r3, [r5, #0]
 800328a:	6820      	ldr	r0, [r4, #0]
 800328c:	1d19      	adds	r1, r3, #4
 800328e:	6029      	str	r1, [r5, #0]
 8003290:	0605      	lsls	r5, r0, #24
 8003292:	d501      	bpl.n	8003298 <_printf_i+0xe8>
 8003294:	681e      	ldr	r6, [r3, #0]
 8003296:	e002      	b.n	800329e <_printf_i+0xee>
 8003298:	0641      	lsls	r1, r0, #25
 800329a:	d5fb      	bpl.n	8003294 <_printf_i+0xe4>
 800329c:	881e      	ldrh	r6, [r3, #0]
 800329e:	4853      	ldr	r0, [pc, #332]	; (80033ec <_printf_i+0x23c>)
 80032a0:	2f6f      	cmp	r7, #111	; 0x6f
 80032a2:	bf0c      	ite	eq
 80032a4:	2308      	moveq	r3, #8
 80032a6:	230a      	movne	r3, #10
 80032a8:	2100      	movs	r1, #0
 80032aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032ae:	6865      	ldr	r5, [r4, #4]
 80032b0:	60a5      	str	r5, [r4, #8]
 80032b2:	2d00      	cmp	r5, #0
 80032b4:	bfa2      	ittt	ge
 80032b6:	6821      	ldrge	r1, [r4, #0]
 80032b8:	f021 0104 	bicge.w	r1, r1, #4
 80032bc:	6021      	strge	r1, [r4, #0]
 80032be:	b90e      	cbnz	r6, 80032c4 <_printf_i+0x114>
 80032c0:	2d00      	cmp	r5, #0
 80032c2:	d04b      	beq.n	800335c <_printf_i+0x1ac>
 80032c4:	4615      	mov	r5, r2
 80032c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80032ca:	fb03 6711 	mls	r7, r3, r1, r6
 80032ce:	5dc7      	ldrb	r7, [r0, r7]
 80032d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80032d4:	4637      	mov	r7, r6
 80032d6:	42bb      	cmp	r3, r7
 80032d8:	460e      	mov	r6, r1
 80032da:	d9f4      	bls.n	80032c6 <_printf_i+0x116>
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d10b      	bne.n	80032f8 <_printf_i+0x148>
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	07de      	lsls	r6, r3, #31
 80032e4:	d508      	bpl.n	80032f8 <_printf_i+0x148>
 80032e6:	6923      	ldr	r3, [r4, #16]
 80032e8:	6861      	ldr	r1, [r4, #4]
 80032ea:	4299      	cmp	r1, r3
 80032ec:	bfde      	ittt	le
 80032ee:	2330      	movle	r3, #48	; 0x30
 80032f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80032f8:	1b52      	subs	r2, r2, r5
 80032fa:	6122      	str	r2, [r4, #16]
 80032fc:	f8cd a000 	str.w	sl, [sp]
 8003300:	464b      	mov	r3, r9
 8003302:	aa03      	add	r2, sp, #12
 8003304:	4621      	mov	r1, r4
 8003306:	4640      	mov	r0, r8
 8003308:	f7ff fee4 	bl	80030d4 <_printf_common>
 800330c:	3001      	adds	r0, #1
 800330e:	d14a      	bne.n	80033a6 <_printf_i+0x1f6>
 8003310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003314:	b004      	add	sp, #16
 8003316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800331a:	6823      	ldr	r3, [r4, #0]
 800331c:	f043 0320 	orr.w	r3, r3, #32
 8003320:	6023      	str	r3, [r4, #0]
 8003322:	4833      	ldr	r0, [pc, #204]	; (80033f0 <_printf_i+0x240>)
 8003324:	2778      	movs	r7, #120	; 0x78
 8003326:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	6829      	ldr	r1, [r5, #0]
 800332e:	061f      	lsls	r7, r3, #24
 8003330:	f851 6b04 	ldr.w	r6, [r1], #4
 8003334:	d402      	bmi.n	800333c <_printf_i+0x18c>
 8003336:	065f      	lsls	r7, r3, #25
 8003338:	bf48      	it	mi
 800333a:	b2b6      	uxthmi	r6, r6
 800333c:	07df      	lsls	r7, r3, #31
 800333e:	bf48      	it	mi
 8003340:	f043 0320 	orrmi.w	r3, r3, #32
 8003344:	6029      	str	r1, [r5, #0]
 8003346:	bf48      	it	mi
 8003348:	6023      	strmi	r3, [r4, #0]
 800334a:	b91e      	cbnz	r6, 8003354 <_printf_i+0x1a4>
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	f023 0320 	bic.w	r3, r3, #32
 8003352:	6023      	str	r3, [r4, #0]
 8003354:	2310      	movs	r3, #16
 8003356:	e7a7      	b.n	80032a8 <_printf_i+0xf8>
 8003358:	4824      	ldr	r0, [pc, #144]	; (80033ec <_printf_i+0x23c>)
 800335a:	e7e4      	b.n	8003326 <_printf_i+0x176>
 800335c:	4615      	mov	r5, r2
 800335e:	e7bd      	b.n	80032dc <_printf_i+0x12c>
 8003360:	682b      	ldr	r3, [r5, #0]
 8003362:	6826      	ldr	r6, [r4, #0]
 8003364:	6961      	ldr	r1, [r4, #20]
 8003366:	1d18      	adds	r0, r3, #4
 8003368:	6028      	str	r0, [r5, #0]
 800336a:	0635      	lsls	r5, r6, #24
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	d501      	bpl.n	8003374 <_printf_i+0x1c4>
 8003370:	6019      	str	r1, [r3, #0]
 8003372:	e002      	b.n	800337a <_printf_i+0x1ca>
 8003374:	0670      	lsls	r0, r6, #25
 8003376:	d5fb      	bpl.n	8003370 <_printf_i+0x1c0>
 8003378:	8019      	strh	r1, [r3, #0]
 800337a:	2300      	movs	r3, #0
 800337c:	6123      	str	r3, [r4, #16]
 800337e:	4615      	mov	r5, r2
 8003380:	e7bc      	b.n	80032fc <_printf_i+0x14c>
 8003382:	682b      	ldr	r3, [r5, #0]
 8003384:	1d1a      	adds	r2, r3, #4
 8003386:	602a      	str	r2, [r5, #0]
 8003388:	681d      	ldr	r5, [r3, #0]
 800338a:	6862      	ldr	r2, [r4, #4]
 800338c:	2100      	movs	r1, #0
 800338e:	4628      	mov	r0, r5
 8003390:	f7fc ff1e 	bl	80001d0 <memchr>
 8003394:	b108      	cbz	r0, 800339a <_printf_i+0x1ea>
 8003396:	1b40      	subs	r0, r0, r5
 8003398:	6060      	str	r0, [r4, #4]
 800339a:	6863      	ldr	r3, [r4, #4]
 800339c:	6123      	str	r3, [r4, #16]
 800339e:	2300      	movs	r3, #0
 80033a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033a4:	e7aa      	b.n	80032fc <_printf_i+0x14c>
 80033a6:	6923      	ldr	r3, [r4, #16]
 80033a8:	462a      	mov	r2, r5
 80033aa:	4649      	mov	r1, r9
 80033ac:	4640      	mov	r0, r8
 80033ae:	47d0      	blx	sl
 80033b0:	3001      	adds	r0, #1
 80033b2:	d0ad      	beq.n	8003310 <_printf_i+0x160>
 80033b4:	6823      	ldr	r3, [r4, #0]
 80033b6:	079b      	lsls	r3, r3, #30
 80033b8:	d413      	bmi.n	80033e2 <_printf_i+0x232>
 80033ba:	68e0      	ldr	r0, [r4, #12]
 80033bc:	9b03      	ldr	r3, [sp, #12]
 80033be:	4298      	cmp	r0, r3
 80033c0:	bfb8      	it	lt
 80033c2:	4618      	movlt	r0, r3
 80033c4:	e7a6      	b.n	8003314 <_printf_i+0x164>
 80033c6:	2301      	movs	r3, #1
 80033c8:	4632      	mov	r2, r6
 80033ca:	4649      	mov	r1, r9
 80033cc:	4640      	mov	r0, r8
 80033ce:	47d0      	blx	sl
 80033d0:	3001      	adds	r0, #1
 80033d2:	d09d      	beq.n	8003310 <_printf_i+0x160>
 80033d4:	3501      	adds	r5, #1
 80033d6:	68e3      	ldr	r3, [r4, #12]
 80033d8:	9903      	ldr	r1, [sp, #12]
 80033da:	1a5b      	subs	r3, r3, r1
 80033dc:	42ab      	cmp	r3, r5
 80033de:	dcf2      	bgt.n	80033c6 <_printf_i+0x216>
 80033e0:	e7eb      	b.n	80033ba <_printf_i+0x20a>
 80033e2:	2500      	movs	r5, #0
 80033e4:	f104 0619 	add.w	r6, r4, #25
 80033e8:	e7f5      	b.n	80033d6 <_printf_i+0x226>
 80033ea:	bf00      	nop
 80033ec:	08005506 	.word	0x08005506
 80033f0:	08005517 	.word	0x08005517

080033f4 <std>:
 80033f4:	2300      	movs	r3, #0
 80033f6:	b510      	push	{r4, lr}
 80033f8:	4604      	mov	r4, r0
 80033fa:	e9c0 3300 	strd	r3, r3, [r0]
 80033fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003402:	6083      	str	r3, [r0, #8]
 8003404:	8181      	strh	r1, [r0, #12]
 8003406:	6643      	str	r3, [r0, #100]	; 0x64
 8003408:	81c2      	strh	r2, [r0, #14]
 800340a:	6183      	str	r3, [r0, #24]
 800340c:	4619      	mov	r1, r3
 800340e:	2208      	movs	r2, #8
 8003410:	305c      	adds	r0, #92	; 0x5c
 8003412:	f000 f977 	bl	8003704 <memset>
 8003416:	4b05      	ldr	r3, [pc, #20]	; (800342c <std+0x38>)
 8003418:	6263      	str	r3, [r4, #36]	; 0x24
 800341a:	4b05      	ldr	r3, [pc, #20]	; (8003430 <std+0x3c>)
 800341c:	62a3      	str	r3, [r4, #40]	; 0x28
 800341e:	4b05      	ldr	r3, [pc, #20]	; (8003434 <std+0x40>)
 8003420:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003422:	4b05      	ldr	r3, [pc, #20]	; (8003438 <std+0x44>)
 8003424:	6224      	str	r4, [r4, #32]
 8003426:	6323      	str	r3, [r4, #48]	; 0x30
 8003428:	bd10      	pop	{r4, pc}
 800342a:	bf00      	nop
 800342c:	08003555 	.word	0x08003555
 8003430:	08003577 	.word	0x08003577
 8003434:	080035af 	.word	0x080035af
 8003438:	080035d3 	.word	0x080035d3

0800343c <stdio_exit_handler>:
 800343c:	4a02      	ldr	r2, [pc, #8]	; (8003448 <stdio_exit_handler+0xc>)
 800343e:	4903      	ldr	r1, [pc, #12]	; (800344c <stdio_exit_handler+0x10>)
 8003440:	4803      	ldr	r0, [pc, #12]	; (8003450 <stdio_exit_handler+0x14>)
 8003442:	f000 b869 	b.w	8003518 <_fwalk_sglue>
 8003446:	bf00      	nop
 8003448:	2000000c 	.word	0x2000000c
 800344c:	080051d9 	.word	0x080051d9
 8003450:	20000018 	.word	0x20000018

08003454 <cleanup_stdio>:
 8003454:	6841      	ldr	r1, [r0, #4]
 8003456:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <cleanup_stdio+0x34>)
 8003458:	4299      	cmp	r1, r3
 800345a:	b510      	push	{r4, lr}
 800345c:	4604      	mov	r4, r0
 800345e:	d001      	beq.n	8003464 <cleanup_stdio+0x10>
 8003460:	f001 feba 	bl	80051d8 <_fflush_r>
 8003464:	68a1      	ldr	r1, [r4, #8]
 8003466:	4b09      	ldr	r3, [pc, #36]	; (800348c <cleanup_stdio+0x38>)
 8003468:	4299      	cmp	r1, r3
 800346a:	d002      	beq.n	8003472 <cleanup_stdio+0x1e>
 800346c:	4620      	mov	r0, r4
 800346e:	f001 feb3 	bl	80051d8 <_fflush_r>
 8003472:	68e1      	ldr	r1, [r4, #12]
 8003474:	4b06      	ldr	r3, [pc, #24]	; (8003490 <cleanup_stdio+0x3c>)
 8003476:	4299      	cmp	r1, r3
 8003478:	d004      	beq.n	8003484 <cleanup_stdio+0x30>
 800347a:	4620      	mov	r0, r4
 800347c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003480:	f001 beaa 	b.w	80051d8 <_fflush_r>
 8003484:	bd10      	pop	{r4, pc}
 8003486:	bf00      	nop
 8003488:	20000318 	.word	0x20000318
 800348c:	20000380 	.word	0x20000380
 8003490:	200003e8 	.word	0x200003e8

08003494 <global_stdio_init.part.0>:
 8003494:	b510      	push	{r4, lr}
 8003496:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <global_stdio_init.part.0+0x30>)
 8003498:	4c0b      	ldr	r4, [pc, #44]	; (80034c8 <global_stdio_init.part.0+0x34>)
 800349a:	4a0c      	ldr	r2, [pc, #48]	; (80034cc <global_stdio_init.part.0+0x38>)
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	4620      	mov	r0, r4
 80034a0:	2200      	movs	r2, #0
 80034a2:	2104      	movs	r1, #4
 80034a4:	f7ff ffa6 	bl	80033f4 <std>
 80034a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80034ac:	2201      	movs	r2, #1
 80034ae:	2109      	movs	r1, #9
 80034b0:	f7ff ffa0 	bl	80033f4 <std>
 80034b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80034b8:	2202      	movs	r2, #2
 80034ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034be:	2112      	movs	r1, #18
 80034c0:	f7ff bf98 	b.w	80033f4 <std>
 80034c4:	20000450 	.word	0x20000450
 80034c8:	20000318 	.word	0x20000318
 80034cc:	0800343d 	.word	0x0800343d

080034d0 <__sfp_lock_acquire>:
 80034d0:	4801      	ldr	r0, [pc, #4]	; (80034d8 <__sfp_lock_acquire+0x8>)
 80034d2:	f000 b993 	b.w	80037fc <__retarget_lock_acquire_recursive>
 80034d6:	bf00      	nop
 80034d8:	20000459 	.word	0x20000459

080034dc <__sfp_lock_release>:
 80034dc:	4801      	ldr	r0, [pc, #4]	; (80034e4 <__sfp_lock_release+0x8>)
 80034de:	f000 b98e 	b.w	80037fe <__retarget_lock_release_recursive>
 80034e2:	bf00      	nop
 80034e4:	20000459 	.word	0x20000459

080034e8 <__sinit>:
 80034e8:	b510      	push	{r4, lr}
 80034ea:	4604      	mov	r4, r0
 80034ec:	f7ff fff0 	bl	80034d0 <__sfp_lock_acquire>
 80034f0:	6a23      	ldr	r3, [r4, #32]
 80034f2:	b11b      	cbz	r3, 80034fc <__sinit+0x14>
 80034f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034f8:	f7ff bff0 	b.w	80034dc <__sfp_lock_release>
 80034fc:	4b04      	ldr	r3, [pc, #16]	; (8003510 <__sinit+0x28>)
 80034fe:	6223      	str	r3, [r4, #32]
 8003500:	4b04      	ldr	r3, [pc, #16]	; (8003514 <__sinit+0x2c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1f5      	bne.n	80034f4 <__sinit+0xc>
 8003508:	f7ff ffc4 	bl	8003494 <global_stdio_init.part.0>
 800350c:	e7f2      	b.n	80034f4 <__sinit+0xc>
 800350e:	bf00      	nop
 8003510:	08003455 	.word	0x08003455
 8003514:	20000450 	.word	0x20000450

08003518 <_fwalk_sglue>:
 8003518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800351c:	4607      	mov	r7, r0
 800351e:	4688      	mov	r8, r1
 8003520:	4614      	mov	r4, r2
 8003522:	2600      	movs	r6, #0
 8003524:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003528:	f1b9 0901 	subs.w	r9, r9, #1
 800352c:	d505      	bpl.n	800353a <_fwalk_sglue+0x22>
 800352e:	6824      	ldr	r4, [r4, #0]
 8003530:	2c00      	cmp	r4, #0
 8003532:	d1f7      	bne.n	8003524 <_fwalk_sglue+0xc>
 8003534:	4630      	mov	r0, r6
 8003536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800353a:	89ab      	ldrh	r3, [r5, #12]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d907      	bls.n	8003550 <_fwalk_sglue+0x38>
 8003540:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003544:	3301      	adds	r3, #1
 8003546:	d003      	beq.n	8003550 <_fwalk_sglue+0x38>
 8003548:	4629      	mov	r1, r5
 800354a:	4638      	mov	r0, r7
 800354c:	47c0      	blx	r8
 800354e:	4306      	orrs	r6, r0
 8003550:	3568      	adds	r5, #104	; 0x68
 8003552:	e7e9      	b.n	8003528 <_fwalk_sglue+0x10>

08003554 <__sread>:
 8003554:	b510      	push	{r4, lr}
 8003556:	460c      	mov	r4, r1
 8003558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800355c:	f000 f900 	bl	8003760 <_read_r>
 8003560:	2800      	cmp	r0, #0
 8003562:	bfab      	itete	ge
 8003564:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003566:	89a3      	ldrhlt	r3, [r4, #12]
 8003568:	181b      	addge	r3, r3, r0
 800356a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800356e:	bfac      	ite	ge
 8003570:	6563      	strge	r3, [r4, #84]	; 0x54
 8003572:	81a3      	strhlt	r3, [r4, #12]
 8003574:	bd10      	pop	{r4, pc}

08003576 <__swrite>:
 8003576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800357a:	461f      	mov	r7, r3
 800357c:	898b      	ldrh	r3, [r1, #12]
 800357e:	05db      	lsls	r3, r3, #23
 8003580:	4605      	mov	r5, r0
 8003582:	460c      	mov	r4, r1
 8003584:	4616      	mov	r6, r2
 8003586:	d505      	bpl.n	8003594 <__swrite+0x1e>
 8003588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800358c:	2302      	movs	r3, #2
 800358e:	2200      	movs	r2, #0
 8003590:	f000 f8d4 	bl	800373c <_lseek_r>
 8003594:	89a3      	ldrh	r3, [r4, #12]
 8003596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800359a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800359e:	81a3      	strh	r3, [r4, #12]
 80035a0:	4632      	mov	r2, r6
 80035a2:	463b      	mov	r3, r7
 80035a4:	4628      	mov	r0, r5
 80035a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035aa:	f000 b8eb 	b.w	8003784 <_write_r>

080035ae <__sseek>:
 80035ae:	b510      	push	{r4, lr}
 80035b0:	460c      	mov	r4, r1
 80035b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035b6:	f000 f8c1 	bl	800373c <_lseek_r>
 80035ba:	1c43      	adds	r3, r0, #1
 80035bc:	89a3      	ldrh	r3, [r4, #12]
 80035be:	bf15      	itete	ne
 80035c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80035c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80035c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80035ca:	81a3      	strheq	r3, [r4, #12]
 80035cc:	bf18      	it	ne
 80035ce:	81a3      	strhne	r3, [r4, #12]
 80035d0:	bd10      	pop	{r4, pc}

080035d2 <__sclose>:
 80035d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035d6:	f000 b8a1 	b.w	800371c <_close_r>

080035da <__swbuf_r>:
 80035da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035dc:	460e      	mov	r6, r1
 80035de:	4614      	mov	r4, r2
 80035e0:	4605      	mov	r5, r0
 80035e2:	b118      	cbz	r0, 80035ec <__swbuf_r+0x12>
 80035e4:	6a03      	ldr	r3, [r0, #32]
 80035e6:	b90b      	cbnz	r3, 80035ec <__swbuf_r+0x12>
 80035e8:	f7ff ff7e 	bl	80034e8 <__sinit>
 80035ec:	69a3      	ldr	r3, [r4, #24]
 80035ee:	60a3      	str	r3, [r4, #8]
 80035f0:	89a3      	ldrh	r3, [r4, #12]
 80035f2:	071a      	lsls	r2, r3, #28
 80035f4:	d525      	bpl.n	8003642 <__swbuf_r+0x68>
 80035f6:	6923      	ldr	r3, [r4, #16]
 80035f8:	b31b      	cbz	r3, 8003642 <__swbuf_r+0x68>
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	6922      	ldr	r2, [r4, #16]
 80035fe:	1a98      	subs	r0, r3, r2
 8003600:	6963      	ldr	r3, [r4, #20]
 8003602:	b2f6      	uxtb	r6, r6
 8003604:	4283      	cmp	r3, r0
 8003606:	4637      	mov	r7, r6
 8003608:	dc04      	bgt.n	8003614 <__swbuf_r+0x3a>
 800360a:	4621      	mov	r1, r4
 800360c:	4628      	mov	r0, r5
 800360e:	f001 fde3 	bl	80051d8 <_fflush_r>
 8003612:	b9e0      	cbnz	r0, 800364e <__swbuf_r+0x74>
 8003614:	68a3      	ldr	r3, [r4, #8]
 8003616:	3b01      	subs	r3, #1
 8003618:	60a3      	str	r3, [r4, #8]
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	6022      	str	r2, [r4, #0]
 8003620:	701e      	strb	r6, [r3, #0]
 8003622:	6962      	ldr	r2, [r4, #20]
 8003624:	1c43      	adds	r3, r0, #1
 8003626:	429a      	cmp	r2, r3
 8003628:	d004      	beq.n	8003634 <__swbuf_r+0x5a>
 800362a:	89a3      	ldrh	r3, [r4, #12]
 800362c:	07db      	lsls	r3, r3, #31
 800362e:	d506      	bpl.n	800363e <__swbuf_r+0x64>
 8003630:	2e0a      	cmp	r6, #10
 8003632:	d104      	bne.n	800363e <__swbuf_r+0x64>
 8003634:	4621      	mov	r1, r4
 8003636:	4628      	mov	r0, r5
 8003638:	f001 fdce 	bl	80051d8 <_fflush_r>
 800363c:	b938      	cbnz	r0, 800364e <__swbuf_r+0x74>
 800363e:	4638      	mov	r0, r7
 8003640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003642:	4621      	mov	r1, r4
 8003644:	4628      	mov	r0, r5
 8003646:	f000 f805 	bl	8003654 <__swsetup_r>
 800364a:	2800      	cmp	r0, #0
 800364c:	d0d5      	beq.n	80035fa <__swbuf_r+0x20>
 800364e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003652:	e7f4      	b.n	800363e <__swbuf_r+0x64>

08003654 <__swsetup_r>:
 8003654:	b538      	push	{r3, r4, r5, lr}
 8003656:	4b2a      	ldr	r3, [pc, #168]	; (8003700 <__swsetup_r+0xac>)
 8003658:	4605      	mov	r5, r0
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	460c      	mov	r4, r1
 800365e:	b118      	cbz	r0, 8003668 <__swsetup_r+0x14>
 8003660:	6a03      	ldr	r3, [r0, #32]
 8003662:	b90b      	cbnz	r3, 8003668 <__swsetup_r+0x14>
 8003664:	f7ff ff40 	bl	80034e8 <__sinit>
 8003668:	89a3      	ldrh	r3, [r4, #12]
 800366a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800366e:	0718      	lsls	r0, r3, #28
 8003670:	d422      	bmi.n	80036b8 <__swsetup_r+0x64>
 8003672:	06d9      	lsls	r1, r3, #27
 8003674:	d407      	bmi.n	8003686 <__swsetup_r+0x32>
 8003676:	2309      	movs	r3, #9
 8003678:	602b      	str	r3, [r5, #0]
 800367a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800367e:	81a3      	strh	r3, [r4, #12]
 8003680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003684:	e034      	b.n	80036f0 <__swsetup_r+0x9c>
 8003686:	0758      	lsls	r0, r3, #29
 8003688:	d512      	bpl.n	80036b0 <__swsetup_r+0x5c>
 800368a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800368c:	b141      	cbz	r1, 80036a0 <__swsetup_r+0x4c>
 800368e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003692:	4299      	cmp	r1, r3
 8003694:	d002      	beq.n	800369c <__swsetup_r+0x48>
 8003696:	4628      	mov	r0, r5
 8003698:	f000 ff58 	bl	800454c <_free_r>
 800369c:	2300      	movs	r3, #0
 800369e:	6363      	str	r3, [r4, #52]	; 0x34
 80036a0:	89a3      	ldrh	r3, [r4, #12]
 80036a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80036a6:	81a3      	strh	r3, [r4, #12]
 80036a8:	2300      	movs	r3, #0
 80036aa:	6063      	str	r3, [r4, #4]
 80036ac:	6923      	ldr	r3, [r4, #16]
 80036ae:	6023      	str	r3, [r4, #0]
 80036b0:	89a3      	ldrh	r3, [r4, #12]
 80036b2:	f043 0308 	orr.w	r3, r3, #8
 80036b6:	81a3      	strh	r3, [r4, #12]
 80036b8:	6923      	ldr	r3, [r4, #16]
 80036ba:	b94b      	cbnz	r3, 80036d0 <__swsetup_r+0x7c>
 80036bc:	89a3      	ldrh	r3, [r4, #12]
 80036be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80036c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c6:	d003      	beq.n	80036d0 <__swsetup_r+0x7c>
 80036c8:	4621      	mov	r1, r4
 80036ca:	4628      	mov	r0, r5
 80036cc:	f001 fde4 	bl	8005298 <__smakebuf_r>
 80036d0:	89a0      	ldrh	r0, [r4, #12]
 80036d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036d6:	f010 0301 	ands.w	r3, r0, #1
 80036da:	d00a      	beq.n	80036f2 <__swsetup_r+0x9e>
 80036dc:	2300      	movs	r3, #0
 80036de:	60a3      	str	r3, [r4, #8]
 80036e0:	6963      	ldr	r3, [r4, #20]
 80036e2:	425b      	negs	r3, r3
 80036e4:	61a3      	str	r3, [r4, #24]
 80036e6:	6923      	ldr	r3, [r4, #16]
 80036e8:	b943      	cbnz	r3, 80036fc <__swsetup_r+0xa8>
 80036ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80036ee:	d1c4      	bne.n	800367a <__swsetup_r+0x26>
 80036f0:	bd38      	pop	{r3, r4, r5, pc}
 80036f2:	0781      	lsls	r1, r0, #30
 80036f4:	bf58      	it	pl
 80036f6:	6963      	ldrpl	r3, [r4, #20]
 80036f8:	60a3      	str	r3, [r4, #8]
 80036fa:	e7f4      	b.n	80036e6 <__swsetup_r+0x92>
 80036fc:	2000      	movs	r0, #0
 80036fe:	e7f7      	b.n	80036f0 <__swsetup_r+0x9c>
 8003700:	20000064 	.word	0x20000064

08003704 <memset>:
 8003704:	4402      	add	r2, r0
 8003706:	4603      	mov	r3, r0
 8003708:	4293      	cmp	r3, r2
 800370a:	d100      	bne.n	800370e <memset+0xa>
 800370c:	4770      	bx	lr
 800370e:	f803 1b01 	strb.w	r1, [r3], #1
 8003712:	e7f9      	b.n	8003708 <memset+0x4>

08003714 <_localeconv_r>:
 8003714:	4800      	ldr	r0, [pc, #0]	; (8003718 <_localeconv_r+0x4>)
 8003716:	4770      	bx	lr
 8003718:	20000158 	.word	0x20000158

0800371c <_close_r>:
 800371c:	b538      	push	{r3, r4, r5, lr}
 800371e:	4d06      	ldr	r5, [pc, #24]	; (8003738 <_close_r+0x1c>)
 8003720:	2300      	movs	r3, #0
 8003722:	4604      	mov	r4, r0
 8003724:	4608      	mov	r0, r1
 8003726:	602b      	str	r3, [r5, #0]
 8003728:	f7ff f98a 	bl	8002a40 <_close>
 800372c:	1c43      	adds	r3, r0, #1
 800372e:	d102      	bne.n	8003736 <_close_r+0x1a>
 8003730:	682b      	ldr	r3, [r5, #0]
 8003732:	b103      	cbz	r3, 8003736 <_close_r+0x1a>
 8003734:	6023      	str	r3, [r4, #0]
 8003736:	bd38      	pop	{r3, r4, r5, pc}
 8003738:	20000454 	.word	0x20000454

0800373c <_lseek_r>:
 800373c:	b538      	push	{r3, r4, r5, lr}
 800373e:	4d07      	ldr	r5, [pc, #28]	; (800375c <_lseek_r+0x20>)
 8003740:	4604      	mov	r4, r0
 8003742:	4608      	mov	r0, r1
 8003744:	4611      	mov	r1, r2
 8003746:	2200      	movs	r2, #0
 8003748:	602a      	str	r2, [r5, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	f7ff f935 	bl	80029ba <_lseek>
 8003750:	1c43      	adds	r3, r0, #1
 8003752:	d102      	bne.n	800375a <_lseek_r+0x1e>
 8003754:	682b      	ldr	r3, [r5, #0]
 8003756:	b103      	cbz	r3, 800375a <_lseek_r+0x1e>
 8003758:	6023      	str	r3, [r4, #0]
 800375a:	bd38      	pop	{r3, r4, r5, pc}
 800375c:	20000454 	.word	0x20000454

08003760 <_read_r>:
 8003760:	b538      	push	{r3, r4, r5, lr}
 8003762:	4d07      	ldr	r5, [pc, #28]	; (8003780 <_read_r+0x20>)
 8003764:	4604      	mov	r4, r0
 8003766:	4608      	mov	r0, r1
 8003768:	4611      	mov	r1, r2
 800376a:	2200      	movs	r2, #0
 800376c:	602a      	str	r2, [r5, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	f7ff f8cb 	bl	800290a <_read>
 8003774:	1c43      	adds	r3, r0, #1
 8003776:	d102      	bne.n	800377e <_read_r+0x1e>
 8003778:	682b      	ldr	r3, [r5, #0]
 800377a:	b103      	cbz	r3, 800377e <_read_r+0x1e>
 800377c:	6023      	str	r3, [r4, #0]
 800377e:	bd38      	pop	{r3, r4, r5, pc}
 8003780:	20000454 	.word	0x20000454

08003784 <_write_r>:
 8003784:	b538      	push	{r3, r4, r5, lr}
 8003786:	4d07      	ldr	r5, [pc, #28]	; (80037a4 <_write_r+0x20>)
 8003788:	4604      	mov	r4, r0
 800378a:	4608      	mov	r0, r1
 800378c:	4611      	mov	r1, r2
 800378e:	2200      	movs	r2, #0
 8003790:	602a      	str	r2, [r5, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	f7ff f923 	bl	80029de <_write>
 8003798:	1c43      	adds	r3, r0, #1
 800379a:	d102      	bne.n	80037a2 <_write_r+0x1e>
 800379c:	682b      	ldr	r3, [r5, #0]
 800379e:	b103      	cbz	r3, 80037a2 <_write_r+0x1e>
 80037a0:	6023      	str	r3, [r4, #0]
 80037a2:	bd38      	pop	{r3, r4, r5, pc}
 80037a4:	20000454 	.word	0x20000454

080037a8 <__errno>:
 80037a8:	4b01      	ldr	r3, [pc, #4]	; (80037b0 <__errno+0x8>)
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	20000064 	.word	0x20000064

080037b4 <__libc_init_array>:
 80037b4:	b570      	push	{r4, r5, r6, lr}
 80037b6:	4d0d      	ldr	r5, [pc, #52]	; (80037ec <__libc_init_array+0x38>)
 80037b8:	4c0d      	ldr	r4, [pc, #52]	; (80037f0 <__libc_init_array+0x3c>)
 80037ba:	1b64      	subs	r4, r4, r5
 80037bc:	10a4      	asrs	r4, r4, #2
 80037be:	2600      	movs	r6, #0
 80037c0:	42a6      	cmp	r6, r4
 80037c2:	d109      	bne.n	80037d8 <__libc_init_array+0x24>
 80037c4:	4d0b      	ldr	r5, [pc, #44]	; (80037f4 <__libc_init_array+0x40>)
 80037c6:	4c0c      	ldr	r4, [pc, #48]	; (80037f8 <__libc_init_array+0x44>)
 80037c8:	f001 fe5e 	bl	8005488 <_init>
 80037cc:	1b64      	subs	r4, r4, r5
 80037ce:	10a4      	asrs	r4, r4, #2
 80037d0:	2600      	movs	r6, #0
 80037d2:	42a6      	cmp	r6, r4
 80037d4:	d105      	bne.n	80037e2 <__libc_init_array+0x2e>
 80037d6:	bd70      	pop	{r4, r5, r6, pc}
 80037d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037dc:	4798      	blx	r3
 80037de:	3601      	adds	r6, #1
 80037e0:	e7ee      	b.n	80037c0 <__libc_init_array+0xc>
 80037e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e6:	4798      	blx	r3
 80037e8:	3601      	adds	r6, #1
 80037ea:	e7f2      	b.n	80037d2 <__libc_init_array+0x1e>
 80037ec:	08005870 	.word	0x08005870
 80037f0:	08005870 	.word	0x08005870
 80037f4:	08005870 	.word	0x08005870
 80037f8:	08005874 	.word	0x08005874

080037fc <__retarget_lock_acquire_recursive>:
 80037fc:	4770      	bx	lr

080037fe <__retarget_lock_release_recursive>:
 80037fe:	4770      	bx	lr

08003800 <memcpy>:
 8003800:	440a      	add	r2, r1
 8003802:	4291      	cmp	r1, r2
 8003804:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003808:	d100      	bne.n	800380c <memcpy+0xc>
 800380a:	4770      	bx	lr
 800380c:	b510      	push	{r4, lr}
 800380e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003812:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003816:	4291      	cmp	r1, r2
 8003818:	d1f9      	bne.n	800380e <memcpy+0xe>
 800381a:	bd10      	pop	{r4, pc}

0800381c <__assert_func>:
 800381c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800381e:	4614      	mov	r4, r2
 8003820:	461a      	mov	r2, r3
 8003822:	4b09      	ldr	r3, [pc, #36]	; (8003848 <__assert_func+0x2c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4605      	mov	r5, r0
 8003828:	68d8      	ldr	r0, [r3, #12]
 800382a:	b14c      	cbz	r4, 8003840 <__assert_func+0x24>
 800382c:	4b07      	ldr	r3, [pc, #28]	; (800384c <__assert_func+0x30>)
 800382e:	9100      	str	r1, [sp, #0]
 8003830:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003834:	4906      	ldr	r1, [pc, #24]	; (8003850 <__assert_func+0x34>)
 8003836:	462b      	mov	r3, r5
 8003838:	f001 fcf6 	bl	8005228 <fiprintf>
 800383c:	f001 fd9a 	bl	8005374 <abort>
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <__assert_func+0x38>)
 8003842:	461c      	mov	r4, r3
 8003844:	e7f3      	b.n	800382e <__assert_func+0x12>
 8003846:	bf00      	nop
 8003848:	20000064 	.word	0x20000064
 800384c:	08005528 	.word	0x08005528
 8003850:	08005535 	.word	0x08005535
 8003854:	08005563 	.word	0x08005563

08003858 <quorem>:
 8003858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800385c:	6903      	ldr	r3, [r0, #16]
 800385e:	690c      	ldr	r4, [r1, #16]
 8003860:	42a3      	cmp	r3, r4
 8003862:	4607      	mov	r7, r0
 8003864:	db7e      	blt.n	8003964 <quorem+0x10c>
 8003866:	3c01      	subs	r4, #1
 8003868:	f101 0814 	add.w	r8, r1, #20
 800386c:	f100 0514 	add.w	r5, r0, #20
 8003870:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800387a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800387e:	3301      	adds	r3, #1
 8003880:	429a      	cmp	r2, r3
 8003882:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003886:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800388a:	fbb2 f6f3 	udiv	r6, r2, r3
 800388e:	d331      	bcc.n	80038f4 <quorem+0x9c>
 8003890:	f04f 0e00 	mov.w	lr, #0
 8003894:	4640      	mov	r0, r8
 8003896:	46ac      	mov	ip, r5
 8003898:	46f2      	mov	sl, lr
 800389a:	f850 2b04 	ldr.w	r2, [r0], #4
 800389e:	b293      	uxth	r3, r2
 80038a0:	fb06 e303 	mla	r3, r6, r3, lr
 80038a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80038a8:	0c1a      	lsrs	r2, r3, #16
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	ebaa 0303 	sub.w	r3, sl, r3
 80038b0:	f8dc a000 	ldr.w	sl, [ip]
 80038b4:	fa13 f38a 	uxtah	r3, r3, sl
 80038b8:	fb06 220e 	mla	r2, r6, lr, r2
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	9b00      	ldr	r3, [sp, #0]
 80038c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80038c4:	b292      	uxth	r2, r2
 80038c6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80038ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80038ce:	f8bd 3000 	ldrh.w	r3, [sp]
 80038d2:	4581      	cmp	r9, r0
 80038d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80038d8:	f84c 3b04 	str.w	r3, [ip], #4
 80038dc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80038e0:	d2db      	bcs.n	800389a <quorem+0x42>
 80038e2:	f855 300b 	ldr.w	r3, [r5, fp]
 80038e6:	b92b      	cbnz	r3, 80038f4 <quorem+0x9c>
 80038e8:	9b01      	ldr	r3, [sp, #4]
 80038ea:	3b04      	subs	r3, #4
 80038ec:	429d      	cmp	r5, r3
 80038ee:	461a      	mov	r2, r3
 80038f0:	d32c      	bcc.n	800394c <quorem+0xf4>
 80038f2:	613c      	str	r4, [r7, #16]
 80038f4:	4638      	mov	r0, r7
 80038f6:	f001 f9a5 	bl	8004c44 <__mcmp>
 80038fa:	2800      	cmp	r0, #0
 80038fc:	db22      	blt.n	8003944 <quorem+0xec>
 80038fe:	3601      	adds	r6, #1
 8003900:	4629      	mov	r1, r5
 8003902:	2000      	movs	r0, #0
 8003904:	f858 2b04 	ldr.w	r2, [r8], #4
 8003908:	f8d1 c000 	ldr.w	ip, [r1]
 800390c:	b293      	uxth	r3, r2
 800390e:	1ac3      	subs	r3, r0, r3
 8003910:	0c12      	lsrs	r2, r2, #16
 8003912:	fa13 f38c 	uxtah	r3, r3, ip
 8003916:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800391a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800391e:	b29b      	uxth	r3, r3
 8003920:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003924:	45c1      	cmp	r9, r8
 8003926:	f841 3b04 	str.w	r3, [r1], #4
 800392a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800392e:	d2e9      	bcs.n	8003904 <quorem+0xac>
 8003930:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003934:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003938:	b922      	cbnz	r2, 8003944 <quorem+0xec>
 800393a:	3b04      	subs	r3, #4
 800393c:	429d      	cmp	r5, r3
 800393e:	461a      	mov	r2, r3
 8003940:	d30a      	bcc.n	8003958 <quorem+0x100>
 8003942:	613c      	str	r4, [r7, #16]
 8003944:	4630      	mov	r0, r6
 8003946:	b003      	add	sp, #12
 8003948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800394c:	6812      	ldr	r2, [r2, #0]
 800394e:	3b04      	subs	r3, #4
 8003950:	2a00      	cmp	r2, #0
 8003952:	d1ce      	bne.n	80038f2 <quorem+0x9a>
 8003954:	3c01      	subs	r4, #1
 8003956:	e7c9      	b.n	80038ec <quorem+0x94>
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	3b04      	subs	r3, #4
 800395c:	2a00      	cmp	r2, #0
 800395e:	d1f0      	bne.n	8003942 <quorem+0xea>
 8003960:	3c01      	subs	r4, #1
 8003962:	e7eb      	b.n	800393c <quorem+0xe4>
 8003964:	2000      	movs	r0, #0
 8003966:	e7ee      	b.n	8003946 <quorem+0xee>

08003968 <_dtoa_r>:
 8003968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800396c:	ed2d 8b04 	vpush	{d8-d9}
 8003970:	69c5      	ldr	r5, [r0, #28]
 8003972:	b093      	sub	sp, #76	; 0x4c
 8003974:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003978:	ec57 6b10 	vmov	r6, r7, d0
 800397c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003980:	9107      	str	r1, [sp, #28]
 8003982:	4604      	mov	r4, r0
 8003984:	920a      	str	r2, [sp, #40]	; 0x28
 8003986:	930d      	str	r3, [sp, #52]	; 0x34
 8003988:	b975      	cbnz	r5, 80039a8 <_dtoa_r+0x40>
 800398a:	2010      	movs	r0, #16
 800398c:	f000 fe2a 	bl	80045e4 <malloc>
 8003990:	4602      	mov	r2, r0
 8003992:	61e0      	str	r0, [r4, #28]
 8003994:	b920      	cbnz	r0, 80039a0 <_dtoa_r+0x38>
 8003996:	4bae      	ldr	r3, [pc, #696]	; (8003c50 <_dtoa_r+0x2e8>)
 8003998:	21ef      	movs	r1, #239	; 0xef
 800399a:	48ae      	ldr	r0, [pc, #696]	; (8003c54 <_dtoa_r+0x2ec>)
 800399c:	f7ff ff3e 	bl	800381c <__assert_func>
 80039a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80039a4:	6005      	str	r5, [r0, #0]
 80039a6:	60c5      	str	r5, [r0, #12]
 80039a8:	69e3      	ldr	r3, [r4, #28]
 80039aa:	6819      	ldr	r1, [r3, #0]
 80039ac:	b151      	cbz	r1, 80039c4 <_dtoa_r+0x5c>
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	604a      	str	r2, [r1, #4]
 80039b2:	2301      	movs	r3, #1
 80039b4:	4093      	lsls	r3, r2
 80039b6:	608b      	str	r3, [r1, #8]
 80039b8:	4620      	mov	r0, r4
 80039ba:	f000 ff07 	bl	80047cc <_Bfree>
 80039be:	69e3      	ldr	r3, [r4, #28]
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	1e3b      	subs	r3, r7, #0
 80039c6:	bfbb      	ittet	lt
 80039c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80039cc:	9303      	strlt	r3, [sp, #12]
 80039ce:	2300      	movge	r3, #0
 80039d0:	2201      	movlt	r2, #1
 80039d2:	bfac      	ite	ge
 80039d4:	f8c8 3000 	strge.w	r3, [r8]
 80039d8:	f8c8 2000 	strlt.w	r2, [r8]
 80039dc:	4b9e      	ldr	r3, [pc, #632]	; (8003c58 <_dtoa_r+0x2f0>)
 80039de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80039e2:	ea33 0308 	bics.w	r3, r3, r8
 80039e6:	d11b      	bne.n	8003a20 <_dtoa_r+0xb8>
 80039e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80039ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80039f4:	4333      	orrs	r3, r6
 80039f6:	f000 8593 	beq.w	8004520 <_dtoa_r+0xbb8>
 80039fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80039fc:	b963      	cbnz	r3, 8003a18 <_dtoa_r+0xb0>
 80039fe:	4b97      	ldr	r3, [pc, #604]	; (8003c5c <_dtoa_r+0x2f4>)
 8003a00:	e027      	b.n	8003a52 <_dtoa_r+0xea>
 8003a02:	4b97      	ldr	r3, [pc, #604]	; (8003c60 <_dtoa_r+0x2f8>)
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	3308      	adds	r3, #8
 8003a08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	9800      	ldr	r0, [sp, #0]
 8003a0e:	b013      	add	sp, #76	; 0x4c
 8003a10:	ecbd 8b04 	vpop	{d8-d9}
 8003a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a18:	4b90      	ldr	r3, [pc, #576]	; (8003c5c <_dtoa_r+0x2f4>)
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	3303      	adds	r3, #3
 8003a1e:	e7f3      	b.n	8003a08 <_dtoa_r+0xa0>
 8003a20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003a24:	2200      	movs	r2, #0
 8003a26:	ec51 0b17 	vmov	r0, r1, d7
 8003a2a:	eeb0 8a47 	vmov.f32	s16, s14
 8003a2e:	eef0 8a67 	vmov.f32	s17, s15
 8003a32:	2300      	movs	r3, #0
 8003a34:	f7fd f848 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a38:	4681      	mov	r9, r0
 8003a3a:	b160      	cbz	r0, 8003a56 <_dtoa_r+0xee>
 8003a3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003a3e:	2301      	movs	r3, #1
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 8568 	beq.w	800451a <_dtoa_r+0xbb2>
 8003a4a:	4b86      	ldr	r3, [pc, #536]	; (8003c64 <_dtoa_r+0x2fc>)
 8003a4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	3b01      	subs	r3, #1
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	e7da      	b.n	8003a0c <_dtoa_r+0xa4>
 8003a56:	aa10      	add	r2, sp, #64	; 0x40
 8003a58:	a911      	add	r1, sp, #68	; 0x44
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	eeb0 0a48 	vmov.f32	s0, s16
 8003a60:	eef0 0a68 	vmov.f32	s1, s17
 8003a64:	f001 f994 	bl	8004d90 <__d2b>
 8003a68:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003a6c:	4682      	mov	sl, r0
 8003a6e:	2d00      	cmp	r5, #0
 8003a70:	d07f      	beq.n	8003b72 <_dtoa_r+0x20a>
 8003a72:	ee18 3a90 	vmov	r3, s17
 8003a76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a7a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003a7e:	ec51 0b18 	vmov	r0, r1, d8
 8003a82:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003a86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003a8a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003a8e:	4619      	mov	r1, r3
 8003a90:	2200      	movs	r2, #0
 8003a92:	4b75      	ldr	r3, [pc, #468]	; (8003c68 <_dtoa_r+0x300>)
 8003a94:	f7fc fbf8 	bl	8000288 <__aeabi_dsub>
 8003a98:	a367      	add	r3, pc, #412	; (adr r3, 8003c38 <_dtoa_r+0x2d0>)
 8003a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9e:	f7fc fdab 	bl	80005f8 <__aeabi_dmul>
 8003aa2:	a367      	add	r3, pc, #412	; (adr r3, 8003c40 <_dtoa_r+0x2d8>)
 8003aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa8:	f7fc fbf0 	bl	800028c <__adddf3>
 8003aac:	4606      	mov	r6, r0
 8003aae:	4628      	mov	r0, r5
 8003ab0:	460f      	mov	r7, r1
 8003ab2:	f7fc fd37 	bl	8000524 <__aeabi_i2d>
 8003ab6:	a364      	add	r3, pc, #400	; (adr r3, 8003c48 <_dtoa_r+0x2e0>)
 8003ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abc:	f7fc fd9c 	bl	80005f8 <__aeabi_dmul>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4630      	mov	r0, r6
 8003ac6:	4639      	mov	r1, r7
 8003ac8:	f7fc fbe0 	bl	800028c <__adddf3>
 8003acc:	4606      	mov	r6, r0
 8003ace:	460f      	mov	r7, r1
 8003ad0:	f7fd f842 	bl	8000b58 <__aeabi_d2iz>
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	4683      	mov	fp, r0
 8003ad8:	2300      	movs	r3, #0
 8003ada:	4630      	mov	r0, r6
 8003adc:	4639      	mov	r1, r7
 8003ade:	f7fc fffd 	bl	8000adc <__aeabi_dcmplt>
 8003ae2:	b148      	cbz	r0, 8003af8 <_dtoa_r+0x190>
 8003ae4:	4658      	mov	r0, fp
 8003ae6:	f7fc fd1d 	bl	8000524 <__aeabi_i2d>
 8003aea:	4632      	mov	r2, r6
 8003aec:	463b      	mov	r3, r7
 8003aee:	f7fc ffeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8003af2:	b908      	cbnz	r0, 8003af8 <_dtoa_r+0x190>
 8003af4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003af8:	f1bb 0f16 	cmp.w	fp, #22
 8003afc:	d857      	bhi.n	8003bae <_dtoa_r+0x246>
 8003afe:	4b5b      	ldr	r3, [pc, #364]	; (8003c6c <_dtoa_r+0x304>)
 8003b00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b08:	ec51 0b18 	vmov	r0, r1, d8
 8003b0c:	f7fc ffe6 	bl	8000adc <__aeabi_dcmplt>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	d04e      	beq.n	8003bb2 <_dtoa_r+0x24a>
 8003b14:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003b18:	2300      	movs	r3, #0
 8003b1a:	930c      	str	r3, [sp, #48]	; 0x30
 8003b1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003b1e:	1b5b      	subs	r3, r3, r5
 8003b20:	1e5a      	subs	r2, r3, #1
 8003b22:	bf45      	ittet	mi
 8003b24:	f1c3 0301 	rsbmi	r3, r3, #1
 8003b28:	9305      	strmi	r3, [sp, #20]
 8003b2a:	2300      	movpl	r3, #0
 8003b2c:	2300      	movmi	r3, #0
 8003b2e:	9206      	str	r2, [sp, #24]
 8003b30:	bf54      	ite	pl
 8003b32:	9305      	strpl	r3, [sp, #20]
 8003b34:	9306      	strmi	r3, [sp, #24]
 8003b36:	f1bb 0f00 	cmp.w	fp, #0
 8003b3a:	db3c      	blt.n	8003bb6 <_dtoa_r+0x24e>
 8003b3c:	9b06      	ldr	r3, [sp, #24]
 8003b3e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003b42:	445b      	add	r3, fp
 8003b44:	9306      	str	r3, [sp, #24]
 8003b46:	2300      	movs	r3, #0
 8003b48:	9308      	str	r3, [sp, #32]
 8003b4a:	9b07      	ldr	r3, [sp, #28]
 8003b4c:	2b09      	cmp	r3, #9
 8003b4e:	d868      	bhi.n	8003c22 <_dtoa_r+0x2ba>
 8003b50:	2b05      	cmp	r3, #5
 8003b52:	bfc4      	itt	gt
 8003b54:	3b04      	subgt	r3, #4
 8003b56:	9307      	strgt	r3, [sp, #28]
 8003b58:	9b07      	ldr	r3, [sp, #28]
 8003b5a:	f1a3 0302 	sub.w	r3, r3, #2
 8003b5e:	bfcc      	ite	gt
 8003b60:	2500      	movgt	r5, #0
 8003b62:	2501      	movle	r5, #1
 8003b64:	2b03      	cmp	r3, #3
 8003b66:	f200 8085 	bhi.w	8003c74 <_dtoa_r+0x30c>
 8003b6a:	e8df f003 	tbb	[pc, r3]
 8003b6e:	3b2e      	.short	0x3b2e
 8003b70:	5839      	.short	0x5839
 8003b72:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003b76:	441d      	add	r5, r3
 8003b78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	bfc1      	itttt	gt
 8003b80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003b84:	fa08 f803 	lslgt.w	r8, r8, r3
 8003b88:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8003b8c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003b90:	bfd6      	itet	le
 8003b92:	f1c3 0320 	rsble	r3, r3, #32
 8003b96:	ea48 0003 	orrgt.w	r0, r8, r3
 8003b9a:	fa06 f003 	lslle.w	r0, r6, r3
 8003b9e:	f7fc fcb1 	bl	8000504 <__aeabi_ui2d>
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003ba8:	3d01      	subs	r5, #1
 8003baa:	920e      	str	r2, [sp, #56]	; 0x38
 8003bac:	e76f      	b.n	8003a8e <_dtoa_r+0x126>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e7b3      	b.n	8003b1a <_dtoa_r+0x1b2>
 8003bb2:	900c      	str	r0, [sp, #48]	; 0x30
 8003bb4:	e7b2      	b.n	8003b1c <_dtoa_r+0x1b4>
 8003bb6:	9b05      	ldr	r3, [sp, #20]
 8003bb8:	eba3 030b 	sub.w	r3, r3, fp
 8003bbc:	9305      	str	r3, [sp, #20]
 8003bbe:	f1cb 0300 	rsb	r3, fp, #0
 8003bc2:	9308      	str	r3, [sp, #32]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003bc8:	e7bf      	b.n	8003b4a <_dtoa_r+0x1e2>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8003bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	dc52      	bgt.n	8003c7a <_dtoa_r+0x312>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	9301      	str	r3, [sp, #4]
 8003bd8:	9304      	str	r3, [sp, #16]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	920a      	str	r2, [sp, #40]	; 0x28
 8003bde:	e00b      	b.n	8003bf8 <_dtoa_r+0x290>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e7f3      	b.n	8003bcc <_dtoa_r+0x264>
 8003be4:	2300      	movs	r3, #0
 8003be6:	9309      	str	r3, [sp, #36]	; 0x24
 8003be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bea:	445b      	add	r3, fp
 8003bec:	9301      	str	r3, [sp, #4]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	9304      	str	r3, [sp, #16]
 8003bf4:	bfb8      	it	lt
 8003bf6:	2301      	movlt	r3, #1
 8003bf8:	69e0      	ldr	r0, [r4, #28]
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	f102 0614 	add.w	r6, r2, #20
 8003c02:	429e      	cmp	r6, r3
 8003c04:	d93d      	bls.n	8003c82 <_dtoa_r+0x31a>
 8003c06:	6041      	str	r1, [r0, #4]
 8003c08:	4620      	mov	r0, r4
 8003c0a:	f000 fd9f 	bl	800474c <_Balloc>
 8003c0e:	9000      	str	r0, [sp, #0]
 8003c10:	2800      	cmp	r0, #0
 8003c12:	d139      	bne.n	8003c88 <_dtoa_r+0x320>
 8003c14:	4b16      	ldr	r3, [pc, #88]	; (8003c70 <_dtoa_r+0x308>)
 8003c16:	4602      	mov	r2, r0
 8003c18:	f240 11af 	movw	r1, #431	; 0x1af
 8003c1c:	e6bd      	b.n	800399a <_dtoa_r+0x32>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e7e1      	b.n	8003be6 <_dtoa_r+0x27e>
 8003c22:	2501      	movs	r5, #1
 8003c24:	2300      	movs	r3, #0
 8003c26:	9307      	str	r3, [sp, #28]
 8003c28:	9509      	str	r5, [sp, #36]	; 0x24
 8003c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c2e:	9301      	str	r3, [sp, #4]
 8003c30:	9304      	str	r3, [sp, #16]
 8003c32:	2200      	movs	r2, #0
 8003c34:	2312      	movs	r3, #18
 8003c36:	e7d1      	b.n	8003bdc <_dtoa_r+0x274>
 8003c38:	636f4361 	.word	0x636f4361
 8003c3c:	3fd287a7 	.word	0x3fd287a7
 8003c40:	8b60c8b3 	.word	0x8b60c8b3
 8003c44:	3fc68a28 	.word	0x3fc68a28
 8003c48:	509f79fb 	.word	0x509f79fb
 8003c4c:	3fd34413 	.word	0x3fd34413
 8003c50:	08005571 	.word	0x08005571
 8003c54:	08005588 	.word	0x08005588
 8003c58:	7ff00000 	.word	0x7ff00000
 8003c5c:	0800556d 	.word	0x0800556d
 8003c60:	08005564 	.word	0x08005564
 8003c64:	08005505 	.word	0x08005505
 8003c68:	3ff80000 	.word	0x3ff80000
 8003c6c:	08005678 	.word	0x08005678
 8003c70:	080055e0 	.word	0x080055e0
 8003c74:	2301      	movs	r3, #1
 8003c76:	9309      	str	r3, [sp, #36]	; 0x24
 8003c78:	e7d7      	b.n	8003c2a <_dtoa_r+0x2c2>
 8003c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c7c:	9301      	str	r3, [sp, #4]
 8003c7e:	9304      	str	r3, [sp, #16]
 8003c80:	e7ba      	b.n	8003bf8 <_dtoa_r+0x290>
 8003c82:	3101      	adds	r1, #1
 8003c84:	0052      	lsls	r2, r2, #1
 8003c86:	e7ba      	b.n	8003bfe <_dtoa_r+0x296>
 8003c88:	69e3      	ldr	r3, [r4, #28]
 8003c8a:	9a00      	ldr	r2, [sp, #0]
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	9b04      	ldr	r3, [sp, #16]
 8003c90:	2b0e      	cmp	r3, #14
 8003c92:	f200 80a8 	bhi.w	8003de6 <_dtoa_r+0x47e>
 8003c96:	2d00      	cmp	r5, #0
 8003c98:	f000 80a5 	beq.w	8003de6 <_dtoa_r+0x47e>
 8003c9c:	f1bb 0f00 	cmp.w	fp, #0
 8003ca0:	dd38      	ble.n	8003d14 <_dtoa_r+0x3ac>
 8003ca2:	4bc0      	ldr	r3, [pc, #768]	; (8003fa4 <_dtoa_r+0x63c>)
 8003ca4:	f00b 020f 	and.w	r2, fp, #15
 8003ca8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003cac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003cb0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003cb4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8003cb8:	d019      	beq.n	8003cee <_dtoa_r+0x386>
 8003cba:	4bbb      	ldr	r3, [pc, #748]	; (8003fa8 <_dtoa_r+0x640>)
 8003cbc:	ec51 0b18 	vmov	r0, r1, d8
 8003cc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003cc4:	f7fc fdc2 	bl	800084c <__aeabi_ddiv>
 8003cc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ccc:	f008 080f 	and.w	r8, r8, #15
 8003cd0:	2503      	movs	r5, #3
 8003cd2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8003fa8 <_dtoa_r+0x640>
 8003cd6:	f1b8 0f00 	cmp.w	r8, #0
 8003cda:	d10a      	bne.n	8003cf2 <_dtoa_r+0x38a>
 8003cdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ce0:	4632      	mov	r2, r6
 8003ce2:	463b      	mov	r3, r7
 8003ce4:	f7fc fdb2 	bl	800084c <__aeabi_ddiv>
 8003ce8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cec:	e02b      	b.n	8003d46 <_dtoa_r+0x3de>
 8003cee:	2502      	movs	r5, #2
 8003cf0:	e7ef      	b.n	8003cd2 <_dtoa_r+0x36a>
 8003cf2:	f018 0f01 	tst.w	r8, #1
 8003cf6:	d008      	beq.n	8003d0a <_dtoa_r+0x3a2>
 8003cf8:	4630      	mov	r0, r6
 8003cfa:	4639      	mov	r1, r7
 8003cfc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003d00:	f7fc fc7a 	bl	80005f8 <__aeabi_dmul>
 8003d04:	3501      	adds	r5, #1
 8003d06:	4606      	mov	r6, r0
 8003d08:	460f      	mov	r7, r1
 8003d0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003d0e:	f109 0908 	add.w	r9, r9, #8
 8003d12:	e7e0      	b.n	8003cd6 <_dtoa_r+0x36e>
 8003d14:	f000 809f 	beq.w	8003e56 <_dtoa_r+0x4ee>
 8003d18:	f1cb 0600 	rsb	r6, fp, #0
 8003d1c:	4ba1      	ldr	r3, [pc, #644]	; (8003fa4 <_dtoa_r+0x63c>)
 8003d1e:	4fa2      	ldr	r7, [pc, #648]	; (8003fa8 <_dtoa_r+0x640>)
 8003d20:	f006 020f 	and.w	r2, r6, #15
 8003d24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2c:	ec51 0b18 	vmov	r0, r1, d8
 8003d30:	f7fc fc62 	bl	80005f8 <__aeabi_dmul>
 8003d34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d38:	1136      	asrs	r6, r6, #4
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	2502      	movs	r5, #2
 8003d3e:	2e00      	cmp	r6, #0
 8003d40:	d17e      	bne.n	8003e40 <_dtoa_r+0x4d8>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1d0      	bne.n	8003ce8 <_dtoa_r+0x380>
 8003d46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d48:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8084 	beq.w	8003e5a <_dtoa_r+0x4f2>
 8003d52:	4b96      	ldr	r3, [pc, #600]	; (8003fac <_dtoa_r+0x644>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	4640      	mov	r0, r8
 8003d58:	4649      	mov	r1, r9
 8003d5a:	f7fc febf 	bl	8000adc <__aeabi_dcmplt>
 8003d5e:	2800      	cmp	r0, #0
 8003d60:	d07b      	beq.n	8003e5a <_dtoa_r+0x4f2>
 8003d62:	9b04      	ldr	r3, [sp, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d078      	beq.n	8003e5a <_dtoa_r+0x4f2>
 8003d68:	9b01      	ldr	r3, [sp, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	dd39      	ble.n	8003de2 <_dtoa_r+0x47a>
 8003d6e:	4b90      	ldr	r3, [pc, #576]	; (8003fb0 <_dtoa_r+0x648>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	4640      	mov	r0, r8
 8003d74:	4649      	mov	r1, r9
 8003d76:	f7fc fc3f 	bl	80005f8 <__aeabi_dmul>
 8003d7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d7e:	9e01      	ldr	r6, [sp, #4]
 8003d80:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8003d84:	3501      	adds	r5, #1
 8003d86:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003d8a:	4628      	mov	r0, r5
 8003d8c:	f7fc fbca 	bl	8000524 <__aeabi_i2d>
 8003d90:	4642      	mov	r2, r8
 8003d92:	464b      	mov	r3, r9
 8003d94:	f7fc fc30 	bl	80005f8 <__aeabi_dmul>
 8003d98:	4b86      	ldr	r3, [pc, #536]	; (8003fb4 <_dtoa_r+0x64c>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f7fc fa76 	bl	800028c <__adddf3>
 8003da0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8003da4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003da8:	9303      	str	r3, [sp, #12]
 8003daa:	2e00      	cmp	r6, #0
 8003dac:	d158      	bne.n	8003e60 <_dtoa_r+0x4f8>
 8003dae:	4b82      	ldr	r3, [pc, #520]	; (8003fb8 <_dtoa_r+0x650>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	4640      	mov	r0, r8
 8003db4:	4649      	mov	r1, r9
 8003db6:	f7fc fa67 	bl	8000288 <__aeabi_dsub>
 8003dba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003dbe:	4680      	mov	r8, r0
 8003dc0:	4689      	mov	r9, r1
 8003dc2:	f7fc fea9 	bl	8000b18 <__aeabi_dcmpgt>
 8003dc6:	2800      	cmp	r0, #0
 8003dc8:	f040 8296 	bne.w	80042f8 <_dtoa_r+0x990>
 8003dcc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8003dd0:	4640      	mov	r0, r8
 8003dd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	f7fc fe80 	bl	8000adc <__aeabi_dcmplt>
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	f040 8289 	bne.w	80042f4 <_dtoa_r+0x98c>
 8003de2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8003de6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f2c0 814e 	blt.w	800408a <_dtoa_r+0x722>
 8003dee:	f1bb 0f0e 	cmp.w	fp, #14
 8003df2:	f300 814a 	bgt.w	800408a <_dtoa_r+0x722>
 8003df6:	4b6b      	ldr	r3, [pc, #428]	; (8003fa4 <_dtoa_r+0x63c>)
 8003df8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003dfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f280 80dc 	bge.w	8003fc0 <_dtoa_r+0x658>
 8003e08:	9b04      	ldr	r3, [sp, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f300 80d8 	bgt.w	8003fc0 <_dtoa_r+0x658>
 8003e10:	f040 826f 	bne.w	80042f2 <_dtoa_r+0x98a>
 8003e14:	4b68      	ldr	r3, [pc, #416]	; (8003fb8 <_dtoa_r+0x650>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	4640      	mov	r0, r8
 8003e1a:	4649      	mov	r1, r9
 8003e1c:	f7fc fbec 	bl	80005f8 <__aeabi_dmul>
 8003e20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e24:	f7fc fe6e 	bl	8000b04 <__aeabi_dcmpge>
 8003e28:	9e04      	ldr	r6, [sp, #16]
 8003e2a:	4637      	mov	r7, r6
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	f040 8245 	bne.w	80042bc <_dtoa_r+0x954>
 8003e32:	9d00      	ldr	r5, [sp, #0]
 8003e34:	2331      	movs	r3, #49	; 0x31
 8003e36:	f805 3b01 	strb.w	r3, [r5], #1
 8003e3a:	f10b 0b01 	add.w	fp, fp, #1
 8003e3e:	e241      	b.n	80042c4 <_dtoa_r+0x95c>
 8003e40:	07f2      	lsls	r2, r6, #31
 8003e42:	d505      	bpl.n	8003e50 <_dtoa_r+0x4e8>
 8003e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e48:	f7fc fbd6 	bl	80005f8 <__aeabi_dmul>
 8003e4c:	3501      	adds	r5, #1
 8003e4e:	2301      	movs	r3, #1
 8003e50:	1076      	asrs	r6, r6, #1
 8003e52:	3708      	adds	r7, #8
 8003e54:	e773      	b.n	8003d3e <_dtoa_r+0x3d6>
 8003e56:	2502      	movs	r5, #2
 8003e58:	e775      	b.n	8003d46 <_dtoa_r+0x3de>
 8003e5a:	9e04      	ldr	r6, [sp, #16]
 8003e5c:	465f      	mov	r7, fp
 8003e5e:	e792      	b.n	8003d86 <_dtoa_r+0x41e>
 8003e60:	9900      	ldr	r1, [sp, #0]
 8003e62:	4b50      	ldr	r3, [pc, #320]	; (8003fa4 <_dtoa_r+0x63c>)
 8003e64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003e68:	4431      	add	r1, r6
 8003e6a:	9102      	str	r1, [sp, #8]
 8003e6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003e6e:	eeb0 9a47 	vmov.f32	s18, s14
 8003e72:	eef0 9a67 	vmov.f32	s19, s15
 8003e76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003e7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003e7e:	2900      	cmp	r1, #0
 8003e80:	d044      	beq.n	8003f0c <_dtoa_r+0x5a4>
 8003e82:	494e      	ldr	r1, [pc, #312]	; (8003fbc <_dtoa_r+0x654>)
 8003e84:	2000      	movs	r0, #0
 8003e86:	f7fc fce1 	bl	800084c <__aeabi_ddiv>
 8003e8a:	ec53 2b19 	vmov	r2, r3, d9
 8003e8e:	f7fc f9fb 	bl	8000288 <__aeabi_dsub>
 8003e92:	9d00      	ldr	r5, [sp, #0]
 8003e94:	ec41 0b19 	vmov	d9, r0, r1
 8003e98:	4649      	mov	r1, r9
 8003e9a:	4640      	mov	r0, r8
 8003e9c:	f7fc fe5c 	bl	8000b58 <__aeabi_d2iz>
 8003ea0:	4606      	mov	r6, r0
 8003ea2:	f7fc fb3f 	bl	8000524 <__aeabi_i2d>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4640      	mov	r0, r8
 8003eac:	4649      	mov	r1, r9
 8003eae:	f7fc f9eb 	bl	8000288 <__aeabi_dsub>
 8003eb2:	3630      	adds	r6, #48	; 0x30
 8003eb4:	f805 6b01 	strb.w	r6, [r5], #1
 8003eb8:	ec53 2b19 	vmov	r2, r3, d9
 8003ebc:	4680      	mov	r8, r0
 8003ebe:	4689      	mov	r9, r1
 8003ec0:	f7fc fe0c 	bl	8000adc <__aeabi_dcmplt>
 8003ec4:	2800      	cmp	r0, #0
 8003ec6:	d164      	bne.n	8003f92 <_dtoa_r+0x62a>
 8003ec8:	4642      	mov	r2, r8
 8003eca:	464b      	mov	r3, r9
 8003ecc:	4937      	ldr	r1, [pc, #220]	; (8003fac <_dtoa_r+0x644>)
 8003ece:	2000      	movs	r0, #0
 8003ed0:	f7fc f9da 	bl	8000288 <__aeabi_dsub>
 8003ed4:	ec53 2b19 	vmov	r2, r3, d9
 8003ed8:	f7fc fe00 	bl	8000adc <__aeabi_dcmplt>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	f040 80b6 	bne.w	800404e <_dtoa_r+0x6e6>
 8003ee2:	9b02      	ldr	r3, [sp, #8]
 8003ee4:	429d      	cmp	r5, r3
 8003ee6:	f43f af7c 	beq.w	8003de2 <_dtoa_r+0x47a>
 8003eea:	4b31      	ldr	r3, [pc, #196]	; (8003fb0 <_dtoa_r+0x648>)
 8003eec:	ec51 0b19 	vmov	r0, r1, d9
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f7fc fb81 	bl	80005f8 <__aeabi_dmul>
 8003ef6:	4b2e      	ldr	r3, [pc, #184]	; (8003fb0 <_dtoa_r+0x648>)
 8003ef8:	ec41 0b19 	vmov	d9, r0, r1
 8003efc:	2200      	movs	r2, #0
 8003efe:	4640      	mov	r0, r8
 8003f00:	4649      	mov	r1, r9
 8003f02:	f7fc fb79 	bl	80005f8 <__aeabi_dmul>
 8003f06:	4680      	mov	r8, r0
 8003f08:	4689      	mov	r9, r1
 8003f0a:	e7c5      	b.n	8003e98 <_dtoa_r+0x530>
 8003f0c:	ec51 0b17 	vmov	r0, r1, d7
 8003f10:	f7fc fb72 	bl	80005f8 <__aeabi_dmul>
 8003f14:	9b02      	ldr	r3, [sp, #8]
 8003f16:	9d00      	ldr	r5, [sp, #0]
 8003f18:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f1a:	ec41 0b19 	vmov	d9, r0, r1
 8003f1e:	4649      	mov	r1, r9
 8003f20:	4640      	mov	r0, r8
 8003f22:	f7fc fe19 	bl	8000b58 <__aeabi_d2iz>
 8003f26:	4606      	mov	r6, r0
 8003f28:	f7fc fafc 	bl	8000524 <__aeabi_i2d>
 8003f2c:	3630      	adds	r6, #48	; 0x30
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4640      	mov	r0, r8
 8003f34:	4649      	mov	r1, r9
 8003f36:	f7fc f9a7 	bl	8000288 <__aeabi_dsub>
 8003f3a:	f805 6b01 	strb.w	r6, [r5], #1
 8003f3e:	9b02      	ldr	r3, [sp, #8]
 8003f40:	429d      	cmp	r5, r3
 8003f42:	4680      	mov	r8, r0
 8003f44:	4689      	mov	r9, r1
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	d124      	bne.n	8003f96 <_dtoa_r+0x62e>
 8003f4c:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <_dtoa_r+0x654>)
 8003f4e:	ec51 0b19 	vmov	r0, r1, d9
 8003f52:	f7fc f99b 	bl	800028c <__adddf3>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4640      	mov	r0, r8
 8003f5c:	4649      	mov	r1, r9
 8003f5e:	f7fc fddb 	bl	8000b18 <__aeabi_dcmpgt>
 8003f62:	2800      	cmp	r0, #0
 8003f64:	d173      	bne.n	800404e <_dtoa_r+0x6e6>
 8003f66:	ec53 2b19 	vmov	r2, r3, d9
 8003f6a:	4914      	ldr	r1, [pc, #80]	; (8003fbc <_dtoa_r+0x654>)
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	f7fc f98b 	bl	8000288 <__aeabi_dsub>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4640      	mov	r0, r8
 8003f78:	4649      	mov	r1, r9
 8003f7a:	f7fc fdaf 	bl	8000adc <__aeabi_dcmplt>
 8003f7e:	2800      	cmp	r0, #0
 8003f80:	f43f af2f 	beq.w	8003de2 <_dtoa_r+0x47a>
 8003f84:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003f86:	1e6b      	subs	r3, r5, #1
 8003f88:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003f8e:	2b30      	cmp	r3, #48	; 0x30
 8003f90:	d0f8      	beq.n	8003f84 <_dtoa_r+0x61c>
 8003f92:	46bb      	mov	fp, r7
 8003f94:	e04a      	b.n	800402c <_dtoa_r+0x6c4>
 8003f96:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <_dtoa_r+0x648>)
 8003f98:	f7fc fb2e 	bl	80005f8 <__aeabi_dmul>
 8003f9c:	4680      	mov	r8, r0
 8003f9e:	4689      	mov	r9, r1
 8003fa0:	e7bd      	b.n	8003f1e <_dtoa_r+0x5b6>
 8003fa2:	bf00      	nop
 8003fa4:	08005678 	.word	0x08005678
 8003fa8:	08005650 	.word	0x08005650
 8003fac:	3ff00000 	.word	0x3ff00000
 8003fb0:	40240000 	.word	0x40240000
 8003fb4:	401c0000 	.word	0x401c0000
 8003fb8:	40140000 	.word	0x40140000
 8003fbc:	3fe00000 	.word	0x3fe00000
 8003fc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003fc4:	9d00      	ldr	r5, [sp, #0]
 8003fc6:	4642      	mov	r2, r8
 8003fc8:	464b      	mov	r3, r9
 8003fca:	4630      	mov	r0, r6
 8003fcc:	4639      	mov	r1, r7
 8003fce:	f7fc fc3d 	bl	800084c <__aeabi_ddiv>
 8003fd2:	f7fc fdc1 	bl	8000b58 <__aeabi_d2iz>
 8003fd6:	9001      	str	r0, [sp, #4]
 8003fd8:	f7fc faa4 	bl	8000524 <__aeabi_i2d>
 8003fdc:	4642      	mov	r2, r8
 8003fde:	464b      	mov	r3, r9
 8003fe0:	f7fc fb0a 	bl	80005f8 <__aeabi_dmul>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4630      	mov	r0, r6
 8003fea:	4639      	mov	r1, r7
 8003fec:	f7fc f94c 	bl	8000288 <__aeabi_dsub>
 8003ff0:	9e01      	ldr	r6, [sp, #4]
 8003ff2:	9f04      	ldr	r7, [sp, #16]
 8003ff4:	3630      	adds	r6, #48	; 0x30
 8003ff6:	f805 6b01 	strb.w	r6, [r5], #1
 8003ffa:	9e00      	ldr	r6, [sp, #0]
 8003ffc:	1bae      	subs	r6, r5, r6
 8003ffe:	42b7      	cmp	r7, r6
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	d134      	bne.n	8004070 <_dtoa_r+0x708>
 8004006:	f7fc f941 	bl	800028c <__adddf3>
 800400a:	4642      	mov	r2, r8
 800400c:	464b      	mov	r3, r9
 800400e:	4606      	mov	r6, r0
 8004010:	460f      	mov	r7, r1
 8004012:	f7fc fd81 	bl	8000b18 <__aeabi_dcmpgt>
 8004016:	b9c8      	cbnz	r0, 800404c <_dtoa_r+0x6e4>
 8004018:	4642      	mov	r2, r8
 800401a:	464b      	mov	r3, r9
 800401c:	4630      	mov	r0, r6
 800401e:	4639      	mov	r1, r7
 8004020:	f7fc fd52 	bl	8000ac8 <__aeabi_dcmpeq>
 8004024:	b110      	cbz	r0, 800402c <_dtoa_r+0x6c4>
 8004026:	9b01      	ldr	r3, [sp, #4]
 8004028:	07db      	lsls	r3, r3, #31
 800402a:	d40f      	bmi.n	800404c <_dtoa_r+0x6e4>
 800402c:	4651      	mov	r1, sl
 800402e:	4620      	mov	r0, r4
 8004030:	f000 fbcc 	bl	80047cc <_Bfree>
 8004034:	2300      	movs	r3, #0
 8004036:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004038:	702b      	strb	r3, [r5, #0]
 800403a:	f10b 0301 	add.w	r3, fp, #1
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004042:	2b00      	cmp	r3, #0
 8004044:	f43f ace2 	beq.w	8003a0c <_dtoa_r+0xa4>
 8004048:	601d      	str	r5, [r3, #0]
 800404a:	e4df      	b.n	8003a0c <_dtoa_r+0xa4>
 800404c:	465f      	mov	r7, fp
 800404e:	462b      	mov	r3, r5
 8004050:	461d      	mov	r5, r3
 8004052:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004056:	2a39      	cmp	r2, #57	; 0x39
 8004058:	d106      	bne.n	8004068 <_dtoa_r+0x700>
 800405a:	9a00      	ldr	r2, [sp, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d1f7      	bne.n	8004050 <_dtoa_r+0x6e8>
 8004060:	9900      	ldr	r1, [sp, #0]
 8004062:	2230      	movs	r2, #48	; 0x30
 8004064:	3701      	adds	r7, #1
 8004066:	700a      	strb	r2, [r1, #0]
 8004068:	781a      	ldrb	r2, [r3, #0]
 800406a:	3201      	adds	r2, #1
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	e790      	b.n	8003f92 <_dtoa_r+0x62a>
 8004070:	4ba3      	ldr	r3, [pc, #652]	; (8004300 <_dtoa_r+0x998>)
 8004072:	2200      	movs	r2, #0
 8004074:	f7fc fac0 	bl	80005f8 <__aeabi_dmul>
 8004078:	2200      	movs	r2, #0
 800407a:	2300      	movs	r3, #0
 800407c:	4606      	mov	r6, r0
 800407e:	460f      	mov	r7, r1
 8004080:	f7fc fd22 	bl	8000ac8 <__aeabi_dcmpeq>
 8004084:	2800      	cmp	r0, #0
 8004086:	d09e      	beq.n	8003fc6 <_dtoa_r+0x65e>
 8004088:	e7d0      	b.n	800402c <_dtoa_r+0x6c4>
 800408a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800408c:	2a00      	cmp	r2, #0
 800408e:	f000 80ca 	beq.w	8004226 <_dtoa_r+0x8be>
 8004092:	9a07      	ldr	r2, [sp, #28]
 8004094:	2a01      	cmp	r2, #1
 8004096:	f300 80ad 	bgt.w	80041f4 <_dtoa_r+0x88c>
 800409a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800409c:	2a00      	cmp	r2, #0
 800409e:	f000 80a5 	beq.w	80041ec <_dtoa_r+0x884>
 80040a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80040a6:	9e08      	ldr	r6, [sp, #32]
 80040a8:	9d05      	ldr	r5, [sp, #20]
 80040aa:	9a05      	ldr	r2, [sp, #20]
 80040ac:	441a      	add	r2, r3
 80040ae:	9205      	str	r2, [sp, #20]
 80040b0:	9a06      	ldr	r2, [sp, #24]
 80040b2:	2101      	movs	r1, #1
 80040b4:	441a      	add	r2, r3
 80040b6:	4620      	mov	r0, r4
 80040b8:	9206      	str	r2, [sp, #24]
 80040ba:	f000 fc3d 	bl	8004938 <__i2b>
 80040be:	4607      	mov	r7, r0
 80040c0:	b165      	cbz	r5, 80040dc <_dtoa_r+0x774>
 80040c2:	9b06      	ldr	r3, [sp, #24]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	dd09      	ble.n	80040dc <_dtoa_r+0x774>
 80040c8:	42ab      	cmp	r3, r5
 80040ca:	9a05      	ldr	r2, [sp, #20]
 80040cc:	bfa8      	it	ge
 80040ce:	462b      	movge	r3, r5
 80040d0:	1ad2      	subs	r2, r2, r3
 80040d2:	9205      	str	r2, [sp, #20]
 80040d4:	9a06      	ldr	r2, [sp, #24]
 80040d6:	1aed      	subs	r5, r5, r3
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	9306      	str	r3, [sp, #24]
 80040dc:	9b08      	ldr	r3, [sp, #32]
 80040de:	b1f3      	cbz	r3, 800411e <_dtoa_r+0x7b6>
 80040e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 80a3 	beq.w	800422e <_dtoa_r+0x8c6>
 80040e8:	2e00      	cmp	r6, #0
 80040ea:	dd10      	ble.n	800410e <_dtoa_r+0x7a6>
 80040ec:	4639      	mov	r1, r7
 80040ee:	4632      	mov	r2, r6
 80040f0:	4620      	mov	r0, r4
 80040f2:	f000 fce1 	bl	8004ab8 <__pow5mult>
 80040f6:	4652      	mov	r2, sl
 80040f8:	4601      	mov	r1, r0
 80040fa:	4607      	mov	r7, r0
 80040fc:	4620      	mov	r0, r4
 80040fe:	f000 fc31 	bl	8004964 <__multiply>
 8004102:	4651      	mov	r1, sl
 8004104:	4680      	mov	r8, r0
 8004106:	4620      	mov	r0, r4
 8004108:	f000 fb60 	bl	80047cc <_Bfree>
 800410c:	46c2      	mov	sl, r8
 800410e:	9b08      	ldr	r3, [sp, #32]
 8004110:	1b9a      	subs	r2, r3, r6
 8004112:	d004      	beq.n	800411e <_dtoa_r+0x7b6>
 8004114:	4651      	mov	r1, sl
 8004116:	4620      	mov	r0, r4
 8004118:	f000 fcce 	bl	8004ab8 <__pow5mult>
 800411c:	4682      	mov	sl, r0
 800411e:	2101      	movs	r1, #1
 8004120:	4620      	mov	r0, r4
 8004122:	f000 fc09 	bl	8004938 <__i2b>
 8004126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004128:	2b00      	cmp	r3, #0
 800412a:	4606      	mov	r6, r0
 800412c:	f340 8081 	ble.w	8004232 <_dtoa_r+0x8ca>
 8004130:	461a      	mov	r2, r3
 8004132:	4601      	mov	r1, r0
 8004134:	4620      	mov	r0, r4
 8004136:	f000 fcbf 	bl	8004ab8 <__pow5mult>
 800413a:	9b07      	ldr	r3, [sp, #28]
 800413c:	2b01      	cmp	r3, #1
 800413e:	4606      	mov	r6, r0
 8004140:	dd7a      	ble.n	8004238 <_dtoa_r+0x8d0>
 8004142:	f04f 0800 	mov.w	r8, #0
 8004146:	6933      	ldr	r3, [r6, #16]
 8004148:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800414c:	6918      	ldr	r0, [r3, #16]
 800414e:	f000 fba5 	bl	800489c <__hi0bits>
 8004152:	f1c0 0020 	rsb	r0, r0, #32
 8004156:	9b06      	ldr	r3, [sp, #24]
 8004158:	4418      	add	r0, r3
 800415a:	f010 001f 	ands.w	r0, r0, #31
 800415e:	f000 8094 	beq.w	800428a <_dtoa_r+0x922>
 8004162:	f1c0 0320 	rsb	r3, r0, #32
 8004166:	2b04      	cmp	r3, #4
 8004168:	f340 8085 	ble.w	8004276 <_dtoa_r+0x90e>
 800416c:	9b05      	ldr	r3, [sp, #20]
 800416e:	f1c0 001c 	rsb	r0, r0, #28
 8004172:	4403      	add	r3, r0
 8004174:	9305      	str	r3, [sp, #20]
 8004176:	9b06      	ldr	r3, [sp, #24]
 8004178:	4403      	add	r3, r0
 800417a:	4405      	add	r5, r0
 800417c:	9306      	str	r3, [sp, #24]
 800417e:	9b05      	ldr	r3, [sp, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	dd05      	ble.n	8004190 <_dtoa_r+0x828>
 8004184:	4651      	mov	r1, sl
 8004186:	461a      	mov	r2, r3
 8004188:	4620      	mov	r0, r4
 800418a:	f000 fcef 	bl	8004b6c <__lshift>
 800418e:	4682      	mov	sl, r0
 8004190:	9b06      	ldr	r3, [sp, #24]
 8004192:	2b00      	cmp	r3, #0
 8004194:	dd05      	ble.n	80041a2 <_dtoa_r+0x83a>
 8004196:	4631      	mov	r1, r6
 8004198:	461a      	mov	r2, r3
 800419a:	4620      	mov	r0, r4
 800419c:	f000 fce6 	bl	8004b6c <__lshift>
 80041a0:	4606      	mov	r6, r0
 80041a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d072      	beq.n	800428e <_dtoa_r+0x926>
 80041a8:	4631      	mov	r1, r6
 80041aa:	4650      	mov	r0, sl
 80041ac:	f000 fd4a 	bl	8004c44 <__mcmp>
 80041b0:	2800      	cmp	r0, #0
 80041b2:	da6c      	bge.n	800428e <_dtoa_r+0x926>
 80041b4:	2300      	movs	r3, #0
 80041b6:	4651      	mov	r1, sl
 80041b8:	220a      	movs	r2, #10
 80041ba:	4620      	mov	r0, r4
 80041bc:	f000 fb28 	bl	8004810 <__multadd>
 80041c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041c2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80041c6:	4682      	mov	sl, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 81b0 	beq.w	800452e <_dtoa_r+0xbc6>
 80041ce:	2300      	movs	r3, #0
 80041d0:	4639      	mov	r1, r7
 80041d2:	220a      	movs	r2, #10
 80041d4:	4620      	mov	r0, r4
 80041d6:	f000 fb1b 	bl	8004810 <__multadd>
 80041da:	9b01      	ldr	r3, [sp, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	4607      	mov	r7, r0
 80041e0:	f300 8096 	bgt.w	8004310 <_dtoa_r+0x9a8>
 80041e4:	9b07      	ldr	r3, [sp, #28]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	dc59      	bgt.n	800429e <_dtoa_r+0x936>
 80041ea:	e091      	b.n	8004310 <_dtoa_r+0x9a8>
 80041ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80041ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80041f2:	e758      	b.n	80040a6 <_dtoa_r+0x73e>
 80041f4:	9b04      	ldr	r3, [sp, #16]
 80041f6:	1e5e      	subs	r6, r3, #1
 80041f8:	9b08      	ldr	r3, [sp, #32]
 80041fa:	42b3      	cmp	r3, r6
 80041fc:	bfbf      	itttt	lt
 80041fe:	9b08      	ldrlt	r3, [sp, #32]
 8004200:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8004202:	9608      	strlt	r6, [sp, #32]
 8004204:	1af3      	sublt	r3, r6, r3
 8004206:	bfb4      	ite	lt
 8004208:	18d2      	addlt	r2, r2, r3
 800420a:	1b9e      	subge	r6, r3, r6
 800420c:	9b04      	ldr	r3, [sp, #16]
 800420e:	bfbc      	itt	lt
 8004210:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8004212:	2600      	movlt	r6, #0
 8004214:	2b00      	cmp	r3, #0
 8004216:	bfb7      	itett	lt
 8004218:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800421c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004220:	1a9d      	sublt	r5, r3, r2
 8004222:	2300      	movlt	r3, #0
 8004224:	e741      	b.n	80040aa <_dtoa_r+0x742>
 8004226:	9e08      	ldr	r6, [sp, #32]
 8004228:	9d05      	ldr	r5, [sp, #20]
 800422a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800422c:	e748      	b.n	80040c0 <_dtoa_r+0x758>
 800422e:	9a08      	ldr	r2, [sp, #32]
 8004230:	e770      	b.n	8004114 <_dtoa_r+0x7ac>
 8004232:	9b07      	ldr	r3, [sp, #28]
 8004234:	2b01      	cmp	r3, #1
 8004236:	dc19      	bgt.n	800426c <_dtoa_r+0x904>
 8004238:	9b02      	ldr	r3, [sp, #8]
 800423a:	b9bb      	cbnz	r3, 800426c <_dtoa_r+0x904>
 800423c:	9b03      	ldr	r3, [sp, #12]
 800423e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004242:	b99b      	cbnz	r3, 800426c <_dtoa_r+0x904>
 8004244:	9b03      	ldr	r3, [sp, #12]
 8004246:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800424a:	0d1b      	lsrs	r3, r3, #20
 800424c:	051b      	lsls	r3, r3, #20
 800424e:	b183      	cbz	r3, 8004272 <_dtoa_r+0x90a>
 8004250:	9b05      	ldr	r3, [sp, #20]
 8004252:	3301      	adds	r3, #1
 8004254:	9305      	str	r3, [sp, #20]
 8004256:	9b06      	ldr	r3, [sp, #24]
 8004258:	3301      	adds	r3, #1
 800425a:	9306      	str	r3, [sp, #24]
 800425c:	f04f 0801 	mov.w	r8, #1
 8004260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004262:	2b00      	cmp	r3, #0
 8004264:	f47f af6f 	bne.w	8004146 <_dtoa_r+0x7de>
 8004268:	2001      	movs	r0, #1
 800426a:	e774      	b.n	8004156 <_dtoa_r+0x7ee>
 800426c:	f04f 0800 	mov.w	r8, #0
 8004270:	e7f6      	b.n	8004260 <_dtoa_r+0x8f8>
 8004272:	4698      	mov	r8, r3
 8004274:	e7f4      	b.n	8004260 <_dtoa_r+0x8f8>
 8004276:	d082      	beq.n	800417e <_dtoa_r+0x816>
 8004278:	9a05      	ldr	r2, [sp, #20]
 800427a:	331c      	adds	r3, #28
 800427c:	441a      	add	r2, r3
 800427e:	9205      	str	r2, [sp, #20]
 8004280:	9a06      	ldr	r2, [sp, #24]
 8004282:	441a      	add	r2, r3
 8004284:	441d      	add	r5, r3
 8004286:	9206      	str	r2, [sp, #24]
 8004288:	e779      	b.n	800417e <_dtoa_r+0x816>
 800428a:	4603      	mov	r3, r0
 800428c:	e7f4      	b.n	8004278 <_dtoa_r+0x910>
 800428e:	9b04      	ldr	r3, [sp, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	dc37      	bgt.n	8004304 <_dtoa_r+0x99c>
 8004294:	9b07      	ldr	r3, [sp, #28]
 8004296:	2b02      	cmp	r3, #2
 8004298:	dd34      	ble.n	8004304 <_dtoa_r+0x99c>
 800429a:	9b04      	ldr	r3, [sp, #16]
 800429c:	9301      	str	r3, [sp, #4]
 800429e:	9b01      	ldr	r3, [sp, #4]
 80042a0:	b963      	cbnz	r3, 80042bc <_dtoa_r+0x954>
 80042a2:	4631      	mov	r1, r6
 80042a4:	2205      	movs	r2, #5
 80042a6:	4620      	mov	r0, r4
 80042a8:	f000 fab2 	bl	8004810 <__multadd>
 80042ac:	4601      	mov	r1, r0
 80042ae:	4606      	mov	r6, r0
 80042b0:	4650      	mov	r0, sl
 80042b2:	f000 fcc7 	bl	8004c44 <__mcmp>
 80042b6:	2800      	cmp	r0, #0
 80042b8:	f73f adbb 	bgt.w	8003e32 <_dtoa_r+0x4ca>
 80042bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042be:	9d00      	ldr	r5, [sp, #0]
 80042c0:	ea6f 0b03 	mvn.w	fp, r3
 80042c4:	f04f 0800 	mov.w	r8, #0
 80042c8:	4631      	mov	r1, r6
 80042ca:	4620      	mov	r0, r4
 80042cc:	f000 fa7e 	bl	80047cc <_Bfree>
 80042d0:	2f00      	cmp	r7, #0
 80042d2:	f43f aeab 	beq.w	800402c <_dtoa_r+0x6c4>
 80042d6:	f1b8 0f00 	cmp.w	r8, #0
 80042da:	d005      	beq.n	80042e8 <_dtoa_r+0x980>
 80042dc:	45b8      	cmp	r8, r7
 80042de:	d003      	beq.n	80042e8 <_dtoa_r+0x980>
 80042e0:	4641      	mov	r1, r8
 80042e2:	4620      	mov	r0, r4
 80042e4:	f000 fa72 	bl	80047cc <_Bfree>
 80042e8:	4639      	mov	r1, r7
 80042ea:	4620      	mov	r0, r4
 80042ec:	f000 fa6e 	bl	80047cc <_Bfree>
 80042f0:	e69c      	b.n	800402c <_dtoa_r+0x6c4>
 80042f2:	2600      	movs	r6, #0
 80042f4:	4637      	mov	r7, r6
 80042f6:	e7e1      	b.n	80042bc <_dtoa_r+0x954>
 80042f8:	46bb      	mov	fp, r7
 80042fa:	4637      	mov	r7, r6
 80042fc:	e599      	b.n	8003e32 <_dtoa_r+0x4ca>
 80042fe:	bf00      	nop
 8004300:	40240000 	.word	0x40240000
 8004304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 80c8 	beq.w	800449c <_dtoa_r+0xb34>
 800430c:	9b04      	ldr	r3, [sp, #16]
 800430e:	9301      	str	r3, [sp, #4]
 8004310:	2d00      	cmp	r5, #0
 8004312:	dd05      	ble.n	8004320 <_dtoa_r+0x9b8>
 8004314:	4639      	mov	r1, r7
 8004316:	462a      	mov	r2, r5
 8004318:	4620      	mov	r0, r4
 800431a:	f000 fc27 	bl	8004b6c <__lshift>
 800431e:	4607      	mov	r7, r0
 8004320:	f1b8 0f00 	cmp.w	r8, #0
 8004324:	d05b      	beq.n	80043de <_dtoa_r+0xa76>
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	4620      	mov	r0, r4
 800432a:	f000 fa0f 	bl	800474c <_Balloc>
 800432e:	4605      	mov	r5, r0
 8004330:	b928      	cbnz	r0, 800433e <_dtoa_r+0x9d6>
 8004332:	4b83      	ldr	r3, [pc, #524]	; (8004540 <_dtoa_r+0xbd8>)
 8004334:	4602      	mov	r2, r0
 8004336:	f240 21ef 	movw	r1, #751	; 0x2ef
 800433a:	f7ff bb2e 	b.w	800399a <_dtoa_r+0x32>
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	3202      	adds	r2, #2
 8004342:	0092      	lsls	r2, r2, #2
 8004344:	f107 010c 	add.w	r1, r7, #12
 8004348:	300c      	adds	r0, #12
 800434a:	f7ff fa59 	bl	8003800 <memcpy>
 800434e:	2201      	movs	r2, #1
 8004350:	4629      	mov	r1, r5
 8004352:	4620      	mov	r0, r4
 8004354:	f000 fc0a 	bl	8004b6c <__lshift>
 8004358:	9b00      	ldr	r3, [sp, #0]
 800435a:	3301      	adds	r3, #1
 800435c:	9304      	str	r3, [sp, #16]
 800435e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004362:	4413      	add	r3, r2
 8004364:	9308      	str	r3, [sp, #32]
 8004366:	9b02      	ldr	r3, [sp, #8]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	46b8      	mov	r8, r7
 800436e:	9306      	str	r3, [sp, #24]
 8004370:	4607      	mov	r7, r0
 8004372:	9b04      	ldr	r3, [sp, #16]
 8004374:	4631      	mov	r1, r6
 8004376:	3b01      	subs	r3, #1
 8004378:	4650      	mov	r0, sl
 800437a:	9301      	str	r3, [sp, #4]
 800437c:	f7ff fa6c 	bl	8003858 <quorem>
 8004380:	4641      	mov	r1, r8
 8004382:	9002      	str	r0, [sp, #8]
 8004384:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004388:	4650      	mov	r0, sl
 800438a:	f000 fc5b 	bl	8004c44 <__mcmp>
 800438e:	463a      	mov	r2, r7
 8004390:	9005      	str	r0, [sp, #20]
 8004392:	4631      	mov	r1, r6
 8004394:	4620      	mov	r0, r4
 8004396:	f000 fc71 	bl	8004c7c <__mdiff>
 800439a:	68c2      	ldr	r2, [r0, #12]
 800439c:	4605      	mov	r5, r0
 800439e:	bb02      	cbnz	r2, 80043e2 <_dtoa_r+0xa7a>
 80043a0:	4601      	mov	r1, r0
 80043a2:	4650      	mov	r0, sl
 80043a4:	f000 fc4e 	bl	8004c44 <__mcmp>
 80043a8:	4602      	mov	r2, r0
 80043aa:	4629      	mov	r1, r5
 80043ac:	4620      	mov	r0, r4
 80043ae:	9209      	str	r2, [sp, #36]	; 0x24
 80043b0:	f000 fa0c 	bl	80047cc <_Bfree>
 80043b4:	9b07      	ldr	r3, [sp, #28]
 80043b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043b8:	9d04      	ldr	r5, [sp, #16]
 80043ba:	ea43 0102 	orr.w	r1, r3, r2
 80043be:	9b06      	ldr	r3, [sp, #24]
 80043c0:	4319      	orrs	r1, r3
 80043c2:	d110      	bne.n	80043e6 <_dtoa_r+0xa7e>
 80043c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80043c8:	d029      	beq.n	800441e <_dtoa_r+0xab6>
 80043ca:	9b05      	ldr	r3, [sp, #20]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	dd02      	ble.n	80043d6 <_dtoa_r+0xa6e>
 80043d0:	9b02      	ldr	r3, [sp, #8]
 80043d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80043d6:	9b01      	ldr	r3, [sp, #4]
 80043d8:	f883 9000 	strb.w	r9, [r3]
 80043dc:	e774      	b.n	80042c8 <_dtoa_r+0x960>
 80043de:	4638      	mov	r0, r7
 80043e0:	e7ba      	b.n	8004358 <_dtoa_r+0x9f0>
 80043e2:	2201      	movs	r2, #1
 80043e4:	e7e1      	b.n	80043aa <_dtoa_r+0xa42>
 80043e6:	9b05      	ldr	r3, [sp, #20]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	db04      	blt.n	80043f6 <_dtoa_r+0xa8e>
 80043ec:	9907      	ldr	r1, [sp, #28]
 80043ee:	430b      	orrs	r3, r1
 80043f0:	9906      	ldr	r1, [sp, #24]
 80043f2:	430b      	orrs	r3, r1
 80043f4:	d120      	bne.n	8004438 <_dtoa_r+0xad0>
 80043f6:	2a00      	cmp	r2, #0
 80043f8:	dded      	ble.n	80043d6 <_dtoa_r+0xa6e>
 80043fa:	4651      	mov	r1, sl
 80043fc:	2201      	movs	r2, #1
 80043fe:	4620      	mov	r0, r4
 8004400:	f000 fbb4 	bl	8004b6c <__lshift>
 8004404:	4631      	mov	r1, r6
 8004406:	4682      	mov	sl, r0
 8004408:	f000 fc1c 	bl	8004c44 <__mcmp>
 800440c:	2800      	cmp	r0, #0
 800440e:	dc03      	bgt.n	8004418 <_dtoa_r+0xab0>
 8004410:	d1e1      	bne.n	80043d6 <_dtoa_r+0xa6e>
 8004412:	f019 0f01 	tst.w	r9, #1
 8004416:	d0de      	beq.n	80043d6 <_dtoa_r+0xa6e>
 8004418:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800441c:	d1d8      	bne.n	80043d0 <_dtoa_r+0xa68>
 800441e:	9a01      	ldr	r2, [sp, #4]
 8004420:	2339      	movs	r3, #57	; 0x39
 8004422:	7013      	strb	r3, [r2, #0]
 8004424:	462b      	mov	r3, r5
 8004426:	461d      	mov	r5, r3
 8004428:	3b01      	subs	r3, #1
 800442a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800442e:	2a39      	cmp	r2, #57	; 0x39
 8004430:	d06c      	beq.n	800450c <_dtoa_r+0xba4>
 8004432:	3201      	adds	r2, #1
 8004434:	701a      	strb	r2, [r3, #0]
 8004436:	e747      	b.n	80042c8 <_dtoa_r+0x960>
 8004438:	2a00      	cmp	r2, #0
 800443a:	dd07      	ble.n	800444c <_dtoa_r+0xae4>
 800443c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004440:	d0ed      	beq.n	800441e <_dtoa_r+0xab6>
 8004442:	9a01      	ldr	r2, [sp, #4]
 8004444:	f109 0301 	add.w	r3, r9, #1
 8004448:	7013      	strb	r3, [r2, #0]
 800444a:	e73d      	b.n	80042c8 <_dtoa_r+0x960>
 800444c:	9b04      	ldr	r3, [sp, #16]
 800444e:	9a08      	ldr	r2, [sp, #32]
 8004450:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004454:	4293      	cmp	r3, r2
 8004456:	d043      	beq.n	80044e0 <_dtoa_r+0xb78>
 8004458:	4651      	mov	r1, sl
 800445a:	2300      	movs	r3, #0
 800445c:	220a      	movs	r2, #10
 800445e:	4620      	mov	r0, r4
 8004460:	f000 f9d6 	bl	8004810 <__multadd>
 8004464:	45b8      	cmp	r8, r7
 8004466:	4682      	mov	sl, r0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	f04f 020a 	mov.w	r2, #10
 8004470:	4641      	mov	r1, r8
 8004472:	4620      	mov	r0, r4
 8004474:	d107      	bne.n	8004486 <_dtoa_r+0xb1e>
 8004476:	f000 f9cb 	bl	8004810 <__multadd>
 800447a:	4680      	mov	r8, r0
 800447c:	4607      	mov	r7, r0
 800447e:	9b04      	ldr	r3, [sp, #16]
 8004480:	3301      	adds	r3, #1
 8004482:	9304      	str	r3, [sp, #16]
 8004484:	e775      	b.n	8004372 <_dtoa_r+0xa0a>
 8004486:	f000 f9c3 	bl	8004810 <__multadd>
 800448a:	4639      	mov	r1, r7
 800448c:	4680      	mov	r8, r0
 800448e:	2300      	movs	r3, #0
 8004490:	220a      	movs	r2, #10
 8004492:	4620      	mov	r0, r4
 8004494:	f000 f9bc 	bl	8004810 <__multadd>
 8004498:	4607      	mov	r7, r0
 800449a:	e7f0      	b.n	800447e <_dtoa_r+0xb16>
 800449c:	9b04      	ldr	r3, [sp, #16]
 800449e:	9301      	str	r3, [sp, #4]
 80044a0:	9d00      	ldr	r5, [sp, #0]
 80044a2:	4631      	mov	r1, r6
 80044a4:	4650      	mov	r0, sl
 80044a6:	f7ff f9d7 	bl	8003858 <quorem>
 80044aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80044ae:	9b00      	ldr	r3, [sp, #0]
 80044b0:	f805 9b01 	strb.w	r9, [r5], #1
 80044b4:	1aea      	subs	r2, r5, r3
 80044b6:	9b01      	ldr	r3, [sp, #4]
 80044b8:	4293      	cmp	r3, r2
 80044ba:	dd07      	ble.n	80044cc <_dtoa_r+0xb64>
 80044bc:	4651      	mov	r1, sl
 80044be:	2300      	movs	r3, #0
 80044c0:	220a      	movs	r2, #10
 80044c2:	4620      	mov	r0, r4
 80044c4:	f000 f9a4 	bl	8004810 <__multadd>
 80044c8:	4682      	mov	sl, r0
 80044ca:	e7ea      	b.n	80044a2 <_dtoa_r+0xb3a>
 80044cc:	9b01      	ldr	r3, [sp, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	bfc8      	it	gt
 80044d2:	461d      	movgt	r5, r3
 80044d4:	9b00      	ldr	r3, [sp, #0]
 80044d6:	bfd8      	it	le
 80044d8:	2501      	movle	r5, #1
 80044da:	441d      	add	r5, r3
 80044dc:	f04f 0800 	mov.w	r8, #0
 80044e0:	4651      	mov	r1, sl
 80044e2:	2201      	movs	r2, #1
 80044e4:	4620      	mov	r0, r4
 80044e6:	f000 fb41 	bl	8004b6c <__lshift>
 80044ea:	4631      	mov	r1, r6
 80044ec:	4682      	mov	sl, r0
 80044ee:	f000 fba9 	bl	8004c44 <__mcmp>
 80044f2:	2800      	cmp	r0, #0
 80044f4:	dc96      	bgt.n	8004424 <_dtoa_r+0xabc>
 80044f6:	d102      	bne.n	80044fe <_dtoa_r+0xb96>
 80044f8:	f019 0f01 	tst.w	r9, #1
 80044fc:	d192      	bne.n	8004424 <_dtoa_r+0xabc>
 80044fe:	462b      	mov	r3, r5
 8004500:	461d      	mov	r5, r3
 8004502:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004506:	2a30      	cmp	r2, #48	; 0x30
 8004508:	d0fa      	beq.n	8004500 <_dtoa_r+0xb98>
 800450a:	e6dd      	b.n	80042c8 <_dtoa_r+0x960>
 800450c:	9a00      	ldr	r2, [sp, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d189      	bne.n	8004426 <_dtoa_r+0xabe>
 8004512:	f10b 0b01 	add.w	fp, fp, #1
 8004516:	2331      	movs	r3, #49	; 0x31
 8004518:	e796      	b.n	8004448 <_dtoa_r+0xae0>
 800451a:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <_dtoa_r+0xbdc>)
 800451c:	f7ff ba99 	b.w	8003a52 <_dtoa_r+0xea>
 8004520:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004522:	2b00      	cmp	r3, #0
 8004524:	f47f aa6d 	bne.w	8003a02 <_dtoa_r+0x9a>
 8004528:	4b07      	ldr	r3, [pc, #28]	; (8004548 <_dtoa_r+0xbe0>)
 800452a:	f7ff ba92 	b.w	8003a52 <_dtoa_r+0xea>
 800452e:	9b01      	ldr	r3, [sp, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	dcb5      	bgt.n	80044a0 <_dtoa_r+0xb38>
 8004534:	9b07      	ldr	r3, [sp, #28]
 8004536:	2b02      	cmp	r3, #2
 8004538:	f73f aeb1 	bgt.w	800429e <_dtoa_r+0x936>
 800453c:	e7b0      	b.n	80044a0 <_dtoa_r+0xb38>
 800453e:	bf00      	nop
 8004540:	080055e0 	.word	0x080055e0
 8004544:	08005504 	.word	0x08005504
 8004548:	08005564 	.word	0x08005564

0800454c <_free_r>:
 800454c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800454e:	2900      	cmp	r1, #0
 8004550:	d044      	beq.n	80045dc <_free_r+0x90>
 8004552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004556:	9001      	str	r0, [sp, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	f1a1 0404 	sub.w	r4, r1, #4
 800455e:	bfb8      	it	lt
 8004560:	18e4      	addlt	r4, r4, r3
 8004562:	f000 f8e7 	bl	8004734 <__malloc_lock>
 8004566:	4a1e      	ldr	r2, [pc, #120]	; (80045e0 <_free_r+0x94>)
 8004568:	9801      	ldr	r0, [sp, #4]
 800456a:	6813      	ldr	r3, [r2, #0]
 800456c:	b933      	cbnz	r3, 800457c <_free_r+0x30>
 800456e:	6063      	str	r3, [r4, #4]
 8004570:	6014      	str	r4, [r2, #0]
 8004572:	b003      	add	sp, #12
 8004574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004578:	f000 b8e2 	b.w	8004740 <__malloc_unlock>
 800457c:	42a3      	cmp	r3, r4
 800457e:	d908      	bls.n	8004592 <_free_r+0x46>
 8004580:	6825      	ldr	r5, [r4, #0]
 8004582:	1961      	adds	r1, r4, r5
 8004584:	428b      	cmp	r3, r1
 8004586:	bf01      	itttt	eq
 8004588:	6819      	ldreq	r1, [r3, #0]
 800458a:	685b      	ldreq	r3, [r3, #4]
 800458c:	1949      	addeq	r1, r1, r5
 800458e:	6021      	streq	r1, [r4, #0]
 8004590:	e7ed      	b.n	800456e <_free_r+0x22>
 8004592:	461a      	mov	r2, r3
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	b10b      	cbz	r3, 800459c <_free_r+0x50>
 8004598:	42a3      	cmp	r3, r4
 800459a:	d9fa      	bls.n	8004592 <_free_r+0x46>
 800459c:	6811      	ldr	r1, [r2, #0]
 800459e:	1855      	adds	r5, r2, r1
 80045a0:	42a5      	cmp	r5, r4
 80045a2:	d10b      	bne.n	80045bc <_free_r+0x70>
 80045a4:	6824      	ldr	r4, [r4, #0]
 80045a6:	4421      	add	r1, r4
 80045a8:	1854      	adds	r4, r2, r1
 80045aa:	42a3      	cmp	r3, r4
 80045ac:	6011      	str	r1, [r2, #0]
 80045ae:	d1e0      	bne.n	8004572 <_free_r+0x26>
 80045b0:	681c      	ldr	r4, [r3, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	6053      	str	r3, [r2, #4]
 80045b6:	440c      	add	r4, r1
 80045b8:	6014      	str	r4, [r2, #0]
 80045ba:	e7da      	b.n	8004572 <_free_r+0x26>
 80045bc:	d902      	bls.n	80045c4 <_free_r+0x78>
 80045be:	230c      	movs	r3, #12
 80045c0:	6003      	str	r3, [r0, #0]
 80045c2:	e7d6      	b.n	8004572 <_free_r+0x26>
 80045c4:	6825      	ldr	r5, [r4, #0]
 80045c6:	1961      	adds	r1, r4, r5
 80045c8:	428b      	cmp	r3, r1
 80045ca:	bf04      	itt	eq
 80045cc:	6819      	ldreq	r1, [r3, #0]
 80045ce:	685b      	ldreq	r3, [r3, #4]
 80045d0:	6063      	str	r3, [r4, #4]
 80045d2:	bf04      	itt	eq
 80045d4:	1949      	addeq	r1, r1, r5
 80045d6:	6021      	streq	r1, [r4, #0]
 80045d8:	6054      	str	r4, [r2, #4]
 80045da:	e7ca      	b.n	8004572 <_free_r+0x26>
 80045dc:	b003      	add	sp, #12
 80045de:	bd30      	pop	{r4, r5, pc}
 80045e0:	2000045c 	.word	0x2000045c

080045e4 <malloc>:
 80045e4:	4b02      	ldr	r3, [pc, #8]	; (80045f0 <malloc+0xc>)
 80045e6:	4601      	mov	r1, r0
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	f000 b823 	b.w	8004634 <_malloc_r>
 80045ee:	bf00      	nop
 80045f0:	20000064 	.word	0x20000064

080045f4 <sbrk_aligned>:
 80045f4:	b570      	push	{r4, r5, r6, lr}
 80045f6:	4e0e      	ldr	r6, [pc, #56]	; (8004630 <sbrk_aligned+0x3c>)
 80045f8:	460c      	mov	r4, r1
 80045fa:	6831      	ldr	r1, [r6, #0]
 80045fc:	4605      	mov	r5, r0
 80045fe:	b911      	cbnz	r1, 8004606 <sbrk_aligned+0x12>
 8004600:	f000 fea8 	bl	8005354 <_sbrk_r>
 8004604:	6030      	str	r0, [r6, #0]
 8004606:	4621      	mov	r1, r4
 8004608:	4628      	mov	r0, r5
 800460a:	f000 fea3 	bl	8005354 <_sbrk_r>
 800460e:	1c43      	adds	r3, r0, #1
 8004610:	d00a      	beq.n	8004628 <sbrk_aligned+0x34>
 8004612:	1cc4      	adds	r4, r0, #3
 8004614:	f024 0403 	bic.w	r4, r4, #3
 8004618:	42a0      	cmp	r0, r4
 800461a:	d007      	beq.n	800462c <sbrk_aligned+0x38>
 800461c:	1a21      	subs	r1, r4, r0
 800461e:	4628      	mov	r0, r5
 8004620:	f000 fe98 	bl	8005354 <_sbrk_r>
 8004624:	3001      	adds	r0, #1
 8004626:	d101      	bne.n	800462c <sbrk_aligned+0x38>
 8004628:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800462c:	4620      	mov	r0, r4
 800462e:	bd70      	pop	{r4, r5, r6, pc}
 8004630:	20000460 	.word	0x20000460

08004634 <_malloc_r>:
 8004634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004638:	1ccd      	adds	r5, r1, #3
 800463a:	f025 0503 	bic.w	r5, r5, #3
 800463e:	3508      	adds	r5, #8
 8004640:	2d0c      	cmp	r5, #12
 8004642:	bf38      	it	cc
 8004644:	250c      	movcc	r5, #12
 8004646:	2d00      	cmp	r5, #0
 8004648:	4607      	mov	r7, r0
 800464a:	db01      	blt.n	8004650 <_malloc_r+0x1c>
 800464c:	42a9      	cmp	r1, r5
 800464e:	d905      	bls.n	800465c <_malloc_r+0x28>
 8004650:	230c      	movs	r3, #12
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	2600      	movs	r6, #0
 8004656:	4630      	mov	r0, r6
 8004658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800465c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004730 <_malloc_r+0xfc>
 8004660:	f000 f868 	bl	8004734 <__malloc_lock>
 8004664:	f8d8 3000 	ldr.w	r3, [r8]
 8004668:	461c      	mov	r4, r3
 800466a:	bb5c      	cbnz	r4, 80046c4 <_malloc_r+0x90>
 800466c:	4629      	mov	r1, r5
 800466e:	4638      	mov	r0, r7
 8004670:	f7ff ffc0 	bl	80045f4 <sbrk_aligned>
 8004674:	1c43      	adds	r3, r0, #1
 8004676:	4604      	mov	r4, r0
 8004678:	d155      	bne.n	8004726 <_malloc_r+0xf2>
 800467a:	f8d8 4000 	ldr.w	r4, [r8]
 800467e:	4626      	mov	r6, r4
 8004680:	2e00      	cmp	r6, #0
 8004682:	d145      	bne.n	8004710 <_malloc_r+0xdc>
 8004684:	2c00      	cmp	r4, #0
 8004686:	d048      	beq.n	800471a <_malloc_r+0xe6>
 8004688:	6823      	ldr	r3, [r4, #0]
 800468a:	4631      	mov	r1, r6
 800468c:	4638      	mov	r0, r7
 800468e:	eb04 0903 	add.w	r9, r4, r3
 8004692:	f000 fe5f 	bl	8005354 <_sbrk_r>
 8004696:	4581      	cmp	r9, r0
 8004698:	d13f      	bne.n	800471a <_malloc_r+0xe6>
 800469a:	6821      	ldr	r1, [r4, #0]
 800469c:	1a6d      	subs	r5, r5, r1
 800469e:	4629      	mov	r1, r5
 80046a0:	4638      	mov	r0, r7
 80046a2:	f7ff ffa7 	bl	80045f4 <sbrk_aligned>
 80046a6:	3001      	adds	r0, #1
 80046a8:	d037      	beq.n	800471a <_malloc_r+0xe6>
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	442b      	add	r3, r5
 80046ae:	6023      	str	r3, [r4, #0]
 80046b0:	f8d8 3000 	ldr.w	r3, [r8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d038      	beq.n	800472a <_malloc_r+0xf6>
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	42a2      	cmp	r2, r4
 80046bc:	d12b      	bne.n	8004716 <_malloc_r+0xe2>
 80046be:	2200      	movs	r2, #0
 80046c0:	605a      	str	r2, [r3, #4]
 80046c2:	e00f      	b.n	80046e4 <_malloc_r+0xb0>
 80046c4:	6822      	ldr	r2, [r4, #0]
 80046c6:	1b52      	subs	r2, r2, r5
 80046c8:	d41f      	bmi.n	800470a <_malloc_r+0xd6>
 80046ca:	2a0b      	cmp	r2, #11
 80046cc:	d917      	bls.n	80046fe <_malloc_r+0xca>
 80046ce:	1961      	adds	r1, r4, r5
 80046d0:	42a3      	cmp	r3, r4
 80046d2:	6025      	str	r5, [r4, #0]
 80046d4:	bf18      	it	ne
 80046d6:	6059      	strne	r1, [r3, #4]
 80046d8:	6863      	ldr	r3, [r4, #4]
 80046da:	bf08      	it	eq
 80046dc:	f8c8 1000 	streq.w	r1, [r8]
 80046e0:	5162      	str	r2, [r4, r5]
 80046e2:	604b      	str	r3, [r1, #4]
 80046e4:	4638      	mov	r0, r7
 80046e6:	f104 060b 	add.w	r6, r4, #11
 80046ea:	f000 f829 	bl	8004740 <__malloc_unlock>
 80046ee:	f026 0607 	bic.w	r6, r6, #7
 80046f2:	1d23      	adds	r3, r4, #4
 80046f4:	1af2      	subs	r2, r6, r3
 80046f6:	d0ae      	beq.n	8004656 <_malloc_r+0x22>
 80046f8:	1b9b      	subs	r3, r3, r6
 80046fa:	50a3      	str	r3, [r4, r2]
 80046fc:	e7ab      	b.n	8004656 <_malloc_r+0x22>
 80046fe:	42a3      	cmp	r3, r4
 8004700:	6862      	ldr	r2, [r4, #4]
 8004702:	d1dd      	bne.n	80046c0 <_malloc_r+0x8c>
 8004704:	f8c8 2000 	str.w	r2, [r8]
 8004708:	e7ec      	b.n	80046e4 <_malloc_r+0xb0>
 800470a:	4623      	mov	r3, r4
 800470c:	6864      	ldr	r4, [r4, #4]
 800470e:	e7ac      	b.n	800466a <_malloc_r+0x36>
 8004710:	4634      	mov	r4, r6
 8004712:	6876      	ldr	r6, [r6, #4]
 8004714:	e7b4      	b.n	8004680 <_malloc_r+0x4c>
 8004716:	4613      	mov	r3, r2
 8004718:	e7cc      	b.n	80046b4 <_malloc_r+0x80>
 800471a:	230c      	movs	r3, #12
 800471c:	603b      	str	r3, [r7, #0]
 800471e:	4638      	mov	r0, r7
 8004720:	f000 f80e 	bl	8004740 <__malloc_unlock>
 8004724:	e797      	b.n	8004656 <_malloc_r+0x22>
 8004726:	6025      	str	r5, [r4, #0]
 8004728:	e7dc      	b.n	80046e4 <_malloc_r+0xb0>
 800472a:	605b      	str	r3, [r3, #4]
 800472c:	deff      	udf	#255	; 0xff
 800472e:	bf00      	nop
 8004730:	2000045c 	.word	0x2000045c

08004734 <__malloc_lock>:
 8004734:	4801      	ldr	r0, [pc, #4]	; (800473c <__malloc_lock+0x8>)
 8004736:	f7ff b861 	b.w	80037fc <__retarget_lock_acquire_recursive>
 800473a:	bf00      	nop
 800473c:	20000458 	.word	0x20000458

08004740 <__malloc_unlock>:
 8004740:	4801      	ldr	r0, [pc, #4]	; (8004748 <__malloc_unlock+0x8>)
 8004742:	f7ff b85c 	b.w	80037fe <__retarget_lock_release_recursive>
 8004746:	bf00      	nop
 8004748:	20000458 	.word	0x20000458

0800474c <_Balloc>:
 800474c:	b570      	push	{r4, r5, r6, lr}
 800474e:	69c6      	ldr	r6, [r0, #28]
 8004750:	4604      	mov	r4, r0
 8004752:	460d      	mov	r5, r1
 8004754:	b976      	cbnz	r6, 8004774 <_Balloc+0x28>
 8004756:	2010      	movs	r0, #16
 8004758:	f7ff ff44 	bl	80045e4 <malloc>
 800475c:	4602      	mov	r2, r0
 800475e:	61e0      	str	r0, [r4, #28]
 8004760:	b920      	cbnz	r0, 800476c <_Balloc+0x20>
 8004762:	4b18      	ldr	r3, [pc, #96]	; (80047c4 <_Balloc+0x78>)
 8004764:	4818      	ldr	r0, [pc, #96]	; (80047c8 <_Balloc+0x7c>)
 8004766:	216b      	movs	r1, #107	; 0x6b
 8004768:	f7ff f858 	bl	800381c <__assert_func>
 800476c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004770:	6006      	str	r6, [r0, #0]
 8004772:	60c6      	str	r6, [r0, #12]
 8004774:	69e6      	ldr	r6, [r4, #28]
 8004776:	68f3      	ldr	r3, [r6, #12]
 8004778:	b183      	cbz	r3, 800479c <_Balloc+0x50>
 800477a:	69e3      	ldr	r3, [r4, #28]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004782:	b9b8      	cbnz	r0, 80047b4 <_Balloc+0x68>
 8004784:	2101      	movs	r1, #1
 8004786:	fa01 f605 	lsl.w	r6, r1, r5
 800478a:	1d72      	adds	r2, r6, #5
 800478c:	0092      	lsls	r2, r2, #2
 800478e:	4620      	mov	r0, r4
 8004790:	f000 fdf7 	bl	8005382 <_calloc_r>
 8004794:	b160      	cbz	r0, 80047b0 <_Balloc+0x64>
 8004796:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800479a:	e00e      	b.n	80047ba <_Balloc+0x6e>
 800479c:	2221      	movs	r2, #33	; 0x21
 800479e:	2104      	movs	r1, #4
 80047a0:	4620      	mov	r0, r4
 80047a2:	f000 fdee 	bl	8005382 <_calloc_r>
 80047a6:	69e3      	ldr	r3, [r4, #28]
 80047a8:	60f0      	str	r0, [r6, #12]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e4      	bne.n	800477a <_Balloc+0x2e>
 80047b0:	2000      	movs	r0, #0
 80047b2:	bd70      	pop	{r4, r5, r6, pc}
 80047b4:	6802      	ldr	r2, [r0, #0]
 80047b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80047ba:	2300      	movs	r3, #0
 80047bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80047c0:	e7f7      	b.n	80047b2 <_Balloc+0x66>
 80047c2:	bf00      	nop
 80047c4:	08005571 	.word	0x08005571
 80047c8:	080055f1 	.word	0x080055f1

080047cc <_Bfree>:
 80047cc:	b570      	push	{r4, r5, r6, lr}
 80047ce:	69c6      	ldr	r6, [r0, #28]
 80047d0:	4605      	mov	r5, r0
 80047d2:	460c      	mov	r4, r1
 80047d4:	b976      	cbnz	r6, 80047f4 <_Bfree+0x28>
 80047d6:	2010      	movs	r0, #16
 80047d8:	f7ff ff04 	bl	80045e4 <malloc>
 80047dc:	4602      	mov	r2, r0
 80047de:	61e8      	str	r0, [r5, #28]
 80047e0:	b920      	cbnz	r0, 80047ec <_Bfree+0x20>
 80047e2:	4b09      	ldr	r3, [pc, #36]	; (8004808 <_Bfree+0x3c>)
 80047e4:	4809      	ldr	r0, [pc, #36]	; (800480c <_Bfree+0x40>)
 80047e6:	218f      	movs	r1, #143	; 0x8f
 80047e8:	f7ff f818 	bl	800381c <__assert_func>
 80047ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80047f0:	6006      	str	r6, [r0, #0]
 80047f2:	60c6      	str	r6, [r0, #12]
 80047f4:	b13c      	cbz	r4, 8004806 <_Bfree+0x3a>
 80047f6:	69eb      	ldr	r3, [r5, #28]
 80047f8:	6862      	ldr	r2, [r4, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004800:	6021      	str	r1, [r4, #0]
 8004802:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004806:	bd70      	pop	{r4, r5, r6, pc}
 8004808:	08005571 	.word	0x08005571
 800480c:	080055f1 	.word	0x080055f1

08004810 <__multadd>:
 8004810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004814:	690d      	ldr	r5, [r1, #16]
 8004816:	4607      	mov	r7, r0
 8004818:	460c      	mov	r4, r1
 800481a:	461e      	mov	r6, r3
 800481c:	f101 0c14 	add.w	ip, r1, #20
 8004820:	2000      	movs	r0, #0
 8004822:	f8dc 3000 	ldr.w	r3, [ip]
 8004826:	b299      	uxth	r1, r3
 8004828:	fb02 6101 	mla	r1, r2, r1, r6
 800482c:	0c1e      	lsrs	r6, r3, #16
 800482e:	0c0b      	lsrs	r3, r1, #16
 8004830:	fb02 3306 	mla	r3, r2, r6, r3
 8004834:	b289      	uxth	r1, r1
 8004836:	3001      	adds	r0, #1
 8004838:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800483c:	4285      	cmp	r5, r0
 800483e:	f84c 1b04 	str.w	r1, [ip], #4
 8004842:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004846:	dcec      	bgt.n	8004822 <__multadd+0x12>
 8004848:	b30e      	cbz	r6, 800488e <__multadd+0x7e>
 800484a:	68a3      	ldr	r3, [r4, #8]
 800484c:	42ab      	cmp	r3, r5
 800484e:	dc19      	bgt.n	8004884 <__multadd+0x74>
 8004850:	6861      	ldr	r1, [r4, #4]
 8004852:	4638      	mov	r0, r7
 8004854:	3101      	adds	r1, #1
 8004856:	f7ff ff79 	bl	800474c <_Balloc>
 800485a:	4680      	mov	r8, r0
 800485c:	b928      	cbnz	r0, 800486a <__multadd+0x5a>
 800485e:	4602      	mov	r2, r0
 8004860:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <__multadd+0x84>)
 8004862:	480d      	ldr	r0, [pc, #52]	; (8004898 <__multadd+0x88>)
 8004864:	21ba      	movs	r1, #186	; 0xba
 8004866:	f7fe ffd9 	bl	800381c <__assert_func>
 800486a:	6922      	ldr	r2, [r4, #16]
 800486c:	3202      	adds	r2, #2
 800486e:	f104 010c 	add.w	r1, r4, #12
 8004872:	0092      	lsls	r2, r2, #2
 8004874:	300c      	adds	r0, #12
 8004876:	f7fe ffc3 	bl	8003800 <memcpy>
 800487a:	4621      	mov	r1, r4
 800487c:	4638      	mov	r0, r7
 800487e:	f7ff ffa5 	bl	80047cc <_Bfree>
 8004882:	4644      	mov	r4, r8
 8004884:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004888:	3501      	adds	r5, #1
 800488a:	615e      	str	r6, [r3, #20]
 800488c:	6125      	str	r5, [r4, #16]
 800488e:	4620      	mov	r0, r4
 8004890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004894:	080055e0 	.word	0x080055e0
 8004898:	080055f1 	.word	0x080055f1

0800489c <__hi0bits>:
 800489c:	0c03      	lsrs	r3, r0, #16
 800489e:	041b      	lsls	r3, r3, #16
 80048a0:	b9d3      	cbnz	r3, 80048d8 <__hi0bits+0x3c>
 80048a2:	0400      	lsls	r0, r0, #16
 80048a4:	2310      	movs	r3, #16
 80048a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80048aa:	bf04      	itt	eq
 80048ac:	0200      	lsleq	r0, r0, #8
 80048ae:	3308      	addeq	r3, #8
 80048b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80048b4:	bf04      	itt	eq
 80048b6:	0100      	lsleq	r0, r0, #4
 80048b8:	3304      	addeq	r3, #4
 80048ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80048be:	bf04      	itt	eq
 80048c0:	0080      	lsleq	r0, r0, #2
 80048c2:	3302      	addeq	r3, #2
 80048c4:	2800      	cmp	r0, #0
 80048c6:	db05      	blt.n	80048d4 <__hi0bits+0x38>
 80048c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80048cc:	f103 0301 	add.w	r3, r3, #1
 80048d0:	bf08      	it	eq
 80048d2:	2320      	moveq	r3, #32
 80048d4:	4618      	mov	r0, r3
 80048d6:	4770      	bx	lr
 80048d8:	2300      	movs	r3, #0
 80048da:	e7e4      	b.n	80048a6 <__hi0bits+0xa>

080048dc <__lo0bits>:
 80048dc:	6803      	ldr	r3, [r0, #0]
 80048de:	f013 0207 	ands.w	r2, r3, #7
 80048e2:	d00c      	beq.n	80048fe <__lo0bits+0x22>
 80048e4:	07d9      	lsls	r1, r3, #31
 80048e6:	d422      	bmi.n	800492e <__lo0bits+0x52>
 80048e8:	079a      	lsls	r2, r3, #30
 80048ea:	bf49      	itett	mi
 80048ec:	085b      	lsrmi	r3, r3, #1
 80048ee:	089b      	lsrpl	r3, r3, #2
 80048f0:	6003      	strmi	r3, [r0, #0]
 80048f2:	2201      	movmi	r2, #1
 80048f4:	bf5c      	itt	pl
 80048f6:	6003      	strpl	r3, [r0, #0]
 80048f8:	2202      	movpl	r2, #2
 80048fa:	4610      	mov	r0, r2
 80048fc:	4770      	bx	lr
 80048fe:	b299      	uxth	r1, r3
 8004900:	b909      	cbnz	r1, 8004906 <__lo0bits+0x2a>
 8004902:	0c1b      	lsrs	r3, r3, #16
 8004904:	2210      	movs	r2, #16
 8004906:	b2d9      	uxtb	r1, r3
 8004908:	b909      	cbnz	r1, 800490e <__lo0bits+0x32>
 800490a:	3208      	adds	r2, #8
 800490c:	0a1b      	lsrs	r3, r3, #8
 800490e:	0719      	lsls	r1, r3, #28
 8004910:	bf04      	itt	eq
 8004912:	091b      	lsreq	r3, r3, #4
 8004914:	3204      	addeq	r2, #4
 8004916:	0799      	lsls	r1, r3, #30
 8004918:	bf04      	itt	eq
 800491a:	089b      	lsreq	r3, r3, #2
 800491c:	3202      	addeq	r2, #2
 800491e:	07d9      	lsls	r1, r3, #31
 8004920:	d403      	bmi.n	800492a <__lo0bits+0x4e>
 8004922:	085b      	lsrs	r3, r3, #1
 8004924:	f102 0201 	add.w	r2, r2, #1
 8004928:	d003      	beq.n	8004932 <__lo0bits+0x56>
 800492a:	6003      	str	r3, [r0, #0]
 800492c:	e7e5      	b.n	80048fa <__lo0bits+0x1e>
 800492e:	2200      	movs	r2, #0
 8004930:	e7e3      	b.n	80048fa <__lo0bits+0x1e>
 8004932:	2220      	movs	r2, #32
 8004934:	e7e1      	b.n	80048fa <__lo0bits+0x1e>
	...

08004938 <__i2b>:
 8004938:	b510      	push	{r4, lr}
 800493a:	460c      	mov	r4, r1
 800493c:	2101      	movs	r1, #1
 800493e:	f7ff ff05 	bl	800474c <_Balloc>
 8004942:	4602      	mov	r2, r0
 8004944:	b928      	cbnz	r0, 8004952 <__i2b+0x1a>
 8004946:	4b05      	ldr	r3, [pc, #20]	; (800495c <__i2b+0x24>)
 8004948:	4805      	ldr	r0, [pc, #20]	; (8004960 <__i2b+0x28>)
 800494a:	f240 1145 	movw	r1, #325	; 0x145
 800494e:	f7fe ff65 	bl	800381c <__assert_func>
 8004952:	2301      	movs	r3, #1
 8004954:	6144      	str	r4, [r0, #20]
 8004956:	6103      	str	r3, [r0, #16]
 8004958:	bd10      	pop	{r4, pc}
 800495a:	bf00      	nop
 800495c:	080055e0 	.word	0x080055e0
 8004960:	080055f1 	.word	0x080055f1

08004964 <__multiply>:
 8004964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004968:	4691      	mov	r9, r2
 800496a:	690a      	ldr	r2, [r1, #16]
 800496c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004970:	429a      	cmp	r2, r3
 8004972:	bfb8      	it	lt
 8004974:	460b      	movlt	r3, r1
 8004976:	460c      	mov	r4, r1
 8004978:	bfbc      	itt	lt
 800497a:	464c      	movlt	r4, r9
 800497c:	4699      	movlt	r9, r3
 800497e:	6927      	ldr	r7, [r4, #16]
 8004980:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004984:	68a3      	ldr	r3, [r4, #8]
 8004986:	6861      	ldr	r1, [r4, #4]
 8004988:	eb07 060a 	add.w	r6, r7, sl
 800498c:	42b3      	cmp	r3, r6
 800498e:	b085      	sub	sp, #20
 8004990:	bfb8      	it	lt
 8004992:	3101      	addlt	r1, #1
 8004994:	f7ff feda 	bl	800474c <_Balloc>
 8004998:	b930      	cbnz	r0, 80049a8 <__multiply+0x44>
 800499a:	4602      	mov	r2, r0
 800499c:	4b44      	ldr	r3, [pc, #272]	; (8004ab0 <__multiply+0x14c>)
 800499e:	4845      	ldr	r0, [pc, #276]	; (8004ab4 <__multiply+0x150>)
 80049a0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80049a4:	f7fe ff3a 	bl	800381c <__assert_func>
 80049a8:	f100 0514 	add.w	r5, r0, #20
 80049ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80049b0:	462b      	mov	r3, r5
 80049b2:	2200      	movs	r2, #0
 80049b4:	4543      	cmp	r3, r8
 80049b6:	d321      	bcc.n	80049fc <__multiply+0x98>
 80049b8:	f104 0314 	add.w	r3, r4, #20
 80049bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80049c0:	f109 0314 	add.w	r3, r9, #20
 80049c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80049c8:	9202      	str	r2, [sp, #8]
 80049ca:	1b3a      	subs	r2, r7, r4
 80049cc:	3a15      	subs	r2, #21
 80049ce:	f022 0203 	bic.w	r2, r2, #3
 80049d2:	3204      	adds	r2, #4
 80049d4:	f104 0115 	add.w	r1, r4, #21
 80049d8:	428f      	cmp	r7, r1
 80049da:	bf38      	it	cc
 80049dc:	2204      	movcc	r2, #4
 80049de:	9201      	str	r2, [sp, #4]
 80049e0:	9a02      	ldr	r2, [sp, #8]
 80049e2:	9303      	str	r3, [sp, #12]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d80c      	bhi.n	8004a02 <__multiply+0x9e>
 80049e8:	2e00      	cmp	r6, #0
 80049ea:	dd03      	ble.n	80049f4 <__multiply+0x90>
 80049ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d05b      	beq.n	8004aac <__multiply+0x148>
 80049f4:	6106      	str	r6, [r0, #16]
 80049f6:	b005      	add	sp, #20
 80049f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049fc:	f843 2b04 	str.w	r2, [r3], #4
 8004a00:	e7d8      	b.n	80049b4 <__multiply+0x50>
 8004a02:	f8b3 a000 	ldrh.w	sl, [r3]
 8004a06:	f1ba 0f00 	cmp.w	sl, #0
 8004a0a:	d024      	beq.n	8004a56 <__multiply+0xf2>
 8004a0c:	f104 0e14 	add.w	lr, r4, #20
 8004a10:	46a9      	mov	r9, r5
 8004a12:	f04f 0c00 	mov.w	ip, #0
 8004a16:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004a1a:	f8d9 1000 	ldr.w	r1, [r9]
 8004a1e:	fa1f fb82 	uxth.w	fp, r2
 8004a22:	b289      	uxth	r1, r1
 8004a24:	fb0a 110b 	mla	r1, sl, fp, r1
 8004a28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004a2c:	f8d9 2000 	ldr.w	r2, [r9]
 8004a30:	4461      	add	r1, ip
 8004a32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004a36:	fb0a c20b 	mla	r2, sl, fp, ip
 8004a3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004a3e:	b289      	uxth	r1, r1
 8004a40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004a44:	4577      	cmp	r7, lr
 8004a46:	f849 1b04 	str.w	r1, [r9], #4
 8004a4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004a4e:	d8e2      	bhi.n	8004a16 <__multiply+0xb2>
 8004a50:	9a01      	ldr	r2, [sp, #4]
 8004a52:	f845 c002 	str.w	ip, [r5, r2]
 8004a56:	9a03      	ldr	r2, [sp, #12]
 8004a58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	f1b9 0f00 	cmp.w	r9, #0
 8004a62:	d021      	beq.n	8004aa8 <__multiply+0x144>
 8004a64:	6829      	ldr	r1, [r5, #0]
 8004a66:	f104 0c14 	add.w	ip, r4, #20
 8004a6a:	46ae      	mov	lr, r5
 8004a6c:	f04f 0a00 	mov.w	sl, #0
 8004a70:	f8bc b000 	ldrh.w	fp, [ip]
 8004a74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004a78:	fb09 220b 	mla	r2, r9, fp, r2
 8004a7c:	4452      	add	r2, sl
 8004a7e:	b289      	uxth	r1, r1
 8004a80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004a84:	f84e 1b04 	str.w	r1, [lr], #4
 8004a88:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004a8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004a90:	f8be 1000 	ldrh.w	r1, [lr]
 8004a94:	fb09 110a 	mla	r1, r9, sl, r1
 8004a98:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004a9c:	4567      	cmp	r7, ip
 8004a9e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004aa2:	d8e5      	bhi.n	8004a70 <__multiply+0x10c>
 8004aa4:	9a01      	ldr	r2, [sp, #4]
 8004aa6:	50a9      	str	r1, [r5, r2]
 8004aa8:	3504      	adds	r5, #4
 8004aaa:	e799      	b.n	80049e0 <__multiply+0x7c>
 8004aac:	3e01      	subs	r6, #1
 8004aae:	e79b      	b.n	80049e8 <__multiply+0x84>
 8004ab0:	080055e0 	.word	0x080055e0
 8004ab4:	080055f1 	.word	0x080055f1

08004ab8 <__pow5mult>:
 8004ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004abc:	4615      	mov	r5, r2
 8004abe:	f012 0203 	ands.w	r2, r2, #3
 8004ac2:	4606      	mov	r6, r0
 8004ac4:	460f      	mov	r7, r1
 8004ac6:	d007      	beq.n	8004ad8 <__pow5mult+0x20>
 8004ac8:	4c25      	ldr	r4, [pc, #148]	; (8004b60 <__pow5mult+0xa8>)
 8004aca:	3a01      	subs	r2, #1
 8004acc:	2300      	movs	r3, #0
 8004ace:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004ad2:	f7ff fe9d 	bl	8004810 <__multadd>
 8004ad6:	4607      	mov	r7, r0
 8004ad8:	10ad      	asrs	r5, r5, #2
 8004ada:	d03d      	beq.n	8004b58 <__pow5mult+0xa0>
 8004adc:	69f4      	ldr	r4, [r6, #28]
 8004ade:	b97c      	cbnz	r4, 8004b00 <__pow5mult+0x48>
 8004ae0:	2010      	movs	r0, #16
 8004ae2:	f7ff fd7f 	bl	80045e4 <malloc>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	61f0      	str	r0, [r6, #28]
 8004aea:	b928      	cbnz	r0, 8004af8 <__pow5mult+0x40>
 8004aec:	4b1d      	ldr	r3, [pc, #116]	; (8004b64 <__pow5mult+0xac>)
 8004aee:	481e      	ldr	r0, [pc, #120]	; (8004b68 <__pow5mult+0xb0>)
 8004af0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004af4:	f7fe fe92 	bl	800381c <__assert_func>
 8004af8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004afc:	6004      	str	r4, [r0, #0]
 8004afe:	60c4      	str	r4, [r0, #12]
 8004b00:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004b04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004b08:	b94c      	cbnz	r4, 8004b1e <__pow5mult+0x66>
 8004b0a:	f240 2171 	movw	r1, #625	; 0x271
 8004b0e:	4630      	mov	r0, r6
 8004b10:	f7ff ff12 	bl	8004938 <__i2b>
 8004b14:	2300      	movs	r3, #0
 8004b16:	f8c8 0008 	str.w	r0, [r8, #8]
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	6003      	str	r3, [r0, #0]
 8004b1e:	f04f 0900 	mov.w	r9, #0
 8004b22:	07eb      	lsls	r3, r5, #31
 8004b24:	d50a      	bpl.n	8004b3c <__pow5mult+0x84>
 8004b26:	4639      	mov	r1, r7
 8004b28:	4622      	mov	r2, r4
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	f7ff ff1a 	bl	8004964 <__multiply>
 8004b30:	4639      	mov	r1, r7
 8004b32:	4680      	mov	r8, r0
 8004b34:	4630      	mov	r0, r6
 8004b36:	f7ff fe49 	bl	80047cc <_Bfree>
 8004b3a:	4647      	mov	r7, r8
 8004b3c:	106d      	asrs	r5, r5, #1
 8004b3e:	d00b      	beq.n	8004b58 <__pow5mult+0xa0>
 8004b40:	6820      	ldr	r0, [r4, #0]
 8004b42:	b938      	cbnz	r0, 8004b54 <__pow5mult+0x9c>
 8004b44:	4622      	mov	r2, r4
 8004b46:	4621      	mov	r1, r4
 8004b48:	4630      	mov	r0, r6
 8004b4a:	f7ff ff0b 	bl	8004964 <__multiply>
 8004b4e:	6020      	str	r0, [r4, #0]
 8004b50:	f8c0 9000 	str.w	r9, [r0]
 8004b54:	4604      	mov	r4, r0
 8004b56:	e7e4      	b.n	8004b22 <__pow5mult+0x6a>
 8004b58:	4638      	mov	r0, r7
 8004b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b5e:	bf00      	nop
 8004b60:	08005740 	.word	0x08005740
 8004b64:	08005571 	.word	0x08005571
 8004b68:	080055f1 	.word	0x080055f1

08004b6c <__lshift>:
 8004b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b70:	460c      	mov	r4, r1
 8004b72:	6849      	ldr	r1, [r1, #4]
 8004b74:	6923      	ldr	r3, [r4, #16]
 8004b76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004b7a:	68a3      	ldr	r3, [r4, #8]
 8004b7c:	4607      	mov	r7, r0
 8004b7e:	4691      	mov	r9, r2
 8004b80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004b84:	f108 0601 	add.w	r6, r8, #1
 8004b88:	42b3      	cmp	r3, r6
 8004b8a:	db0b      	blt.n	8004ba4 <__lshift+0x38>
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	f7ff fddd 	bl	800474c <_Balloc>
 8004b92:	4605      	mov	r5, r0
 8004b94:	b948      	cbnz	r0, 8004baa <__lshift+0x3e>
 8004b96:	4602      	mov	r2, r0
 8004b98:	4b28      	ldr	r3, [pc, #160]	; (8004c3c <__lshift+0xd0>)
 8004b9a:	4829      	ldr	r0, [pc, #164]	; (8004c40 <__lshift+0xd4>)
 8004b9c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004ba0:	f7fe fe3c 	bl	800381c <__assert_func>
 8004ba4:	3101      	adds	r1, #1
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	e7ee      	b.n	8004b88 <__lshift+0x1c>
 8004baa:	2300      	movs	r3, #0
 8004bac:	f100 0114 	add.w	r1, r0, #20
 8004bb0:	f100 0210 	add.w	r2, r0, #16
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	4553      	cmp	r3, sl
 8004bb8:	db33      	blt.n	8004c22 <__lshift+0xb6>
 8004bba:	6920      	ldr	r0, [r4, #16]
 8004bbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004bc0:	f104 0314 	add.w	r3, r4, #20
 8004bc4:	f019 091f 	ands.w	r9, r9, #31
 8004bc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004bcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004bd0:	d02b      	beq.n	8004c2a <__lshift+0xbe>
 8004bd2:	f1c9 0e20 	rsb	lr, r9, #32
 8004bd6:	468a      	mov	sl, r1
 8004bd8:	2200      	movs	r2, #0
 8004bda:	6818      	ldr	r0, [r3, #0]
 8004bdc:	fa00 f009 	lsl.w	r0, r0, r9
 8004be0:	4310      	orrs	r0, r2
 8004be2:	f84a 0b04 	str.w	r0, [sl], #4
 8004be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bea:	459c      	cmp	ip, r3
 8004bec:	fa22 f20e 	lsr.w	r2, r2, lr
 8004bf0:	d8f3      	bhi.n	8004bda <__lshift+0x6e>
 8004bf2:	ebac 0304 	sub.w	r3, ip, r4
 8004bf6:	3b15      	subs	r3, #21
 8004bf8:	f023 0303 	bic.w	r3, r3, #3
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	f104 0015 	add.w	r0, r4, #21
 8004c02:	4584      	cmp	ip, r0
 8004c04:	bf38      	it	cc
 8004c06:	2304      	movcc	r3, #4
 8004c08:	50ca      	str	r2, [r1, r3]
 8004c0a:	b10a      	cbz	r2, 8004c10 <__lshift+0xa4>
 8004c0c:	f108 0602 	add.w	r6, r8, #2
 8004c10:	3e01      	subs	r6, #1
 8004c12:	4638      	mov	r0, r7
 8004c14:	612e      	str	r6, [r5, #16]
 8004c16:	4621      	mov	r1, r4
 8004c18:	f7ff fdd8 	bl	80047cc <_Bfree>
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c22:	f842 0f04 	str.w	r0, [r2, #4]!
 8004c26:	3301      	adds	r3, #1
 8004c28:	e7c5      	b.n	8004bb6 <__lshift+0x4a>
 8004c2a:	3904      	subs	r1, #4
 8004c2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c30:	f841 2f04 	str.w	r2, [r1, #4]!
 8004c34:	459c      	cmp	ip, r3
 8004c36:	d8f9      	bhi.n	8004c2c <__lshift+0xc0>
 8004c38:	e7ea      	b.n	8004c10 <__lshift+0xa4>
 8004c3a:	bf00      	nop
 8004c3c:	080055e0 	.word	0x080055e0
 8004c40:	080055f1 	.word	0x080055f1

08004c44 <__mcmp>:
 8004c44:	b530      	push	{r4, r5, lr}
 8004c46:	6902      	ldr	r2, [r0, #16]
 8004c48:	690c      	ldr	r4, [r1, #16]
 8004c4a:	1b12      	subs	r2, r2, r4
 8004c4c:	d10e      	bne.n	8004c6c <__mcmp+0x28>
 8004c4e:	f100 0314 	add.w	r3, r0, #20
 8004c52:	3114      	adds	r1, #20
 8004c54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004c58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004c5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004c60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004c64:	42a5      	cmp	r5, r4
 8004c66:	d003      	beq.n	8004c70 <__mcmp+0x2c>
 8004c68:	d305      	bcc.n	8004c76 <__mcmp+0x32>
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	bd30      	pop	{r4, r5, pc}
 8004c70:	4283      	cmp	r3, r0
 8004c72:	d3f3      	bcc.n	8004c5c <__mcmp+0x18>
 8004c74:	e7fa      	b.n	8004c6c <__mcmp+0x28>
 8004c76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c7a:	e7f7      	b.n	8004c6c <__mcmp+0x28>

08004c7c <__mdiff>:
 8004c7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c80:	460c      	mov	r4, r1
 8004c82:	4606      	mov	r6, r0
 8004c84:	4611      	mov	r1, r2
 8004c86:	4620      	mov	r0, r4
 8004c88:	4690      	mov	r8, r2
 8004c8a:	f7ff ffdb 	bl	8004c44 <__mcmp>
 8004c8e:	1e05      	subs	r5, r0, #0
 8004c90:	d110      	bne.n	8004cb4 <__mdiff+0x38>
 8004c92:	4629      	mov	r1, r5
 8004c94:	4630      	mov	r0, r6
 8004c96:	f7ff fd59 	bl	800474c <_Balloc>
 8004c9a:	b930      	cbnz	r0, 8004caa <__mdiff+0x2e>
 8004c9c:	4b3a      	ldr	r3, [pc, #232]	; (8004d88 <__mdiff+0x10c>)
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	f240 2137 	movw	r1, #567	; 0x237
 8004ca4:	4839      	ldr	r0, [pc, #228]	; (8004d8c <__mdiff+0x110>)
 8004ca6:	f7fe fdb9 	bl	800381c <__assert_func>
 8004caa:	2301      	movs	r3, #1
 8004cac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004cb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cb4:	bfa4      	itt	ge
 8004cb6:	4643      	movge	r3, r8
 8004cb8:	46a0      	movge	r8, r4
 8004cba:	4630      	mov	r0, r6
 8004cbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004cc0:	bfa6      	itte	ge
 8004cc2:	461c      	movge	r4, r3
 8004cc4:	2500      	movge	r5, #0
 8004cc6:	2501      	movlt	r5, #1
 8004cc8:	f7ff fd40 	bl	800474c <_Balloc>
 8004ccc:	b920      	cbnz	r0, 8004cd8 <__mdiff+0x5c>
 8004cce:	4b2e      	ldr	r3, [pc, #184]	; (8004d88 <__mdiff+0x10c>)
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	f240 2145 	movw	r1, #581	; 0x245
 8004cd6:	e7e5      	b.n	8004ca4 <__mdiff+0x28>
 8004cd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004cdc:	6926      	ldr	r6, [r4, #16]
 8004cde:	60c5      	str	r5, [r0, #12]
 8004ce0:	f104 0914 	add.w	r9, r4, #20
 8004ce4:	f108 0514 	add.w	r5, r8, #20
 8004ce8:	f100 0e14 	add.w	lr, r0, #20
 8004cec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004cf0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004cf4:	f108 0210 	add.w	r2, r8, #16
 8004cf8:	46f2      	mov	sl, lr
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	f859 3b04 	ldr.w	r3, [r9], #4
 8004d00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004d04:	fa11 f88b 	uxtah	r8, r1, fp
 8004d08:	b299      	uxth	r1, r3
 8004d0a:	0c1b      	lsrs	r3, r3, #16
 8004d0c:	eba8 0801 	sub.w	r8, r8, r1
 8004d10:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004d14:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004d18:	fa1f f888 	uxth.w	r8, r8
 8004d1c:	1419      	asrs	r1, r3, #16
 8004d1e:	454e      	cmp	r6, r9
 8004d20:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004d24:	f84a 3b04 	str.w	r3, [sl], #4
 8004d28:	d8e8      	bhi.n	8004cfc <__mdiff+0x80>
 8004d2a:	1b33      	subs	r3, r6, r4
 8004d2c:	3b15      	subs	r3, #21
 8004d2e:	f023 0303 	bic.w	r3, r3, #3
 8004d32:	3304      	adds	r3, #4
 8004d34:	3415      	adds	r4, #21
 8004d36:	42a6      	cmp	r6, r4
 8004d38:	bf38      	it	cc
 8004d3a:	2304      	movcc	r3, #4
 8004d3c:	441d      	add	r5, r3
 8004d3e:	4473      	add	r3, lr
 8004d40:	469e      	mov	lr, r3
 8004d42:	462e      	mov	r6, r5
 8004d44:	4566      	cmp	r6, ip
 8004d46:	d30e      	bcc.n	8004d66 <__mdiff+0xea>
 8004d48:	f10c 0203 	add.w	r2, ip, #3
 8004d4c:	1b52      	subs	r2, r2, r5
 8004d4e:	f022 0203 	bic.w	r2, r2, #3
 8004d52:	3d03      	subs	r5, #3
 8004d54:	45ac      	cmp	ip, r5
 8004d56:	bf38      	it	cc
 8004d58:	2200      	movcc	r2, #0
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004d60:	b17a      	cbz	r2, 8004d82 <__mdiff+0x106>
 8004d62:	6107      	str	r7, [r0, #16]
 8004d64:	e7a4      	b.n	8004cb0 <__mdiff+0x34>
 8004d66:	f856 8b04 	ldr.w	r8, [r6], #4
 8004d6a:	fa11 f288 	uxtah	r2, r1, r8
 8004d6e:	1414      	asrs	r4, r2, #16
 8004d70:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004d74:	b292      	uxth	r2, r2
 8004d76:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004d7a:	f84e 2b04 	str.w	r2, [lr], #4
 8004d7e:	1421      	asrs	r1, r4, #16
 8004d80:	e7e0      	b.n	8004d44 <__mdiff+0xc8>
 8004d82:	3f01      	subs	r7, #1
 8004d84:	e7ea      	b.n	8004d5c <__mdiff+0xe0>
 8004d86:	bf00      	nop
 8004d88:	080055e0 	.word	0x080055e0
 8004d8c:	080055f1 	.word	0x080055f1

08004d90 <__d2b>:
 8004d90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004d94:	460f      	mov	r7, r1
 8004d96:	2101      	movs	r1, #1
 8004d98:	ec59 8b10 	vmov	r8, r9, d0
 8004d9c:	4616      	mov	r6, r2
 8004d9e:	f7ff fcd5 	bl	800474c <_Balloc>
 8004da2:	4604      	mov	r4, r0
 8004da4:	b930      	cbnz	r0, 8004db4 <__d2b+0x24>
 8004da6:	4602      	mov	r2, r0
 8004da8:	4b24      	ldr	r3, [pc, #144]	; (8004e3c <__d2b+0xac>)
 8004daa:	4825      	ldr	r0, [pc, #148]	; (8004e40 <__d2b+0xb0>)
 8004dac:	f240 310f 	movw	r1, #783	; 0x30f
 8004db0:	f7fe fd34 	bl	800381c <__assert_func>
 8004db4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004db8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004dbc:	bb2d      	cbnz	r5, 8004e0a <__d2b+0x7a>
 8004dbe:	9301      	str	r3, [sp, #4]
 8004dc0:	f1b8 0300 	subs.w	r3, r8, #0
 8004dc4:	d026      	beq.n	8004e14 <__d2b+0x84>
 8004dc6:	4668      	mov	r0, sp
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	f7ff fd87 	bl	80048dc <__lo0bits>
 8004dce:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004dd2:	b1e8      	cbz	r0, 8004e10 <__d2b+0x80>
 8004dd4:	f1c0 0320 	rsb	r3, r0, #32
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	40c2      	lsrs	r2, r0
 8004de0:	6163      	str	r3, [r4, #20]
 8004de2:	9201      	str	r2, [sp, #4]
 8004de4:	9b01      	ldr	r3, [sp, #4]
 8004de6:	61a3      	str	r3, [r4, #24]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	bf14      	ite	ne
 8004dec:	2202      	movne	r2, #2
 8004dee:	2201      	moveq	r2, #1
 8004df0:	6122      	str	r2, [r4, #16]
 8004df2:	b1bd      	cbz	r5, 8004e24 <__d2b+0x94>
 8004df4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004df8:	4405      	add	r5, r0
 8004dfa:	603d      	str	r5, [r7, #0]
 8004dfc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004e00:	6030      	str	r0, [r6, #0]
 8004e02:	4620      	mov	r0, r4
 8004e04:	b003      	add	sp, #12
 8004e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e0e:	e7d6      	b.n	8004dbe <__d2b+0x2e>
 8004e10:	6161      	str	r1, [r4, #20]
 8004e12:	e7e7      	b.n	8004de4 <__d2b+0x54>
 8004e14:	a801      	add	r0, sp, #4
 8004e16:	f7ff fd61 	bl	80048dc <__lo0bits>
 8004e1a:	9b01      	ldr	r3, [sp, #4]
 8004e1c:	6163      	str	r3, [r4, #20]
 8004e1e:	3020      	adds	r0, #32
 8004e20:	2201      	movs	r2, #1
 8004e22:	e7e5      	b.n	8004df0 <__d2b+0x60>
 8004e24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004e28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004e2c:	6038      	str	r0, [r7, #0]
 8004e2e:	6918      	ldr	r0, [r3, #16]
 8004e30:	f7ff fd34 	bl	800489c <__hi0bits>
 8004e34:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004e38:	e7e2      	b.n	8004e00 <__d2b+0x70>
 8004e3a:	bf00      	nop
 8004e3c:	080055e0 	.word	0x080055e0
 8004e40:	080055f1 	.word	0x080055f1

08004e44 <__sfputc_r>:
 8004e44:	6893      	ldr	r3, [r2, #8]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	b410      	push	{r4}
 8004e4c:	6093      	str	r3, [r2, #8]
 8004e4e:	da08      	bge.n	8004e62 <__sfputc_r+0x1e>
 8004e50:	6994      	ldr	r4, [r2, #24]
 8004e52:	42a3      	cmp	r3, r4
 8004e54:	db01      	blt.n	8004e5a <__sfputc_r+0x16>
 8004e56:	290a      	cmp	r1, #10
 8004e58:	d103      	bne.n	8004e62 <__sfputc_r+0x1e>
 8004e5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e5e:	f7fe bbbc 	b.w	80035da <__swbuf_r>
 8004e62:	6813      	ldr	r3, [r2, #0]
 8004e64:	1c58      	adds	r0, r3, #1
 8004e66:	6010      	str	r0, [r2, #0]
 8004e68:	7019      	strb	r1, [r3, #0]
 8004e6a:	4608      	mov	r0, r1
 8004e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <__sfputs_r>:
 8004e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e74:	4606      	mov	r6, r0
 8004e76:	460f      	mov	r7, r1
 8004e78:	4614      	mov	r4, r2
 8004e7a:	18d5      	adds	r5, r2, r3
 8004e7c:	42ac      	cmp	r4, r5
 8004e7e:	d101      	bne.n	8004e84 <__sfputs_r+0x12>
 8004e80:	2000      	movs	r0, #0
 8004e82:	e007      	b.n	8004e94 <__sfputs_r+0x22>
 8004e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e88:	463a      	mov	r2, r7
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	f7ff ffda 	bl	8004e44 <__sfputc_r>
 8004e90:	1c43      	adds	r3, r0, #1
 8004e92:	d1f3      	bne.n	8004e7c <__sfputs_r+0xa>
 8004e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e98 <_vfiprintf_r>:
 8004e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e9c:	460d      	mov	r5, r1
 8004e9e:	b09d      	sub	sp, #116	; 0x74
 8004ea0:	4614      	mov	r4, r2
 8004ea2:	4698      	mov	r8, r3
 8004ea4:	4606      	mov	r6, r0
 8004ea6:	b118      	cbz	r0, 8004eb0 <_vfiprintf_r+0x18>
 8004ea8:	6a03      	ldr	r3, [r0, #32]
 8004eaa:	b90b      	cbnz	r3, 8004eb0 <_vfiprintf_r+0x18>
 8004eac:	f7fe fb1c 	bl	80034e8 <__sinit>
 8004eb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004eb2:	07d9      	lsls	r1, r3, #31
 8004eb4:	d405      	bmi.n	8004ec2 <_vfiprintf_r+0x2a>
 8004eb6:	89ab      	ldrh	r3, [r5, #12]
 8004eb8:	059a      	lsls	r2, r3, #22
 8004eba:	d402      	bmi.n	8004ec2 <_vfiprintf_r+0x2a>
 8004ebc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ebe:	f7fe fc9d 	bl	80037fc <__retarget_lock_acquire_recursive>
 8004ec2:	89ab      	ldrh	r3, [r5, #12]
 8004ec4:	071b      	lsls	r3, r3, #28
 8004ec6:	d501      	bpl.n	8004ecc <_vfiprintf_r+0x34>
 8004ec8:	692b      	ldr	r3, [r5, #16]
 8004eca:	b99b      	cbnz	r3, 8004ef4 <_vfiprintf_r+0x5c>
 8004ecc:	4629      	mov	r1, r5
 8004ece:	4630      	mov	r0, r6
 8004ed0:	f7fe fbc0 	bl	8003654 <__swsetup_r>
 8004ed4:	b170      	cbz	r0, 8004ef4 <_vfiprintf_r+0x5c>
 8004ed6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ed8:	07dc      	lsls	r4, r3, #31
 8004eda:	d504      	bpl.n	8004ee6 <_vfiprintf_r+0x4e>
 8004edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ee0:	b01d      	add	sp, #116	; 0x74
 8004ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ee6:	89ab      	ldrh	r3, [r5, #12]
 8004ee8:	0598      	lsls	r0, r3, #22
 8004eea:	d4f7      	bmi.n	8004edc <_vfiprintf_r+0x44>
 8004eec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004eee:	f7fe fc86 	bl	80037fe <__retarget_lock_release_recursive>
 8004ef2:	e7f3      	b.n	8004edc <_vfiprintf_r+0x44>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ef8:	2320      	movs	r3, #32
 8004efa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004efe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f02:	2330      	movs	r3, #48	; 0x30
 8004f04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80050b8 <_vfiprintf_r+0x220>
 8004f08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f0c:	f04f 0901 	mov.w	r9, #1
 8004f10:	4623      	mov	r3, r4
 8004f12:	469a      	mov	sl, r3
 8004f14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f18:	b10a      	cbz	r2, 8004f1e <_vfiprintf_r+0x86>
 8004f1a:	2a25      	cmp	r2, #37	; 0x25
 8004f1c:	d1f9      	bne.n	8004f12 <_vfiprintf_r+0x7a>
 8004f1e:	ebba 0b04 	subs.w	fp, sl, r4
 8004f22:	d00b      	beq.n	8004f3c <_vfiprintf_r+0xa4>
 8004f24:	465b      	mov	r3, fp
 8004f26:	4622      	mov	r2, r4
 8004f28:	4629      	mov	r1, r5
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	f7ff ffa1 	bl	8004e72 <__sfputs_r>
 8004f30:	3001      	adds	r0, #1
 8004f32:	f000 80a9 	beq.w	8005088 <_vfiprintf_r+0x1f0>
 8004f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f38:	445a      	add	r2, fp
 8004f3a:	9209      	str	r2, [sp, #36]	; 0x24
 8004f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 80a1 	beq.w	8005088 <_vfiprintf_r+0x1f0>
 8004f46:	2300      	movs	r3, #0
 8004f48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f50:	f10a 0a01 	add.w	sl, sl, #1
 8004f54:	9304      	str	r3, [sp, #16]
 8004f56:	9307      	str	r3, [sp, #28]
 8004f58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f5c:	931a      	str	r3, [sp, #104]	; 0x68
 8004f5e:	4654      	mov	r4, sl
 8004f60:	2205      	movs	r2, #5
 8004f62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f66:	4854      	ldr	r0, [pc, #336]	; (80050b8 <_vfiprintf_r+0x220>)
 8004f68:	f7fb f932 	bl	80001d0 <memchr>
 8004f6c:	9a04      	ldr	r2, [sp, #16]
 8004f6e:	b9d8      	cbnz	r0, 8004fa8 <_vfiprintf_r+0x110>
 8004f70:	06d1      	lsls	r1, r2, #27
 8004f72:	bf44      	itt	mi
 8004f74:	2320      	movmi	r3, #32
 8004f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f7a:	0713      	lsls	r3, r2, #28
 8004f7c:	bf44      	itt	mi
 8004f7e:	232b      	movmi	r3, #43	; 0x2b
 8004f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f84:	f89a 3000 	ldrb.w	r3, [sl]
 8004f88:	2b2a      	cmp	r3, #42	; 0x2a
 8004f8a:	d015      	beq.n	8004fb8 <_vfiprintf_r+0x120>
 8004f8c:	9a07      	ldr	r2, [sp, #28]
 8004f8e:	4654      	mov	r4, sl
 8004f90:	2000      	movs	r0, #0
 8004f92:	f04f 0c0a 	mov.w	ip, #10
 8004f96:	4621      	mov	r1, r4
 8004f98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f9c:	3b30      	subs	r3, #48	; 0x30
 8004f9e:	2b09      	cmp	r3, #9
 8004fa0:	d94d      	bls.n	800503e <_vfiprintf_r+0x1a6>
 8004fa2:	b1b0      	cbz	r0, 8004fd2 <_vfiprintf_r+0x13a>
 8004fa4:	9207      	str	r2, [sp, #28]
 8004fa6:	e014      	b.n	8004fd2 <_vfiprintf_r+0x13a>
 8004fa8:	eba0 0308 	sub.w	r3, r0, r8
 8004fac:	fa09 f303 	lsl.w	r3, r9, r3
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	9304      	str	r3, [sp, #16]
 8004fb4:	46a2      	mov	sl, r4
 8004fb6:	e7d2      	b.n	8004f5e <_vfiprintf_r+0xc6>
 8004fb8:	9b03      	ldr	r3, [sp, #12]
 8004fba:	1d19      	adds	r1, r3, #4
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	9103      	str	r1, [sp, #12]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	bfbb      	ittet	lt
 8004fc4:	425b      	neglt	r3, r3
 8004fc6:	f042 0202 	orrlt.w	r2, r2, #2
 8004fca:	9307      	strge	r3, [sp, #28]
 8004fcc:	9307      	strlt	r3, [sp, #28]
 8004fce:	bfb8      	it	lt
 8004fd0:	9204      	strlt	r2, [sp, #16]
 8004fd2:	7823      	ldrb	r3, [r4, #0]
 8004fd4:	2b2e      	cmp	r3, #46	; 0x2e
 8004fd6:	d10c      	bne.n	8004ff2 <_vfiprintf_r+0x15a>
 8004fd8:	7863      	ldrb	r3, [r4, #1]
 8004fda:	2b2a      	cmp	r3, #42	; 0x2a
 8004fdc:	d134      	bne.n	8005048 <_vfiprintf_r+0x1b0>
 8004fde:	9b03      	ldr	r3, [sp, #12]
 8004fe0:	1d1a      	adds	r2, r3, #4
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	9203      	str	r2, [sp, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	bfb8      	it	lt
 8004fea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004fee:	3402      	adds	r4, #2
 8004ff0:	9305      	str	r3, [sp, #20]
 8004ff2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80050c8 <_vfiprintf_r+0x230>
 8004ff6:	7821      	ldrb	r1, [r4, #0]
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	4650      	mov	r0, sl
 8004ffc:	f7fb f8e8 	bl	80001d0 <memchr>
 8005000:	b138      	cbz	r0, 8005012 <_vfiprintf_r+0x17a>
 8005002:	9b04      	ldr	r3, [sp, #16]
 8005004:	eba0 000a 	sub.w	r0, r0, sl
 8005008:	2240      	movs	r2, #64	; 0x40
 800500a:	4082      	lsls	r2, r0
 800500c:	4313      	orrs	r3, r2
 800500e:	3401      	adds	r4, #1
 8005010:	9304      	str	r3, [sp, #16]
 8005012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005016:	4829      	ldr	r0, [pc, #164]	; (80050bc <_vfiprintf_r+0x224>)
 8005018:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800501c:	2206      	movs	r2, #6
 800501e:	f7fb f8d7 	bl	80001d0 <memchr>
 8005022:	2800      	cmp	r0, #0
 8005024:	d03f      	beq.n	80050a6 <_vfiprintf_r+0x20e>
 8005026:	4b26      	ldr	r3, [pc, #152]	; (80050c0 <_vfiprintf_r+0x228>)
 8005028:	bb1b      	cbnz	r3, 8005072 <_vfiprintf_r+0x1da>
 800502a:	9b03      	ldr	r3, [sp, #12]
 800502c:	3307      	adds	r3, #7
 800502e:	f023 0307 	bic.w	r3, r3, #7
 8005032:	3308      	adds	r3, #8
 8005034:	9303      	str	r3, [sp, #12]
 8005036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005038:	443b      	add	r3, r7
 800503a:	9309      	str	r3, [sp, #36]	; 0x24
 800503c:	e768      	b.n	8004f10 <_vfiprintf_r+0x78>
 800503e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005042:	460c      	mov	r4, r1
 8005044:	2001      	movs	r0, #1
 8005046:	e7a6      	b.n	8004f96 <_vfiprintf_r+0xfe>
 8005048:	2300      	movs	r3, #0
 800504a:	3401      	adds	r4, #1
 800504c:	9305      	str	r3, [sp, #20]
 800504e:	4619      	mov	r1, r3
 8005050:	f04f 0c0a 	mov.w	ip, #10
 8005054:	4620      	mov	r0, r4
 8005056:	f810 2b01 	ldrb.w	r2, [r0], #1
 800505a:	3a30      	subs	r2, #48	; 0x30
 800505c:	2a09      	cmp	r2, #9
 800505e:	d903      	bls.n	8005068 <_vfiprintf_r+0x1d0>
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0c6      	beq.n	8004ff2 <_vfiprintf_r+0x15a>
 8005064:	9105      	str	r1, [sp, #20]
 8005066:	e7c4      	b.n	8004ff2 <_vfiprintf_r+0x15a>
 8005068:	fb0c 2101 	mla	r1, ip, r1, r2
 800506c:	4604      	mov	r4, r0
 800506e:	2301      	movs	r3, #1
 8005070:	e7f0      	b.n	8005054 <_vfiprintf_r+0x1bc>
 8005072:	ab03      	add	r3, sp, #12
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	462a      	mov	r2, r5
 8005078:	4b12      	ldr	r3, [pc, #72]	; (80050c4 <_vfiprintf_r+0x22c>)
 800507a:	a904      	add	r1, sp, #16
 800507c:	4630      	mov	r0, r6
 800507e:	f7fd fdf3 	bl	8002c68 <_printf_float>
 8005082:	4607      	mov	r7, r0
 8005084:	1c78      	adds	r0, r7, #1
 8005086:	d1d6      	bne.n	8005036 <_vfiprintf_r+0x19e>
 8005088:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800508a:	07d9      	lsls	r1, r3, #31
 800508c:	d405      	bmi.n	800509a <_vfiprintf_r+0x202>
 800508e:	89ab      	ldrh	r3, [r5, #12]
 8005090:	059a      	lsls	r2, r3, #22
 8005092:	d402      	bmi.n	800509a <_vfiprintf_r+0x202>
 8005094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005096:	f7fe fbb2 	bl	80037fe <__retarget_lock_release_recursive>
 800509a:	89ab      	ldrh	r3, [r5, #12]
 800509c:	065b      	lsls	r3, r3, #25
 800509e:	f53f af1d 	bmi.w	8004edc <_vfiprintf_r+0x44>
 80050a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050a4:	e71c      	b.n	8004ee0 <_vfiprintf_r+0x48>
 80050a6:	ab03      	add	r3, sp, #12
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	462a      	mov	r2, r5
 80050ac:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <_vfiprintf_r+0x22c>)
 80050ae:	a904      	add	r1, sp, #16
 80050b0:	4630      	mov	r0, r6
 80050b2:	f7fe f87d 	bl	80031b0 <_printf_i>
 80050b6:	e7e4      	b.n	8005082 <_vfiprintf_r+0x1ea>
 80050b8:	0800574c 	.word	0x0800574c
 80050bc:	08005756 	.word	0x08005756
 80050c0:	08002c69 	.word	0x08002c69
 80050c4:	08004e73 	.word	0x08004e73
 80050c8:	08005752 	.word	0x08005752

080050cc <__sflush_r>:
 80050cc:	898a      	ldrh	r2, [r1, #12]
 80050ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050d2:	4605      	mov	r5, r0
 80050d4:	0710      	lsls	r0, r2, #28
 80050d6:	460c      	mov	r4, r1
 80050d8:	d458      	bmi.n	800518c <__sflush_r+0xc0>
 80050da:	684b      	ldr	r3, [r1, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	dc05      	bgt.n	80050ec <__sflush_r+0x20>
 80050e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	dc02      	bgt.n	80050ec <__sflush_r+0x20>
 80050e6:	2000      	movs	r0, #0
 80050e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050ee:	2e00      	cmp	r6, #0
 80050f0:	d0f9      	beq.n	80050e6 <__sflush_r+0x1a>
 80050f2:	2300      	movs	r3, #0
 80050f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80050f8:	682f      	ldr	r7, [r5, #0]
 80050fa:	6a21      	ldr	r1, [r4, #32]
 80050fc:	602b      	str	r3, [r5, #0]
 80050fe:	d032      	beq.n	8005166 <__sflush_r+0x9a>
 8005100:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005102:	89a3      	ldrh	r3, [r4, #12]
 8005104:	075a      	lsls	r2, r3, #29
 8005106:	d505      	bpl.n	8005114 <__sflush_r+0x48>
 8005108:	6863      	ldr	r3, [r4, #4]
 800510a:	1ac0      	subs	r0, r0, r3
 800510c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800510e:	b10b      	cbz	r3, 8005114 <__sflush_r+0x48>
 8005110:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005112:	1ac0      	subs	r0, r0, r3
 8005114:	2300      	movs	r3, #0
 8005116:	4602      	mov	r2, r0
 8005118:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800511a:	6a21      	ldr	r1, [r4, #32]
 800511c:	4628      	mov	r0, r5
 800511e:	47b0      	blx	r6
 8005120:	1c43      	adds	r3, r0, #1
 8005122:	89a3      	ldrh	r3, [r4, #12]
 8005124:	d106      	bne.n	8005134 <__sflush_r+0x68>
 8005126:	6829      	ldr	r1, [r5, #0]
 8005128:	291d      	cmp	r1, #29
 800512a:	d82b      	bhi.n	8005184 <__sflush_r+0xb8>
 800512c:	4a29      	ldr	r2, [pc, #164]	; (80051d4 <__sflush_r+0x108>)
 800512e:	410a      	asrs	r2, r1
 8005130:	07d6      	lsls	r6, r2, #31
 8005132:	d427      	bmi.n	8005184 <__sflush_r+0xb8>
 8005134:	2200      	movs	r2, #0
 8005136:	6062      	str	r2, [r4, #4]
 8005138:	04d9      	lsls	r1, r3, #19
 800513a:	6922      	ldr	r2, [r4, #16]
 800513c:	6022      	str	r2, [r4, #0]
 800513e:	d504      	bpl.n	800514a <__sflush_r+0x7e>
 8005140:	1c42      	adds	r2, r0, #1
 8005142:	d101      	bne.n	8005148 <__sflush_r+0x7c>
 8005144:	682b      	ldr	r3, [r5, #0]
 8005146:	b903      	cbnz	r3, 800514a <__sflush_r+0x7e>
 8005148:	6560      	str	r0, [r4, #84]	; 0x54
 800514a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800514c:	602f      	str	r7, [r5, #0]
 800514e:	2900      	cmp	r1, #0
 8005150:	d0c9      	beq.n	80050e6 <__sflush_r+0x1a>
 8005152:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005156:	4299      	cmp	r1, r3
 8005158:	d002      	beq.n	8005160 <__sflush_r+0x94>
 800515a:	4628      	mov	r0, r5
 800515c:	f7ff f9f6 	bl	800454c <_free_r>
 8005160:	2000      	movs	r0, #0
 8005162:	6360      	str	r0, [r4, #52]	; 0x34
 8005164:	e7c0      	b.n	80050e8 <__sflush_r+0x1c>
 8005166:	2301      	movs	r3, #1
 8005168:	4628      	mov	r0, r5
 800516a:	47b0      	blx	r6
 800516c:	1c41      	adds	r1, r0, #1
 800516e:	d1c8      	bne.n	8005102 <__sflush_r+0x36>
 8005170:	682b      	ldr	r3, [r5, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0c5      	beq.n	8005102 <__sflush_r+0x36>
 8005176:	2b1d      	cmp	r3, #29
 8005178:	d001      	beq.n	800517e <__sflush_r+0xb2>
 800517a:	2b16      	cmp	r3, #22
 800517c:	d101      	bne.n	8005182 <__sflush_r+0xb6>
 800517e:	602f      	str	r7, [r5, #0]
 8005180:	e7b1      	b.n	80050e6 <__sflush_r+0x1a>
 8005182:	89a3      	ldrh	r3, [r4, #12]
 8005184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005188:	81a3      	strh	r3, [r4, #12]
 800518a:	e7ad      	b.n	80050e8 <__sflush_r+0x1c>
 800518c:	690f      	ldr	r7, [r1, #16]
 800518e:	2f00      	cmp	r7, #0
 8005190:	d0a9      	beq.n	80050e6 <__sflush_r+0x1a>
 8005192:	0793      	lsls	r3, r2, #30
 8005194:	680e      	ldr	r6, [r1, #0]
 8005196:	bf08      	it	eq
 8005198:	694b      	ldreq	r3, [r1, #20]
 800519a:	600f      	str	r7, [r1, #0]
 800519c:	bf18      	it	ne
 800519e:	2300      	movne	r3, #0
 80051a0:	eba6 0807 	sub.w	r8, r6, r7
 80051a4:	608b      	str	r3, [r1, #8]
 80051a6:	f1b8 0f00 	cmp.w	r8, #0
 80051aa:	dd9c      	ble.n	80050e6 <__sflush_r+0x1a>
 80051ac:	6a21      	ldr	r1, [r4, #32]
 80051ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80051b0:	4643      	mov	r3, r8
 80051b2:	463a      	mov	r2, r7
 80051b4:	4628      	mov	r0, r5
 80051b6:	47b0      	blx	r6
 80051b8:	2800      	cmp	r0, #0
 80051ba:	dc06      	bgt.n	80051ca <__sflush_r+0xfe>
 80051bc:	89a3      	ldrh	r3, [r4, #12]
 80051be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051c2:	81a3      	strh	r3, [r4, #12]
 80051c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051c8:	e78e      	b.n	80050e8 <__sflush_r+0x1c>
 80051ca:	4407      	add	r7, r0
 80051cc:	eba8 0800 	sub.w	r8, r8, r0
 80051d0:	e7e9      	b.n	80051a6 <__sflush_r+0xda>
 80051d2:	bf00      	nop
 80051d4:	dfbffffe 	.word	0xdfbffffe

080051d8 <_fflush_r>:
 80051d8:	b538      	push	{r3, r4, r5, lr}
 80051da:	690b      	ldr	r3, [r1, #16]
 80051dc:	4605      	mov	r5, r0
 80051de:	460c      	mov	r4, r1
 80051e0:	b913      	cbnz	r3, 80051e8 <_fflush_r+0x10>
 80051e2:	2500      	movs	r5, #0
 80051e4:	4628      	mov	r0, r5
 80051e6:	bd38      	pop	{r3, r4, r5, pc}
 80051e8:	b118      	cbz	r0, 80051f2 <_fflush_r+0x1a>
 80051ea:	6a03      	ldr	r3, [r0, #32]
 80051ec:	b90b      	cbnz	r3, 80051f2 <_fflush_r+0x1a>
 80051ee:	f7fe f97b 	bl	80034e8 <__sinit>
 80051f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0f3      	beq.n	80051e2 <_fflush_r+0xa>
 80051fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80051fc:	07d0      	lsls	r0, r2, #31
 80051fe:	d404      	bmi.n	800520a <_fflush_r+0x32>
 8005200:	0599      	lsls	r1, r3, #22
 8005202:	d402      	bmi.n	800520a <_fflush_r+0x32>
 8005204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005206:	f7fe faf9 	bl	80037fc <__retarget_lock_acquire_recursive>
 800520a:	4628      	mov	r0, r5
 800520c:	4621      	mov	r1, r4
 800520e:	f7ff ff5d 	bl	80050cc <__sflush_r>
 8005212:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005214:	07da      	lsls	r2, r3, #31
 8005216:	4605      	mov	r5, r0
 8005218:	d4e4      	bmi.n	80051e4 <_fflush_r+0xc>
 800521a:	89a3      	ldrh	r3, [r4, #12]
 800521c:	059b      	lsls	r3, r3, #22
 800521e:	d4e1      	bmi.n	80051e4 <_fflush_r+0xc>
 8005220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005222:	f7fe faec 	bl	80037fe <__retarget_lock_release_recursive>
 8005226:	e7dd      	b.n	80051e4 <_fflush_r+0xc>

08005228 <fiprintf>:
 8005228:	b40e      	push	{r1, r2, r3}
 800522a:	b503      	push	{r0, r1, lr}
 800522c:	4601      	mov	r1, r0
 800522e:	ab03      	add	r3, sp, #12
 8005230:	4805      	ldr	r0, [pc, #20]	; (8005248 <fiprintf+0x20>)
 8005232:	f853 2b04 	ldr.w	r2, [r3], #4
 8005236:	6800      	ldr	r0, [r0, #0]
 8005238:	9301      	str	r3, [sp, #4]
 800523a:	f7ff fe2d 	bl	8004e98 <_vfiprintf_r>
 800523e:	b002      	add	sp, #8
 8005240:	f85d eb04 	ldr.w	lr, [sp], #4
 8005244:	b003      	add	sp, #12
 8005246:	4770      	bx	lr
 8005248:	20000064 	.word	0x20000064

0800524c <__swhatbuf_r>:
 800524c:	b570      	push	{r4, r5, r6, lr}
 800524e:	460c      	mov	r4, r1
 8005250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005254:	2900      	cmp	r1, #0
 8005256:	b096      	sub	sp, #88	; 0x58
 8005258:	4615      	mov	r5, r2
 800525a:	461e      	mov	r6, r3
 800525c:	da0d      	bge.n	800527a <__swhatbuf_r+0x2e>
 800525e:	89a3      	ldrh	r3, [r4, #12]
 8005260:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005264:	f04f 0100 	mov.w	r1, #0
 8005268:	bf0c      	ite	eq
 800526a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800526e:	2340      	movne	r3, #64	; 0x40
 8005270:	2000      	movs	r0, #0
 8005272:	6031      	str	r1, [r6, #0]
 8005274:	602b      	str	r3, [r5, #0]
 8005276:	b016      	add	sp, #88	; 0x58
 8005278:	bd70      	pop	{r4, r5, r6, pc}
 800527a:	466a      	mov	r2, sp
 800527c:	f000 f848 	bl	8005310 <_fstat_r>
 8005280:	2800      	cmp	r0, #0
 8005282:	dbec      	blt.n	800525e <__swhatbuf_r+0x12>
 8005284:	9901      	ldr	r1, [sp, #4]
 8005286:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800528a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800528e:	4259      	negs	r1, r3
 8005290:	4159      	adcs	r1, r3
 8005292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005296:	e7eb      	b.n	8005270 <__swhatbuf_r+0x24>

08005298 <__smakebuf_r>:
 8005298:	898b      	ldrh	r3, [r1, #12]
 800529a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800529c:	079d      	lsls	r5, r3, #30
 800529e:	4606      	mov	r6, r0
 80052a0:	460c      	mov	r4, r1
 80052a2:	d507      	bpl.n	80052b4 <__smakebuf_r+0x1c>
 80052a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80052a8:	6023      	str	r3, [r4, #0]
 80052aa:	6123      	str	r3, [r4, #16]
 80052ac:	2301      	movs	r3, #1
 80052ae:	6163      	str	r3, [r4, #20]
 80052b0:	b002      	add	sp, #8
 80052b2:	bd70      	pop	{r4, r5, r6, pc}
 80052b4:	ab01      	add	r3, sp, #4
 80052b6:	466a      	mov	r2, sp
 80052b8:	f7ff ffc8 	bl	800524c <__swhatbuf_r>
 80052bc:	9900      	ldr	r1, [sp, #0]
 80052be:	4605      	mov	r5, r0
 80052c0:	4630      	mov	r0, r6
 80052c2:	f7ff f9b7 	bl	8004634 <_malloc_r>
 80052c6:	b948      	cbnz	r0, 80052dc <__smakebuf_r+0x44>
 80052c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052cc:	059a      	lsls	r2, r3, #22
 80052ce:	d4ef      	bmi.n	80052b0 <__smakebuf_r+0x18>
 80052d0:	f023 0303 	bic.w	r3, r3, #3
 80052d4:	f043 0302 	orr.w	r3, r3, #2
 80052d8:	81a3      	strh	r3, [r4, #12]
 80052da:	e7e3      	b.n	80052a4 <__smakebuf_r+0xc>
 80052dc:	89a3      	ldrh	r3, [r4, #12]
 80052de:	6020      	str	r0, [r4, #0]
 80052e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e4:	81a3      	strh	r3, [r4, #12]
 80052e6:	9b00      	ldr	r3, [sp, #0]
 80052e8:	6163      	str	r3, [r4, #20]
 80052ea:	9b01      	ldr	r3, [sp, #4]
 80052ec:	6120      	str	r0, [r4, #16]
 80052ee:	b15b      	cbz	r3, 8005308 <__smakebuf_r+0x70>
 80052f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052f4:	4630      	mov	r0, r6
 80052f6:	f000 f81d 	bl	8005334 <_isatty_r>
 80052fa:	b128      	cbz	r0, 8005308 <__smakebuf_r+0x70>
 80052fc:	89a3      	ldrh	r3, [r4, #12]
 80052fe:	f023 0303 	bic.w	r3, r3, #3
 8005302:	f043 0301 	orr.w	r3, r3, #1
 8005306:	81a3      	strh	r3, [r4, #12]
 8005308:	89a3      	ldrh	r3, [r4, #12]
 800530a:	431d      	orrs	r5, r3
 800530c:	81a5      	strh	r5, [r4, #12]
 800530e:	e7cf      	b.n	80052b0 <__smakebuf_r+0x18>

08005310 <_fstat_r>:
 8005310:	b538      	push	{r3, r4, r5, lr}
 8005312:	4d07      	ldr	r5, [pc, #28]	; (8005330 <_fstat_r+0x20>)
 8005314:	2300      	movs	r3, #0
 8005316:	4604      	mov	r4, r0
 8005318:	4608      	mov	r0, r1
 800531a:	4611      	mov	r1, r2
 800531c:	602b      	str	r3, [r5, #0]
 800531e:	f7fd fbd8 	bl	8002ad2 <_fstat>
 8005322:	1c43      	adds	r3, r0, #1
 8005324:	d102      	bne.n	800532c <_fstat_r+0x1c>
 8005326:	682b      	ldr	r3, [r5, #0]
 8005328:	b103      	cbz	r3, 800532c <_fstat_r+0x1c>
 800532a:	6023      	str	r3, [r4, #0]
 800532c:	bd38      	pop	{r3, r4, r5, pc}
 800532e:	bf00      	nop
 8005330:	20000454 	.word	0x20000454

08005334 <_isatty_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	4d06      	ldr	r5, [pc, #24]	; (8005350 <_isatty_r+0x1c>)
 8005338:	2300      	movs	r3, #0
 800533a:	4604      	mov	r4, r0
 800533c:	4608      	mov	r0, r1
 800533e:	602b      	str	r3, [r5, #0]
 8005340:	f7fd fbd5 	bl	8002aee <_isatty>
 8005344:	1c43      	adds	r3, r0, #1
 8005346:	d102      	bne.n	800534e <_isatty_r+0x1a>
 8005348:	682b      	ldr	r3, [r5, #0]
 800534a:	b103      	cbz	r3, 800534e <_isatty_r+0x1a>
 800534c:	6023      	str	r3, [r4, #0]
 800534e:	bd38      	pop	{r3, r4, r5, pc}
 8005350:	20000454 	.word	0x20000454

08005354 <_sbrk_r>:
 8005354:	b538      	push	{r3, r4, r5, lr}
 8005356:	4d06      	ldr	r5, [pc, #24]	; (8005370 <_sbrk_r+0x1c>)
 8005358:	2300      	movs	r3, #0
 800535a:	4604      	mov	r4, r0
 800535c:	4608      	mov	r0, r1
 800535e:	602b      	str	r3, [r5, #0]
 8005360:	f7fb ff72 	bl	8001248 <_sbrk>
 8005364:	1c43      	adds	r3, r0, #1
 8005366:	d102      	bne.n	800536e <_sbrk_r+0x1a>
 8005368:	682b      	ldr	r3, [r5, #0]
 800536a:	b103      	cbz	r3, 800536e <_sbrk_r+0x1a>
 800536c:	6023      	str	r3, [r4, #0]
 800536e:	bd38      	pop	{r3, r4, r5, pc}
 8005370:	20000454 	.word	0x20000454

08005374 <abort>:
 8005374:	b508      	push	{r3, lr}
 8005376:	2006      	movs	r0, #6
 8005378:	f000 f860 	bl	800543c <raise>
 800537c:	2001      	movs	r0, #1
 800537e:	f000 f881 	bl	8005484 <_exit>

08005382 <_calloc_r>:
 8005382:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005384:	fba1 2402 	umull	r2, r4, r1, r2
 8005388:	b94c      	cbnz	r4, 800539e <_calloc_r+0x1c>
 800538a:	4611      	mov	r1, r2
 800538c:	9201      	str	r2, [sp, #4]
 800538e:	f7ff f951 	bl	8004634 <_malloc_r>
 8005392:	9a01      	ldr	r2, [sp, #4]
 8005394:	4605      	mov	r5, r0
 8005396:	b930      	cbnz	r0, 80053a6 <_calloc_r+0x24>
 8005398:	4628      	mov	r0, r5
 800539a:	b003      	add	sp, #12
 800539c:	bd30      	pop	{r4, r5, pc}
 800539e:	220c      	movs	r2, #12
 80053a0:	6002      	str	r2, [r0, #0]
 80053a2:	2500      	movs	r5, #0
 80053a4:	e7f8      	b.n	8005398 <_calloc_r+0x16>
 80053a6:	4621      	mov	r1, r4
 80053a8:	f7fe f9ac 	bl	8003704 <memset>
 80053ac:	e7f4      	b.n	8005398 <_calloc_r+0x16>

080053ae <__ascii_mbtowc>:
 80053ae:	b082      	sub	sp, #8
 80053b0:	b901      	cbnz	r1, 80053b4 <__ascii_mbtowc+0x6>
 80053b2:	a901      	add	r1, sp, #4
 80053b4:	b142      	cbz	r2, 80053c8 <__ascii_mbtowc+0x1a>
 80053b6:	b14b      	cbz	r3, 80053cc <__ascii_mbtowc+0x1e>
 80053b8:	7813      	ldrb	r3, [r2, #0]
 80053ba:	600b      	str	r3, [r1, #0]
 80053bc:	7812      	ldrb	r2, [r2, #0]
 80053be:	1e10      	subs	r0, r2, #0
 80053c0:	bf18      	it	ne
 80053c2:	2001      	movne	r0, #1
 80053c4:	b002      	add	sp, #8
 80053c6:	4770      	bx	lr
 80053c8:	4610      	mov	r0, r2
 80053ca:	e7fb      	b.n	80053c4 <__ascii_mbtowc+0x16>
 80053cc:	f06f 0001 	mvn.w	r0, #1
 80053d0:	e7f8      	b.n	80053c4 <__ascii_mbtowc+0x16>

080053d2 <__ascii_wctomb>:
 80053d2:	b149      	cbz	r1, 80053e8 <__ascii_wctomb+0x16>
 80053d4:	2aff      	cmp	r2, #255	; 0xff
 80053d6:	bf85      	ittet	hi
 80053d8:	238a      	movhi	r3, #138	; 0x8a
 80053da:	6003      	strhi	r3, [r0, #0]
 80053dc:	700a      	strbls	r2, [r1, #0]
 80053de:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80053e2:	bf98      	it	ls
 80053e4:	2001      	movls	r0, #1
 80053e6:	4770      	bx	lr
 80053e8:	4608      	mov	r0, r1
 80053ea:	4770      	bx	lr

080053ec <_raise_r>:
 80053ec:	291f      	cmp	r1, #31
 80053ee:	b538      	push	{r3, r4, r5, lr}
 80053f0:	4604      	mov	r4, r0
 80053f2:	460d      	mov	r5, r1
 80053f4:	d904      	bls.n	8005400 <_raise_r+0x14>
 80053f6:	2316      	movs	r3, #22
 80053f8:	6003      	str	r3, [r0, #0]
 80053fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053fe:	bd38      	pop	{r3, r4, r5, pc}
 8005400:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005402:	b112      	cbz	r2, 800540a <_raise_r+0x1e>
 8005404:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005408:	b94b      	cbnz	r3, 800541e <_raise_r+0x32>
 800540a:	4620      	mov	r0, r4
 800540c:	f000 f830 	bl	8005470 <_getpid_r>
 8005410:	462a      	mov	r2, r5
 8005412:	4601      	mov	r1, r0
 8005414:	4620      	mov	r0, r4
 8005416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800541a:	f000 b817 	b.w	800544c <_kill_r>
 800541e:	2b01      	cmp	r3, #1
 8005420:	d00a      	beq.n	8005438 <_raise_r+0x4c>
 8005422:	1c59      	adds	r1, r3, #1
 8005424:	d103      	bne.n	800542e <_raise_r+0x42>
 8005426:	2316      	movs	r3, #22
 8005428:	6003      	str	r3, [r0, #0]
 800542a:	2001      	movs	r0, #1
 800542c:	e7e7      	b.n	80053fe <_raise_r+0x12>
 800542e:	2400      	movs	r4, #0
 8005430:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005434:	4628      	mov	r0, r5
 8005436:	4798      	blx	r3
 8005438:	2000      	movs	r0, #0
 800543a:	e7e0      	b.n	80053fe <_raise_r+0x12>

0800543c <raise>:
 800543c:	4b02      	ldr	r3, [pc, #8]	; (8005448 <raise+0xc>)
 800543e:	4601      	mov	r1, r0
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	f7ff bfd3 	b.w	80053ec <_raise_r>
 8005446:	bf00      	nop
 8005448:	20000064 	.word	0x20000064

0800544c <_kill_r>:
 800544c:	b538      	push	{r3, r4, r5, lr}
 800544e:	4d07      	ldr	r5, [pc, #28]	; (800546c <_kill_r+0x20>)
 8005450:	2300      	movs	r3, #0
 8005452:	4604      	mov	r4, r0
 8005454:	4608      	mov	r0, r1
 8005456:	4611      	mov	r1, r2
 8005458:	602b      	str	r3, [r5, #0]
 800545a:	f000 f80b 	bl	8005474 <_kill>
 800545e:	1c43      	adds	r3, r0, #1
 8005460:	d102      	bne.n	8005468 <_kill_r+0x1c>
 8005462:	682b      	ldr	r3, [r5, #0]
 8005464:	b103      	cbz	r3, 8005468 <_kill_r+0x1c>
 8005466:	6023      	str	r3, [r4, #0]
 8005468:	bd38      	pop	{r3, r4, r5, pc}
 800546a:	bf00      	nop
 800546c:	20000454 	.word	0x20000454

08005470 <_getpid_r>:
 8005470:	f7fd bb0c 	b.w	8002a8c <_getpid>

08005474 <_kill>:
 8005474:	4b02      	ldr	r3, [pc, #8]	; (8005480 <_kill+0xc>)
 8005476:	2258      	movs	r2, #88	; 0x58
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800547e:	4770      	bx	lr
 8005480:	20000454 	.word	0x20000454

08005484 <_exit>:
 8005484:	e7fe      	b.n	8005484 <_exit>
	...

08005488 <_init>:
 8005488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548a:	bf00      	nop
 800548c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548e:	bc08      	pop	{r3}
 8005490:	469e      	mov	lr, r3
 8005492:	4770      	bx	lr

08005494 <_fini>:
 8005494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005496:	bf00      	nop
 8005498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549a:	bc08      	pop	{r3}
 800549c:	469e      	mov	lr, r3
 800549e:	4770      	bx	lr
